{"title":"NumPy学习","slug":"NumPy","date":"2020-05-05T07:39:45.000Z","updated":"2020-05-05T09:51:37.208Z","comments":true,"path":"api/articles/NumPy.json","excerpt":null,"covers":["/image/Numpy广播.png"],"content":"<!-- build time:Tue May 05 2020 17:51:47 GMT+0800 (GMT+08:00) --><h1 id=\"ndarray数组的创建\"><a class=\"markdownIt-Anchor\" href=\"#ndarray数组的创建\"></a> ndarray数组的创建</h1><p>首先导入numpy包：</p><blockquote><p>import numpy as np</p></blockquote><p>通过np.+Tab键查看可使用的函数，在对应函数加上?，再运行，就可以很方便地看到如何使用函数的帮助信息。NumPy封装了一个新的数据类型ndarray（N-dimensional Array），它是一个多维数组对象。该对象封装了许多常用的数学运算函数，方便我们做数据处理、数据分析等，生成方式包括：</p><ul><li>从已有数据中创建；</li><li>利用 random 创建；</li><li>创建特定形状的多维数组；</li><li>利用 arange、linspace 函数生成等。</li></ul><h2 id=\"从已有数据中创建数组\"><a class=\"markdownIt-Anchor\" href=\"#从已有数据中创建数组\"></a> 从已有数据中创建数组</h2><p>对Python的基础数据类型（如列表、元组等）进行转换来生成 ndarray：</p><ul><li>将列表转换成ndarray</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">ls1 = [<span class=\"number\">10</span>, <span class=\"number\">42</span>, <span class=\"number\">0</span>, <span class=\"number\">-17</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">nd1 =np.array(ls1)</span><br><span class=\"line\">print(nd1)</span><br><span class=\"line\">[ <span class=\"number\">10</span>  <span class=\"number\">42</span>   <span class=\"number\">0</span> <span class=\"number\">-17</span>  <span class=\"number\">30</span>]</span><br><span class=\"line\">print(type(nd1))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">numpy</span>.<span class=\"title\">ndarray</span>'&gt;</span></span><br></pre></td></tr></table></figure><ul><li>嵌套列表转换成多维ndarray</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">ls2 = [[<span class=\"number\">8</span>, <span class=\"number\">-2</span>, <span class=\"number\">0</span>, <span class=\"number\">34</span>, <span class=\"number\">7</span>], [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]]</span><br><span class=\"line\">nd2 =np.array(ls2)</span><br><span class=\"line\">print(nd2)</span><br><span class=\"line\">print(type(nd2))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">[[ 8 -2  0 34  7]</span></span><br><span class=\"line\"><span class=\"string\">[ 6  7  8  9 10]]</span></span><br><span class=\"line\"><span class=\"string\">&lt;class 'numpy.ndarray'&gt;</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"comment\"># 可以将列表换成元组</span></span><br></pre></td></tr></table></figure><h2 id=\"利用random模块生成数组\"><a class=\"markdownIt-Anchor\" href=\"#利用random模块生成数组\"></a> 利用random模块生成数组</h2><table><thead><tr><th>数</th><th>描述</th></tr></thead><tbody><tr><td>np.random.random</td><td>生成0到1之间的随机数</td></tr><tr><td>np.random.uniform</td><td>生成均勻分布的随机数</td></tr><tr><td>np.random.randn</td><td>生成标准正态的随机数</td></tr><tr><td>np.random.randint</td><td>生成随机的整数</td></tr><tr><td>np.random.normal</td><td>生成正态分布</td></tr><tr><td>np.random.shuffle</td><td>随机打乱顺序</td></tr><tr><td>np.random.seed</td><td>设置随机数种子</td></tr><tr><td>random_sample</td><td>生成随机的浮点数</td></tr></tbody></table><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">nd3 =np.random.random([<span class=\"number\">4</span>, <span class=\"number\">3</span>])  <span class=\"comment\">#生成4行3列的数组</span></span><br><span class=\"line\">print(nd3)</span><br><span class=\"line\">print(<span class=\"string\">\"nd3的形状为：\"</span>,nd3.shape)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">[[0.83239801 0.74702617 0.04089187]</span></span><br><span class=\"line\"><span class=\"string\"> [0.90023902 0.91950877 0.38947664]</span></span><br><span class=\"line\"><span class=\"string\"> [0.76919904 0.90359661 0.38207995]</span></span><br><span class=\"line\"><span class=\"string\"> [0.26542428 0.89554719 0.5686561 ]]</span></span><br><span class=\"line\"><span class=\"string\">nd3的形状为： (4, 3)</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><h2 id=\"创建特定形状的多维数组\"><a class=\"markdownIt-Anchor\" href=\"#创建特定形状的多维数组\"></a> 创建特定形状的多维数组</h2><p>|函数|\t描述|<br>|np.zeros((3, 4))\t|创建 3×4 的元素全为 0 的数组|<br>|np.ones((3, 4))\t|创建 3×4 的元素全为 1 的数组|<br>|np.empty((2, 3))\t|创建 2×3 的空数组，空数据中的值并不为 0，而是未初始化的垃圾值|<br>|np.zeros_like(ndarr)\t|以 ndarr 相同维度创建元素全为 0数组|<br>|np.ones_like(ndarr)\t|以 ndarr 相同维度创建元素全为 1 数组|<br>|np.empty_like(ndarr)\t|以 ndarr 相同维度创建空数组|<br>|np.eye(5)\t|该函数用于创建一个 5×5 的矩阵，对角线为 1，其余为 0|<br>|np.full((3,5), 10)\t|创建 3×5 的元素全为 10 的数组，10 为指定值|</p><p>实例如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd7 = np.eye(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd8 = np.diag([<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd7</span><br><span class=\"line\">array([[<span class=\"number\">1.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">0.</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">1.</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd8</span><br><span class=\"line\">array([[ <span class=\"number\">1</span>,  <span class=\"number\">0</span>,  <span class=\"number\">0</span>,  <span class=\"number\">0</span>],</span><br><span class=\"line\">       [ <span class=\"number\">0</span>,  <span class=\"number\">8</span>,  <span class=\"number\">0</span>,  <span class=\"number\">0</span>],</span><br><span class=\"line\">       [ <span class=\"number\">0</span>,  <span class=\"number\">0</span>,  <span class=\"number\">3</span>,  <span class=\"number\">0</span>],</span><br><span class=\"line\">       [ <span class=\"number\">0</span>,  <span class=\"number\">0</span>,  <span class=\"number\">0</span>, <span class=\"number\">10</span>]])</span><br></pre></td></tr></table></figure><p>可以把生成的数据保存到文件中，如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">nd9 = np.random.random([<span class=\"number\">3</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\">np.savetxt(X=nd9, fname=<span class=\"string\">'./data.txt'</span>)</span><br><span class=\"line\">nd10 = np.loadtxt(<span class=\"string\">'./data.txt'</span>)</span><br><span class=\"line\">print(nd10)</span><br></pre></td></tr></table></figure><h2 id=\"利用-arange-和-linspace-函数生成数组\"><a class=\"markdownIt-Anchor\" href=\"#利用-arange-和-linspace-函数生成数组\"></a> 利用 arange() 和 linspace() 函数生成数组</h2><p>arange()是numpy模块中的函数，其格式为：</p><blockquote><p>arange([start,] stop[,step,], dtype=None)</p></blockquote><p>其中，start与stop用来指定范围，step用来设定步长。在生成一个ndarray时，start默认为0，步长step可为小数。Python有个内置函数range，其功能与此类似。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(np.arange(<span class=\"number\">9</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>))</span><br><span class=\"line\">[<span class=\"number\">9</span> <span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">6</span> <span class=\"number\">5</span> <span class=\"number\">4</span> <span class=\"number\">3</span> <span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure><p>linspace()也是numpy模块中常用的函数，其格式为：</p><blockquote><p>np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</p></blockquote><p>linspace()可以根据输入的指定数据范围以及等份数量，自动生成一个线性等分向量，其中endpoint（包含终点）默认为True，等分数量 num默认为50。如果将retstep设置为True，则会返回一个带步长的 ndarray。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(np.linspace(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">[<span class=\"number\">0.</span>         <span class=\"number\">0.11111111</span> <span class=\"number\">0.22222222</span> <span class=\"number\">0.33333333</span> <span class=\"number\">0.44444444</span> <span class=\"number\">0.55555556</span></span><br><span class=\"line\"> <span class=\"number\">0.66666667</span> <span class=\"number\">0.77777778</span> <span class=\"number\">0.88888889</span> <span class=\"number\">1.</span>        ]</span><br></pre></td></tr></table></figure><h1 id=\"ndarray数据元素的获取\"><a class=\"markdownIt-Anchor\" href=\"#ndarray数据元素的获取\"></a> ndarray数据元素的获取</h1><p>在NumPy中，既可以获取 ndarray 数组的单个元素，也可以获取一组元素（也即切片），这与 Python 中的列表（list）和元组（tuple）非常类似。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd2=np.arange(<span class=\"number\">25</span>).reshape([<span class=\"number\">5</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd2[<span class=\"number\">1</span>:<span class=\"number\">3</span>,<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">array([[ <span class=\"number\">6</span>,  <span class=\"number\">7</span>],</span><br><span class=\"line\">       [<span class=\"number\">11</span>, <span class=\"number\">12</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd2[:,<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">array([[ <span class=\"number\">1</span>,  <span class=\"number\">2</span>],</span><br><span class=\"line\">       [ <span class=\"number\">6</span>,  <span class=\"number\">7</span>],</span><br><span class=\"line\">       [<span class=\"number\">11</span>, <span class=\"number\">12</span>],</span><br><span class=\"line\">       [<span class=\"number\">16</span>, <span class=\"number\">17</span>],</span><br><span class=\"line\">       [<span class=\"number\">21</span>, <span class=\"number\">22</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd2[(nd2&gt;<span class=\"number\">3</span>)&amp;(nd2&lt;<span class=\"number\">10</span>)]</span><br><span class=\"line\">array([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>])</span><br></pre></td></tr></table></figure><p>获取数组中的部分元素除了通过指定索引标签来实现外，还可以通过使用一些函数来实现，如通过random.choice函数从指定的样本中随机抽取数据。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a=np.arange(<span class=\"number\">1</span>,<span class=\"number\">25</span>,dtype=float)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c3=nr.choice(a,size=(<span class=\"number\">3</span>,<span class=\"number\">4</span>),p=a / np.sum(a))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c3</span><br><span class=\"line\">array([[<span class=\"number\">16.</span>, <span class=\"number\">13.</span>, <span class=\"number\">10.</span>, <span class=\"number\">23.</span>],</span><br><span class=\"line\">       [ <span class=\"number\">9.</span>, <span class=\"number\">24.</span>,  <span class=\"number\">4.</span>, <span class=\"number\">18.</span>],</span><br><span class=\"line\">       [<span class=\"number\">11.</span>, <span class=\"number\">23.</span>, <span class=\"number\">18.</span>, <span class=\"number\">19.</span>]])</span><br></pre></td></tr></table></figure><h1 id=\"算术运算\"><a class=\"markdownIt-Anchor\" href=\"#算术运算\"></a> 算术运算</h1><p>涉及大量的数组或矩阵运算，本节我们将重点介绍两种常用的运算：</p><ul><li>一种是对应元素相乘，又称为逐元乘法（Element-Wise Product），可以使用 np.multiply() 函数或者*运算符；</li><li>另一种是点积或内积元素，运算符为np.dot()。</li></ul><h2 id=\"对应元素相乘\"><a class=\"markdownIt-Anchor\" href=\"#对应元素相乘\"></a> 对应元素相乘</h2><p>对应元素相乘（Element-Wise Product）是两个矩阵中对应元素乘积。np.multiply() 函数用于数组或矩阵对应元素相乘，输出与相乘数组或矩阵的大小一致，其格式如下：</p><blockquote><p>numpy.multiply(x1, x2, /, out=None, *, where=True,casting=‘same_kind’, order=‘K’, dtype=None, subok=True[, signature, extobj])</p></blockquote><p>其中x1、x2之间的对应元素相乘遵守广播规则。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">-1</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B = np.array([[<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A*B</span><br><span class=\"line\">array([[ <span class=\"number\">2</span>,  <span class=\"number\">0</span>],</span><br><span class=\"line\">       [<span class=\"number\">-3</span>, <span class=\"number\">16</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.multiply(A,B)</span><br><span class=\"line\">array([[ <span class=\"number\">2</span>,  <span class=\"number\">0</span>],</span><br><span class=\"line\">       [<span class=\"number\">-3</span>, <span class=\"number\">16</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(A*<span class=\"number\">2.0</span>)</span><br><span class=\"line\">[[ <span class=\"number\">2.</span>  <span class=\"number\">4.</span>]</span><br><span class=\"line\"> [<span class=\"number\">-2.</span>  <span class=\"number\">8.</span>]]</span><br><span class=\"line\"> <span class=\"comment\">##数组通过激活函数，输入输出形状一致</span></span><br><span class=\"line\"> <span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">X = np.random.rand(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">softmoid</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> / (<span class=\"number\">1</span> + np.exp(-x))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">relu</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.maximum(<span class=\"number\">0</span>, x)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">softmax</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.exp(x) / np.sum(np.exp(x))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"输入参数X的形状：\"</span>, X.shape)</span><br><span class=\"line\">print(<span class=\"string\">\"激活函数softmoid输出形状：\"</span>, softmoid(X).shape)</span><br><span class=\"line\">print(<span class=\"string\">\"激活函数relu输出形状：\"</span>, relu(X).shape)</span><br><span class=\"line\">print(<span class=\"string\">\"激活函数softmax输出形状：\"</span>, softmax(X).shape)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">输入参数X的形状： (2, 3)</span></span><br><span class=\"line\"><span class=\"string\">激活函数softmoid输出形状： (2, 3)</span></span><br><span class=\"line\"><span class=\"string\">激活函数relu输出形状： (2, 3)</span></span><br><span class=\"line\"><span class=\"string\">激活函数softmax输出形状： (2, 3)</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><h2 id=\"点积运算\"><a class=\"markdownIt-Anchor\" href=\"#点积运算\"></a> 点积运算</h2><p>点积运算（Dot Product）又称为内积，在 NumPy 中用 np.dot() 函数表示，其一般格式为：</p><blockquote><p>numpy.dot(a, b, out=None)</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X1=np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\">X2=np.array([[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>],[<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]])</span><br><span class=\"line\">X3=np.dot(X1,X2)</span><br><span class=\"line\">print(X3)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">[[21 24 27]</span></span><br><span class=\"line\"><span class=\"string\">[47 54 61]]</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><h1 id=\"数组的变形改变数组形状\"><a class=\"markdownIt-Anchor\" href=\"#数组的变形改变数组形状\"></a> 数组的变形(改变数组形状)</h1><p>在矩阵或者数组的运算中，经常会遇到需要把多个向量或矩阵按某轴方向合并，或展平（如在卷积或循环神经网络中，在全连接层之前，需要把矩阵展平）的情况。下面介绍几种常用的数组变形方法。</p><table><thead><tr><th>函数/属性</th><th>描述</th></tr></thead><tbody><tr><td>arr.reshape()</td><td>重新将向量 arr 维度进行改变，不修改向量本身</td></tr><tr><td>arr.resize()</td><td>重新将向量 arr维度进行改变，修改向量本身</td></tr><tr><td>arr.T</td><td>对向量 arr 进行转置</td></tr><tr><td>arr.ravel()</td><td>对向量 arr 进行展平，即将多维数组变成1维数组，不会产生原数组的副本</td></tr><tr><td>arr.flatten()</td><td>对向量 arr 进行展平，即将多维数组变成1维数组，返回原数组的副本</td></tr><tr><td>arr.squeeze()</td><td>只能对维数为1的维度降维。对多维数组使用时不会报错，但是不会产生任何影响</td></tr><tr><td>arr.transpose()</td><td>对高维矩阵进行轴对换</td></tr></tbody></table><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试几个常用的函数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arr = np.arange(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arr.reshape(<span class=\"number\">2</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">array([[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">       [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arr.resize(<span class=\"number\">2</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(arr)</span><br><span class=\"line\">[[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>]</span><br><span class=\"line\"> [<span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span>]]</span><br><span class=\"line\"> &gt;&gt;&gt; arr.T</span><br><span class=\"line\">array([[<span class=\"number\">0</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">       [<span class=\"number\">1</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">       [<span class=\"number\">2</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">       [<span class=\"number\">3</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">       [<span class=\"number\">4</span>, <span class=\"number\">9</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(arr.ravel(<span class=\"string\">'F'</span>))  <span class=\"comment\"># 按列展平</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">5</span> <span class=\"number\">1</span> <span class=\"number\">6</span> <span class=\"number\">2</span> <span class=\"number\">7</span> <span class=\"number\">3</span> <span class=\"number\">8</span> <span class=\"number\">4</span> <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(arr.ravel())  <span class=\"comment\"># 按行展平</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"comment\"># flatten()函数将矩阵转换成向量</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a =np.floor(<span class=\"number\">10</span>*np.random.random((<span class=\"number\">3</span>,<span class=\"number\">4</span>)))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a)</span><br><span class=\"line\">[[<span class=\"number\">2.</span> <span class=\"number\">8.</span> <span class=\"number\">5.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">2.</span> <span class=\"number\">0.</span> <span class=\"number\">5.</span> <span class=\"number\">4.</span>]</span><br><span class=\"line\"> [<span class=\"number\">9.</span> <span class=\"number\">9.</span> <span class=\"number\">7.</span> <span class=\"number\">8.</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a.flatten())</span><br><span class=\"line\">[<span class=\"number\">2.</span> <span class=\"number\">8.</span> <span class=\"number\">5.</span> <span class=\"number\">1.</span> <span class=\"number\">2.</span> <span class=\"number\">0.</span> <span class=\"number\">5.</span> <span class=\"number\">4.</span> <span class=\"number\">9.</span> <span class=\"number\">9.</span> <span class=\"number\">7.</span> <span class=\"number\">8.</span>]</span><br><span class=\"line\"><span class=\"comment\"># transpose() 对高维矩阵进行轴对换</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arr2 = np.arange(<span class=\"number\">24</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(arr2.shape)  <span class=\"comment\">#(2, 3, 4)</span></span><br><span class=\"line\">(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(arr2.transpose(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>).shape)  <span class=\"comment\">#(3, 4, 2)</span></span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure><h1 id=\"ndarray合并数组\"><a class=\"markdownIt-Anchor\" href=\"#ndarray合并数组\"></a> ndarray合并数组</h1><p>|函数\t|描述|<br>|np.append()|\t内存占用大|<br>|np.concatenate()\t|没有内存问题|<br>|np.stack()\t|沿着新的轴加入一系列数组|<br>|np.hstack()\t|堆栈数组垂直顺序（行）|<br>|np.vstack()\t|堆栈数组垂直顺序（列）|<br>|np.dstack()\t|堆栈数组按顺序深入（沿第3维）|<br>|np.vsplit()\t|将数组分解成垂直的多个子数组的列表|</p><p>几点说明：</p><ul><li>append()、concatenate() 以及 stack() 都有一个 axis 参数，用于控制数组的合并方式是按行还是按列。</li><li>对于 append() 和 concatenate()，待合并的数组必须有相同的行数或列数（满足一个即可）。</li><li>stack()、hstack()、dstack() 要求待合并的数组必须具有相同的形状（shape）</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a =np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = np.array([[<span class=\"number\">5</span>, <span class=\"number\">6</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = np.concatenate((a, b), axis=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(c)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\"> [<span class=\"number\">3</span> <span class=\"number\">4</span>]</span><br><span class=\"line\"> [<span class=\"number\">5</span> <span class=\"number\">6</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = np.concatenate((a, b.T), axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(d)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">5</span>]</span><br><span class=\"line\"> [<span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">6</span>]]</span><br><span class=\"line\"><span class=\"comment\"># stack，沿指定轴堆叠数组或矩阵</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a =np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = np.array([[<span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(np.stack((a, b), axis=<span class=\"number\">0</span>))</span><br><span class=\"line\">[[[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\">  [<span class=\"number\">3</span> <span class=\"number\">4</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"> [[<span class=\"number\">5</span> <span class=\"number\">6</span>]</span><br><span class=\"line\">  [<span class=\"number\">7</span> <span class=\"number\">8</span>]]]</span><br></pre></td></tr></table></figure><h1 id=\"numpy批量处理\"><a class=\"markdownIt-Anchor\" href=\"#numpy批量处理\"></a> Numpy批量处理</h1><p>如何把大数据拆分成多个批次呢？可采用如下步骤：</p><ul><li>得到数据集</li><li>随机打乱数据</li><li>定义批大小</li><li>批处理数据集</li></ul><p>示例如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">data_train = np.random.randn(<span class=\"number\">2000</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">print(data_train.shape)</span><br><span class=\"line\"><span class=\"comment\"># (2000, 2, 3)</span></span><br><span class=\"line\">np.random.shuffle(data_train)</span><br><span class=\"line\"><span class=\"comment\"># 定义批量</span></span><br><span class=\"line\">batch_size = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"comment\"># 批处理</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,len(data_train),batch_size):</span><br><span class=\"line\">    x_batch_sum=np.sum(data_train[i:i+batch_size])</span><br><span class=\"line\">    print(<span class=\"string\">\"第&#123;&#125;批次，该批次的数据之和：&#123;&#125;\"</span>.format(i,x_batch_sum))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">(2000, 2, 3)</span></span><br><span class=\"line\"><span class=\"string\">第0批次，该批次的数据之和：-2.5597045866733144</span></span><br><span class=\"line\"><span class=\"string\">第100批次，该批次的数据之和：-28.20552534073626</span></span><br><span class=\"line\"><span class=\"string\">第200批次，该批次的数据之和：-39.954399816952744</span></span><br><span class=\"line\"><span class=\"string\">第300批次，该批次的数据之和：15.230660353237122</span></span><br><span class=\"line\"><span class=\"string\">第400批次，该批次的数据之和：3.756517698762309</span></span><br><span class=\"line\"><span class=\"string\">第500批次，该批次的数据之和：2.416672409682702</span></span><br><span class=\"line\"><span class=\"string\">第600批次，该批次的数据之和：-47.262073781065844</span></span><br><span class=\"line\"><span class=\"string\">第700批次，该批次的数据之和：-4.384517680501666</span></span><br><span class=\"line\"><span class=\"string\">第800批次，该批次的数据之和：0.9617151643255646</span></span><br><span class=\"line\"><span class=\"string\">第900批次，该批次的数据之和：27.657472571275203</span></span><br><span class=\"line\"><span class=\"string\">第1000批次，该批次的数据之和：39.91121481922393</span></span><br><span class=\"line\"><span class=\"string\">第1100批次，该批次的数据之和：-37.02521264944135</span></span><br><span class=\"line\"><span class=\"string\">第1200批次，该批次的数据之和：-19.19864630328485</span></span><br><span class=\"line\"><span class=\"string\">第1300批次，该批次的数据之和：37.92424857767804</span></span><br><span class=\"line\"><span class=\"string\">第1400批次，该批次的数据之和：-17.742587465605805</span></span><br><span class=\"line\"><span class=\"string\">第1500批次，该批次的数据之和：-9.856616675258884</span></span><br><span class=\"line\"><span class=\"string\">第1600批次，该批次的数据之和：6.976135672087105</span></span><br><span class=\"line\"><span class=\"string\">第1700批次，该批次的数据之和：-5.35707792331438</span></span><br><span class=\"line\"><span class=\"string\">第1800批次，该批次的数据之和：15.930799536487907</span></span><br><span class=\"line\"><span class=\"string\">第1900批次，该批次的数据之和：-4.654408531448469</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><h1 id=\"ufnc通用函数\"><a class=\"markdownIt-Anchor\" href=\"#ufnc通用函数\"></a> ufnc通用函数</h1><p>NumPy 中的函数可以是向量或矩阵，而利用向量或矩阵可以避免使用循环语句，通用函数如下：</p><table><thead><tr><th>函数</th><th>使用方法</th></tr></thead><tbody><tr><td>sqrt()</td><td>计算序列化数据的平方根</td></tr><tr><td>sin()、cos()</td><td>三角函数</td></tr><tr><td>abs()</td><td>计算序列化数据的绝对值</td></tr><tr><td>dot()</td><td>矩阵运算</td></tr><tr><td>log()、logl()、log2()</td><td>对数函数</td></tr><tr><td>exp()</td><td>指数函数</td></tr><tr><td>cumsum()、cumproduct()</td><td>累计求和、求积</td></tr><tr><td>sum()</td><td>对一个序列化数据进行求和</td></tr><tr><td>mean()</td><td>计算均值</td></tr><tr><td>median()</td><td>计算中位数</td></tr><tr><td>std()</td><td>计算标准差</td></tr><tr><td>var()</td><td>计算方差</td></tr><tr><td>corrcoef()</td><td>计算相关系数</td></tr></tbody></table><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># math与numpy函数性能比较</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">x = [i * <span class=\"number\">0.001</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.arange(<span class=\"number\">1000000</span>)]</span><br><span class=\"line\">start = time.clock()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, t <span class=\"keyword\">in</span> enumerate(x):</span><br><span class=\"line\">    x[i] = math.sin(t)</span><br><span class=\"line\">print(<span class=\"string\">\"math.sin:\"</span>, time.clock() - start)</span><br><span class=\"line\">x = [i * <span class=\"number\">0.001</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.arange(<span class=\"number\">1000000</span>)]</span><br><span class=\"line\">x = np.array(x)</span><br><span class=\"line\">start = time.clock()</span><br><span class=\"line\">np.sin(x)</span><br><span class=\"line\">print(<span class=\"string\">\"numpy.sin:\"</span>, time.clock() - start)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">math.sin: 0.17639699999999991</span></span><br><span class=\"line\"><span class=\"string\">numpy.sin: 0.017746999999999957</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><h2 id=\"循环与向量运算\"><a class=\"markdownIt-Anchor\" href=\"#循环与向量运算\"></a> 循环与向量运算</h2><p>实现计算的向量化，可大大地提高运行速度。NumPy 库中的内建函数使用了 SIMD 指令。如下使用的向量化要比使用循环计算速度快得多。如果使用GPU，其性能将更强大，不过Numpy不支持GPU。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">x1 = np.random.rand(<span class=\"number\">1000000</span>)</span><br><span class=\"line\">x2 = np.random.rand(<span class=\"number\">1000000</span>)</span><br><span class=\"line\"><span class=\"comment\">##使用循环计算向量点积</span></span><br><span class=\"line\">tic = time.process_time()</span><br><span class=\"line\">dot = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(x1)):</span><br><span class=\"line\">    dot += x1[i] * x2[i]</span><br><span class=\"line\">    toc = time.process_time()</span><br><span class=\"line\">print(<span class=\"string\">\"dot = \"</span> + str(dot) + <span class=\"string\">\"\\n for loop----- Computation time = \"</span> +</span><br><span class=\"line\">      str(<span class=\"number\">1000</span> * (toc - tic)) + <span class=\"string\">\"ms\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 使用numpy函数求点积</span></span><br><span class=\"line\">tic = time.process_time()</span><br><span class=\"line\">dot = <span class=\"number\">0</span></span><br><span class=\"line\">dot = np.dot(x1, x2)</span><br><span class=\"line\">toc = time.process_time()</span><br><span class=\"line\">print(<span class=\"string\">\"dot = \"</span> + str(dot) + <span class=\"string\">\"\\n verctor version---- Computation time = \"</span> +</span><br><span class=\"line\">      str(<span class=\"number\">1000</span> * (toc - tic)) + <span class=\"string\">\"ms\"</span>)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">dot = 249965.34253404333</span></span><br><span class=\"line\"><span class=\"string\"> for loop----- Computation time = 1146.446813ms</span></span><br><span class=\"line\"><span class=\"string\">dot = 249965.34253405244</span></span><br><span class=\"line\"><span class=\"string\"> verctor version---- Computation time = 2.297117999999987ms</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><h1 id=\"广播机制\"><a class=\"markdownIt-Anchor\" href=\"#广播机制\"></a> 广播机制</h1><p>调整数组使得 shape 一样，需要满足一定的规则，否则将出错。这些规则可归纳为以下 4 条。</p><ul><li>让所有输入数组都向其中 shape 最长的数组看齐，不足的部分则通过在前面加 1 补齐，如：</li></ul><blockquote><p>a：2×3×2<br>b：3×2</p></blockquote><p>则 b 向 a 看齐，在 b 的前面加 1，变为 1×3×2。</p><ul><li>输出数组的 shape 是输入数组 shape 的各个轴上的最大值。</li><li>如果输入数组的某个轴和输出数组的对应轴的长度相同或者某个轴的长度为 1 时，这个数组能被用来计算，否则出错。</li><li>当输入数组的某个轴的长度为1时，沿着此轴运算时都用（或复制）此轴上的第一组值。</li></ul><blockquote><p>目的：计算A+B，其中A为 4×1 矩阵，B为一维向量 (3,)。</p></blockquote><p>处理过程如下：</p><ul><li>根据规则 1，B 需要向看齐，把 B 变为 (1,3)</li><li>根据规则2，输出的结果为各个轴上的最大值，即输出结果应该为 (4,3) 矩阵，那么 A 如何由 (4,1) 变为 (4,3) 矩阵？B 又如何由 (1,3) 变为 (4,3) 矩阵？</li><li>根据规则4，用此轴上的第一组值（要主要区分是哪个轴），进行复制（但在实际处理中不是真正复制，否则太耗内存，而是采用其他对象如 ogrid 对象，进行网格处理）即可，详细处理过程如图1所示。</li></ul><div align=\"center\"><img src=\"/image/Numpy广播.png\" width=\"400\"></div><center>图1 NumPy广播规则</center><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">A = np.arange(<span class=\"number\">0</span>, <span class=\"number\">40</span>,<span class=\"number\">10</span>).reshape(<span class=\"number\">4</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">B = np.arange(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"A矩阵的形状:&#123;&#125;,B矩阵的形状:&#123;&#125;\"</span>.format(A.shape,B.shape))</span><br><span class=\"line\">C=A+B</span><br><span class=\"line\">print(<span class=\"string\">\"C矩阵的形状:&#123;&#125;\"</span>.format(C.shape))</span><br><span class=\"line\">print(C)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">A矩阵的形状:(4, 1),B矩阵的形状:(3,)</span></span><br><span class=\"line\"><span class=\"string\">C矩阵的形状:(4, 3)</span></span><br><span class=\"line\"><span class=\"string\">[[ 0  1  2]</span></span><br><span class=\"line\"><span class=\"string\"> [10 11 12]</span></span><br><span class=\"line\"><span class=\"string\"> [20 21 22]</span></span><br><span class=\"line\"><span class=\"string\"> [30 31 32]]</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","more":"<!-- build time:Tue May 05 2020 17:51:47 GMT+0800 (GMT+08:00) --><h1 id=\"ndarray数组的创建\"><a class=\"markdownIt-Anchor\" href=\"#ndarray数组的创建\"></a> ndarray数组的创建</h1><p>首先导入numpy包：</p><blockquote><p>import numpy as np</p></blockquote><p>通过np.+Tab键查看可使用的函数，在对应函数加上?，再运行，就可以很方便地看到如何使用函数的帮助信息。NumPy封装了一个新的数据类型ndarray（N-dimensional Array），它是一个多维数组对象。该对象封装了许多常用的数学运算函数，方便我们做数据处理、数据分析等，生成方式包括：</p><ul><li>从已有数据中创建；</li><li>利用 random 创建；</li><li>创建特定形状的多维数组；</li><li>利用 arange、linspace 函数生成等。</li></ul><h2 id=\"从已有数据中创建数组\"><a class=\"markdownIt-Anchor\" href=\"#从已有数据中创建数组\"></a> 从已有数据中创建数组</h2><p>对Python的基础数据类型（如列表、元组等）进行转换来生成 ndarray：</p><ul><li>将列表转换成ndarray</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">ls1 = [<span class=\"number\">10</span>, <span class=\"number\">42</span>, <span class=\"number\">0</span>, <span class=\"number\">-17</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">nd1 =np.array(ls1)</span><br><span class=\"line\">print(nd1)</span><br><span class=\"line\">[ <span class=\"number\">10</span>  <span class=\"number\">42</span>   <span class=\"number\">0</span> <span class=\"number\">-17</span>  <span class=\"number\">30</span>]</span><br><span class=\"line\">print(type(nd1))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">numpy</span>.<span class=\"title\">ndarray</span>'&gt;</span></span><br></pre></td></tr></table></figure><ul><li>嵌套列表转换成多维ndarray</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">ls2 = [[<span class=\"number\">8</span>, <span class=\"number\">-2</span>, <span class=\"number\">0</span>, <span class=\"number\">34</span>, <span class=\"number\">7</span>], [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]]</span><br><span class=\"line\">nd2 =np.array(ls2)</span><br><span class=\"line\">print(nd2)</span><br><span class=\"line\">print(type(nd2))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">[[ 8 -2  0 34  7]</span></span><br><span class=\"line\"><span class=\"string\">[ 6  7  8  9 10]]</span></span><br><span class=\"line\"><span class=\"string\">&lt;class 'numpy.ndarray'&gt;</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"comment\"># 可以将列表换成元组</span></span><br></pre></td></tr></table></figure><h2 id=\"利用random模块生成数组\"><a class=\"markdownIt-Anchor\" href=\"#利用random模块生成数组\"></a> 利用random模块生成数组</h2><table><thead><tr><th>数</th><th>描述</th></tr></thead><tbody><tr><td>np.random.random</td><td>生成0到1之间的随机数</td></tr><tr><td>np.random.uniform</td><td>生成均勻分布的随机数</td></tr><tr><td>np.random.randn</td><td>生成标准正态的随机数</td></tr><tr><td>np.random.randint</td><td>生成随机的整数</td></tr><tr><td>np.random.normal</td><td>生成正态分布</td></tr><tr><td>np.random.shuffle</td><td>随机打乱顺序</td></tr><tr><td>np.random.seed</td><td>设置随机数种子</td></tr><tr><td>random_sample</td><td>生成随机的浮点数</td></tr></tbody></table><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">nd3 =np.random.random([<span class=\"number\">4</span>, <span class=\"number\">3</span>])  <span class=\"comment\">#生成4行3列的数组</span></span><br><span class=\"line\">print(nd3)</span><br><span class=\"line\">print(<span class=\"string\">\"nd3的形状为：\"</span>,nd3.shape)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">[[0.83239801 0.74702617 0.04089187]</span></span><br><span class=\"line\"><span class=\"string\"> [0.90023902 0.91950877 0.38947664]</span></span><br><span class=\"line\"><span class=\"string\"> [0.76919904 0.90359661 0.38207995]</span></span><br><span class=\"line\"><span class=\"string\"> [0.26542428 0.89554719 0.5686561 ]]</span></span><br><span class=\"line\"><span class=\"string\">nd3的形状为： (4, 3)</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><h2 id=\"创建特定形状的多维数组\"><a class=\"markdownIt-Anchor\" href=\"#创建特定形状的多维数组\"></a> 创建特定形状的多维数组</h2><p>|函数|\t描述|<br>|np.zeros((3, 4))\t|创建 3×4 的元素全为 0 的数组|<br>|np.ones((3, 4))\t|创建 3×4 的元素全为 1 的数组|<br>|np.empty((2, 3))\t|创建 2×3 的空数组，空数据中的值并不为 0，而是未初始化的垃圾值|<br>|np.zeros_like(ndarr)\t|以 ndarr 相同维度创建元素全为 0数组|<br>|np.ones_like(ndarr)\t|以 ndarr 相同维度创建元素全为 1 数组|<br>|np.empty_like(ndarr)\t|以 ndarr 相同维度创建空数组|<br>|np.eye(5)\t|该函数用于创建一个 5×5 的矩阵，对角线为 1，其余为 0|<br>|np.full((3,5), 10)\t|创建 3×5 的元素全为 10 的数组，10 为指定值|</p><p>实例如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd7 = np.eye(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd8 = np.diag([<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd7</span><br><span class=\"line\">array([[<span class=\"number\">1.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">0.</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">1.</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd8</span><br><span class=\"line\">array([[ <span class=\"number\">1</span>,  <span class=\"number\">0</span>,  <span class=\"number\">0</span>,  <span class=\"number\">0</span>],</span><br><span class=\"line\">       [ <span class=\"number\">0</span>,  <span class=\"number\">8</span>,  <span class=\"number\">0</span>,  <span class=\"number\">0</span>],</span><br><span class=\"line\">       [ <span class=\"number\">0</span>,  <span class=\"number\">0</span>,  <span class=\"number\">3</span>,  <span class=\"number\">0</span>],</span><br><span class=\"line\">       [ <span class=\"number\">0</span>,  <span class=\"number\">0</span>,  <span class=\"number\">0</span>, <span class=\"number\">10</span>]])</span><br></pre></td></tr></table></figure><p>可以把生成的数据保存到文件中，如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">nd9 = np.random.random([<span class=\"number\">3</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\">np.savetxt(X=nd9, fname=<span class=\"string\">'./data.txt'</span>)</span><br><span class=\"line\">nd10 = np.loadtxt(<span class=\"string\">'./data.txt'</span>)</span><br><span class=\"line\">print(nd10)</span><br></pre></td></tr></table></figure><h2 id=\"利用-arange-和-linspace-函数生成数组\"><a class=\"markdownIt-Anchor\" href=\"#利用-arange-和-linspace-函数生成数组\"></a> 利用 arange() 和 linspace() 函数生成数组</h2><p>arange()是numpy模块中的函数，其格式为：</p><blockquote><p>arange([start,] stop[,step,], dtype=None)</p></blockquote><p>其中，start与stop用来指定范围，step用来设定步长。在生成一个ndarray时，start默认为0，步长step可为小数。Python有个内置函数range，其功能与此类似。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(np.arange(<span class=\"number\">9</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>))</span><br><span class=\"line\">[<span class=\"number\">9</span> <span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">6</span> <span class=\"number\">5</span> <span class=\"number\">4</span> <span class=\"number\">3</span> <span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure><p>linspace()也是numpy模块中常用的函数，其格式为：</p><blockquote><p>np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</p></blockquote><p>linspace()可以根据输入的指定数据范围以及等份数量，自动生成一个线性等分向量，其中endpoint（包含终点）默认为True，等分数量 num默认为50。如果将retstep设置为True，则会返回一个带步长的 ndarray。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(np.linspace(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">[<span class=\"number\">0.</span>         <span class=\"number\">0.11111111</span> <span class=\"number\">0.22222222</span> <span class=\"number\">0.33333333</span> <span class=\"number\">0.44444444</span> <span class=\"number\">0.55555556</span></span><br><span class=\"line\"> <span class=\"number\">0.66666667</span> <span class=\"number\">0.77777778</span> <span class=\"number\">0.88888889</span> <span class=\"number\">1.</span>        ]</span><br></pre></td></tr></table></figure><h1 id=\"ndarray数据元素的获取\"><a class=\"markdownIt-Anchor\" href=\"#ndarray数据元素的获取\"></a> ndarray数据元素的获取</h1><p>在NumPy中，既可以获取 ndarray 数组的单个元素，也可以获取一组元素（也即切片），这与 Python 中的列表（list）和元组（tuple）非常类似。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd2=np.arange(<span class=\"number\">25</span>).reshape([<span class=\"number\">5</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd2[<span class=\"number\">1</span>:<span class=\"number\">3</span>,<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">array([[ <span class=\"number\">6</span>,  <span class=\"number\">7</span>],</span><br><span class=\"line\">       [<span class=\"number\">11</span>, <span class=\"number\">12</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd2[:,<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">array([[ <span class=\"number\">1</span>,  <span class=\"number\">2</span>],</span><br><span class=\"line\">       [ <span class=\"number\">6</span>,  <span class=\"number\">7</span>],</span><br><span class=\"line\">       [<span class=\"number\">11</span>, <span class=\"number\">12</span>],</span><br><span class=\"line\">       [<span class=\"number\">16</span>, <span class=\"number\">17</span>],</span><br><span class=\"line\">       [<span class=\"number\">21</span>, <span class=\"number\">22</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nd2[(nd2&gt;<span class=\"number\">3</span>)&amp;(nd2&lt;<span class=\"number\">10</span>)]</span><br><span class=\"line\">array([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>])</span><br></pre></td></tr></table></figure><p>获取数组中的部分元素除了通过指定索引标签来实现外，还可以通过使用一些函数来实现，如通过random.choice函数从指定的样本中随机抽取数据。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a=np.arange(<span class=\"number\">1</span>,<span class=\"number\">25</span>,dtype=float)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c3=nr.choice(a,size=(<span class=\"number\">3</span>,<span class=\"number\">4</span>),p=a / np.sum(a))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c3</span><br><span class=\"line\">array([[<span class=\"number\">16.</span>, <span class=\"number\">13.</span>, <span class=\"number\">10.</span>, <span class=\"number\">23.</span>],</span><br><span class=\"line\">       [ <span class=\"number\">9.</span>, <span class=\"number\">24.</span>,  <span class=\"number\">4.</span>, <span class=\"number\">18.</span>],</span><br><span class=\"line\">       [<span class=\"number\">11.</span>, <span class=\"number\">23.</span>, <span class=\"number\">18.</span>, <span class=\"number\">19.</span>]])</span><br></pre></td></tr></table></figure><h1 id=\"算术运算\"><a class=\"markdownIt-Anchor\" href=\"#算术运算\"></a> 算术运算</h1><p>涉及大量的数组或矩阵运算，本节我们将重点介绍两种常用的运算：</p><ul><li>一种是对应元素相乘，又称为逐元乘法（Element-Wise Product），可以使用 np.multiply() 函数或者*运算符；</li><li>另一种是点积或内积元素，运算符为np.dot()。</li></ul><h2 id=\"对应元素相乘\"><a class=\"markdownIt-Anchor\" href=\"#对应元素相乘\"></a> 对应元素相乘</h2><p>对应元素相乘（Element-Wise Product）是两个矩阵中对应元素乘积。np.multiply() 函数用于数组或矩阵对应元素相乘，输出与相乘数组或矩阵的大小一致，其格式如下：</p><blockquote><p>numpy.multiply(x1, x2, /, out=None, *, where=True,casting=‘same_kind’, order=‘K’, dtype=None, subok=True[, signature, extobj])</p></blockquote><p>其中x1、x2之间的对应元素相乘遵守广播规则。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">-1</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B = np.array([[<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A*B</span><br><span class=\"line\">array([[ <span class=\"number\">2</span>,  <span class=\"number\">0</span>],</span><br><span class=\"line\">       [<span class=\"number\">-3</span>, <span class=\"number\">16</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.multiply(A,B)</span><br><span class=\"line\">array([[ <span class=\"number\">2</span>,  <span class=\"number\">0</span>],</span><br><span class=\"line\">       [<span class=\"number\">-3</span>, <span class=\"number\">16</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(A*<span class=\"number\">2.0</span>)</span><br><span class=\"line\">[[ <span class=\"number\">2.</span>  <span class=\"number\">4.</span>]</span><br><span class=\"line\"> [<span class=\"number\">-2.</span>  <span class=\"number\">8.</span>]]</span><br><span class=\"line\"> <span class=\"comment\">##数组通过激活函数，输入输出形状一致</span></span><br><span class=\"line\"> <span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">X = np.random.rand(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">softmoid</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> / (<span class=\"number\">1</span> + np.exp(-x))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">relu</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.maximum(<span class=\"number\">0</span>, x)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">softmax</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.exp(x) / np.sum(np.exp(x))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"输入参数X的形状：\"</span>, X.shape)</span><br><span class=\"line\">print(<span class=\"string\">\"激活函数softmoid输出形状：\"</span>, softmoid(X).shape)</span><br><span class=\"line\">print(<span class=\"string\">\"激活函数relu输出形状：\"</span>, relu(X).shape)</span><br><span class=\"line\">print(<span class=\"string\">\"激活函数softmax输出形状：\"</span>, softmax(X).shape)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">输入参数X的形状： (2, 3)</span></span><br><span class=\"line\"><span class=\"string\">激活函数softmoid输出形状： (2, 3)</span></span><br><span class=\"line\"><span class=\"string\">激活函数relu输出形状： (2, 3)</span></span><br><span class=\"line\"><span class=\"string\">激活函数softmax输出形状： (2, 3)</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><h2 id=\"点积运算\"><a class=\"markdownIt-Anchor\" href=\"#点积运算\"></a> 点积运算</h2><p>点积运算（Dot Product）又称为内积，在 NumPy 中用 np.dot() 函数表示，其一般格式为：</p><blockquote><p>numpy.dot(a, b, out=None)</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X1=np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\">X2=np.array([[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>],[<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]])</span><br><span class=\"line\">X3=np.dot(X1,X2)</span><br><span class=\"line\">print(X3)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">[[21 24 27]</span></span><br><span class=\"line\"><span class=\"string\">[47 54 61]]</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><h1 id=\"数组的变形改变数组形状\"><a class=\"markdownIt-Anchor\" href=\"#数组的变形改变数组形状\"></a> 数组的变形(改变数组形状)</h1><p>在矩阵或者数组的运算中，经常会遇到需要把多个向量或矩阵按某轴方向合并，或展平（如在卷积或循环神经网络中，在全连接层之前，需要把矩阵展平）的情况。下面介绍几种常用的数组变形方法。</p><table><thead><tr><th>函数/属性</th><th>描述</th></tr></thead><tbody><tr><td>arr.reshape()</td><td>重新将向量 arr 维度进行改变，不修改向量本身</td></tr><tr><td>arr.resize()</td><td>重新将向量 arr维度进行改变，修改向量本身</td></tr><tr><td>arr.T</td><td>对向量 arr 进行转置</td></tr><tr><td>arr.ravel()</td><td>对向量 arr 进行展平，即将多维数组变成1维数组，不会产生原数组的副本</td></tr><tr><td>arr.flatten()</td><td>对向量 arr 进行展平，即将多维数组变成1维数组，返回原数组的副本</td></tr><tr><td>arr.squeeze()</td><td>只能对维数为1的维度降维。对多维数组使用时不会报错，但是不会产生任何影响</td></tr><tr><td>arr.transpose()</td><td>对高维矩阵进行轴对换</td></tr></tbody></table><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试几个常用的函数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arr = np.arange(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arr.reshape(<span class=\"number\">2</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">array([[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">       [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arr.resize(<span class=\"number\">2</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(arr)</span><br><span class=\"line\">[[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>]</span><br><span class=\"line\"> [<span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span>]]</span><br><span class=\"line\"> &gt;&gt;&gt; arr.T</span><br><span class=\"line\">array([[<span class=\"number\">0</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">       [<span class=\"number\">1</span>, <span class=\"number\">6</span>],</span><br><span class=\"line\">       [<span class=\"number\">2</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">       [<span class=\"number\">3</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">       [<span class=\"number\">4</span>, <span class=\"number\">9</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(arr.ravel(<span class=\"string\">'F'</span>))  <span class=\"comment\"># 按列展平</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">5</span> <span class=\"number\">1</span> <span class=\"number\">6</span> <span class=\"number\">2</span> <span class=\"number\">7</span> <span class=\"number\">3</span> <span class=\"number\">8</span> <span class=\"number\">4</span> <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(arr.ravel())  <span class=\"comment\"># 按行展平</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"comment\"># flatten()函数将矩阵转换成向量</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a =np.floor(<span class=\"number\">10</span>*np.random.random((<span class=\"number\">3</span>,<span class=\"number\">4</span>)))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a)</span><br><span class=\"line\">[[<span class=\"number\">2.</span> <span class=\"number\">8.</span> <span class=\"number\">5.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">2.</span> <span class=\"number\">0.</span> <span class=\"number\">5.</span> <span class=\"number\">4.</span>]</span><br><span class=\"line\"> [<span class=\"number\">9.</span> <span class=\"number\">9.</span> <span class=\"number\">7.</span> <span class=\"number\">8.</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a.flatten())</span><br><span class=\"line\">[<span class=\"number\">2.</span> <span class=\"number\">8.</span> <span class=\"number\">5.</span> <span class=\"number\">1.</span> <span class=\"number\">2.</span> <span class=\"number\">0.</span> <span class=\"number\">5.</span> <span class=\"number\">4.</span> <span class=\"number\">9.</span> <span class=\"number\">9.</span> <span class=\"number\">7.</span> <span class=\"number\">8.</span>]</span><br><span class=\"line\"><span class=\"comment\"># transpose() 对高维矩阵进行轴对换</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arr2 = np.arange(<span class=\"number\">24</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(arr2.shape)  <span class=\"comment\">#(2, 3, 4)</span></span><br><span class=\"line\">(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(arr2.transpose(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>).shape)  <span class=\"comment\">#(3, 4, 2)</span></span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure><h1 id=\"ndarray合并数组\"><a class=\"markdownIt-Anchor\" href=\"#ndarray合并数组\"></a> ndarray合并数组</h1><p>|函数\t|描述|<br>|np.append()|\t内存占用大|<br>|np.concatenate()\t|没有内存问题|<br>|np.stack()\t|沿着新的轴加入一系列数组|<br>|np.hstack()\t|堆栈数组垂直顺序（行）|<br>|np.vstack()\t|堆栈数组垂直顺序（列）|<br>|np.dstack()\t|堆栈数组按顺序深入（沿第3维）|<br>|np.vsplit()\t|将数组分解成垂直的多个子数组的列表|</p><p>几点说明：</p><ul><li>append()、concatenate() 以及 stack() 都有一个 axis 参数，用于控制数组的合并方式是按行还是按列。</li><li>对于 append() 和 concatenate()，待合并的数组必须有相同的行数或列数（满足一个即可）。</li><li>stack()、hstack()、dstack() 要求待合并的数组必须具有相同的形状（shape）</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a =np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = np.array([[<span class=\"number\">5</span>, <span class=\"number\">6</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = np.concatenate((a, b), axis=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(c)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\"> [<span class=\"number\">3</span> <span class=\"number\">4</span>]</span><br><span class=\"line\"> [<span class=\"number\">5</span> <span class=\"number\">6</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = np.concatenate((a, b.T), axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(d)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">5</span>]</span><br><span class=\"line\"> [<span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">6</span>]]</span><br><span class=\"line\"><span class=\"comment\"># stack，沿指定轴堆叠数组或矩阵</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a =np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = np.array([[<span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(np.stack((a, b), axis=<span class=\"number\">0</span>))</span><br><span class=\"line\">[[[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\">  [<span class=\"number\">3</span> <span class=\"number\">4</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"> [[<span class=\"number\">5</span> <span class=\"number\">6</span>]</span><br><span class=\"line\">  [<span class=\"number\">7</span> <span class=\"number\">8</span>]]]</span><br></pre></td></tr></table></figure><h1 id=\"numpy批量处理\"><a class=\"markdownIt-Anchor\" href=\"#numpy批量处理\"></a> Numpy批量处理</h1><p>如何把大数据拆分成多个批次呢？可采用如下步骤：</p><ul><li>得到数据集</li><li>随机打乱数据</li><li>定义批大小</li><li>批处理数据集</li></ul><p>示例如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">data_train = np.random.randn(<span class=\"number\">2000</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">print(data_train.shape)</span><br><span class=\"line\"><span class=\"comment\"># (2000, 2, 3)</span></span><br><span class=\"line\">np.random.shuffle(data_train)</span><br><span class=\"line\"><span class=\"comment\"># 定义批量</span></span><br><span class=\"line\">batch_size = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"comment\"># 批处理</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,len(data_train),batch_size):</span><br><span class=\"line\">    x_batch_sum=np.sum(data_train[i:i+batch_size])</span><br><span class=\"line\">    print(<span class=\"string\">\"第&#123;&#125;批次，该批次的数据之和：&#123;&#125;\"</span>.format(i,x_batch_sum))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">(2000, 2, 3)</span></span><br><span class=\"line\"><span class=\"string\">第0批次，该批次的数据之和：-2.5597045866733144</span></span><br><span class=\"line\"><span class=\"string\">第100批次，该批次的数据之和：-28.20552534073626</span></span><br><span class=\"line\"><span class=\"string\">第200批次，该批次的数据之和：-39.954399816952744</span></span><br><span class=\"line\"><span class=\"string\">第300批次，该批次的数据之和：15.230660353237122</span></span><br><span class=\"line\"><span class=\"string\">第400批次，该批次的数据之和：3.756517698762309</span></span><br><span class=\"line\"><span class=\"string\">第500批次，该批次的数据之和：2.416672409682702</span></span><br><span class=\"line\"><span class=\"string\">第600批次，该批次的数据之和：-47.262073781065844</span></span><br><span class=\"line\"><span class=\"string\">第700批次，该批次的数据之和：-4.384517680501666</span></span><br><span class=\"line\"><span class=\"string\">第800批次，该批次的数据之和：0.9617151643255646</span></span><br><span class=\"line\"><span class=\"string\">第900批次，该批次的数据之和：27.657472571275203</span></span><br><span class=\"line\"><span class=\"string\">第1000批次，该批次的数据之和：39.91121481922393</span></span><br><span class=\"line\"><span class=\"string\">第1100批次，该批次的数据之和：-37.02521264944135</span></span><br><span class=\"line\"><span class=\"string\">第1200批次，该批次的数据之和：-19.19864630328485</span></span><br><span class=\"line\"><span class=\"string\">第1300批次，该批次的数据之和：37.92424857767804</span></span><br><span class=\"line\"><span class=\"string\">第1400批次，该批次的数据之和：-17.742587465605805</span></span><br><span class=\"line\"><span class=\"string\">第1500批次，该批次的数据之和：-9.856616675258884</span></span><br><span class=\"line\"><span class=\"string\">第1600批次，该批次的数据之和：6.976135672087105</span></span><br><span class=\"line\"><span class=\"string\">第1700批次，该批次的数据之和：-5.35707792331438</span></span><br><span class=\"line\"><span class=\"string\">第1800批次，该批次的数据之和：15.930799536487907</span></span><br><span class=\"line\"><span class=\"string\">第1900批次，该批次的数据之和：-4.654408531448469</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><h1 id=\"ufnc通用函数\"><a class=\"markdownIt-Anchor\" href=\"#ufnc通用函数\"></a> ufnc通用函数</h1><p>NumPy 中的函数可以是向量或矩阵，而利用向量或矩阵可以避免使用循环语句，通用函数如下：</p><table><thead><tr><th>函数</th><th>使用方法</th></tr></thead><tbody><tr><td>sqrt()</td><td>计算序列化数据的平方根</td></tr><tr><td>sin()、cos()</td><td>三角函数</td></tr><tr><td>abs()</td><td>计算序列化数据的绝对值</td></tr><tr><td>dot()</td><td>矩阵运算</td></tr><tr><td>log()、logl()、log2()</td><td>对数函数</td></tr><tr><td>exp()</td><td>指数函数</td></tr><tr><td>cumsum()、cumproduct()</td><td>累计求和、求积</td></tr><tr><td>sum()</td><td>对一个序列化数据进行求和</td></tr><tr><td>mean()</td><td>计算均值</td></tr><tr><td>median()</td><td>计算中位数</td></tr><tr><td>std()</td><td>计算标准差</td></tr><tr><td>var()</td><td>计算方差</td></tr><tr><td>corrcoef()</td><td>计算相关系数</td></tr></tbody></table><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># math与numpy函数性能比较</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">x = [i * <span class=\"number\">0.001</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.arange(<span class=\"number\">1000000</span>)]</span><br><span class=\"line\">start = time.clock()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, t <span class=\"keyword\">in</span> enumerate(x):</span><br><span class=\"line\">    x[i] = math.sin(t)</span><br><span class=\"line\">print(<span class=\"string\">\"math.sin:\"</span>, time.clock() - start)</span><br><span class=\"line\">x = [i * <span class=\"number\">0.001</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.arange(<span class=\"number\">1000000</span>)]</span><br><span class=\"line\">x = np.array(x)</span><br><span class=\"line\">start = time.clock()</span><br><span class=\"line\">np.sin(x)</span><br><span class=\"line\">print(<span class=\"string\">\"numpy.sin:\"</span>, time.clock() - start)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">math.sin: 0.17639699999999991</span></span><br><span class=\"line\"><span class=\"string\">numpy.sin: 0.017746999999999957</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><h2 id=\"循环与向量运算\"><a class=\"markdownIt-Anchor\" href=\"#循环与向量运算\"></a> 循环与向量运算</h2><p>实现计算的向量化，可大大地提高运行速度。NumPy 库中的内建函数使用了 SIMD 指令。如下使用的向量化要比使用循环计算速度快得多。如果使用GPU，其性能将更强大，不过Numpy不支持GPU。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">x1 = np.random.rand(<span class=\"number\">1000000</span>)</span><br><span class=\"line\">x2 = np.random.rand(<span class=\"number\">1000000</span>)</span><br><span class=\"line\"><span class=\"comment\">##使用循环计算向量点积</span></span><br><span class=\"line\">tic = time.process_time()</span><br><span class=\"line\">dot = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(x1)):</span><br><span class=\"line\">    dot += x1[i] * x2[i]</span><br><span class=\"line\">    toc = time.process_time()</span><br><span class=\"line\">print(<span class=\"string\">\"dot = \"</span> + str(dot) + <span class=\"string\">\"\\n for loop----- Computation time = \"</span> +</span><br><span class=\"line\">      str(<span class=\"number\">1000</span> * (toc - tic)) + <span class=\"string\">\"ms\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 使用numpy函数求点积</span></span><br><span class=\"line\">tic = time.process_time()</span><br><span class=\"line\">dot = <span class=\"number\">0</span></span><br><span class=\"line\">dot = np.dot(x1, x2)</span><br><span class=\"line\">toc = time.process_time()</span><br><span class=\"line\">print(<span class=\"string\">\"dot = \"</span> + str(dot) + <span class=\"string\">\"\\n verctor version---- Computation time = \"</span> +</span><br><span class=\"line\">      str(<span class=\"number\">1000</span> * (toc - tic)) + <span class=\"string\">\"ms\"</span>)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">dot = 249965.34253404333</span></span><br><span class=\"line\"><span class=\"string\"> for loop----- Computation time = 1146.446813ms</span></span><br><span class=\"line\"><span class=\"string\">dot = 249965.34253405244</span></span><br><span class=\"line\"><span class=\"string\"> verctor version---- Computation time = 2.297117999999987ms</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><h1 id=\"广播机制\"><a class=\"markdownIt-Anchor\" href=\"#广播机制\"></a> 广播机制</h1><p>调整数组使得 shape 一样，需要满足一定的规则，否则将出错。这些规则可归纳为以下 4 条。</p><ul><li>让所有输入数组都向其中 shape 最长的数组看齐，不足的部分则通过在前面加 1 补齐，如：</li></ul><blockquote><p>a：2×3×2<br>b：3×2</p></blockquote><p>则 b 向 a 看齐，在 b 的前面加 1，变为 1×3×2。</p><ul><li>输出数组的 shape 是输入数组 shape 的各个轴上的最大值。</li><li>如果输入数组的某个轴和输出数组的对应轴的长度相同或者某个轴的长度为 1 时，这个数组能被用来计算，否则出错。</li><li>当输入数组的某个轴的长度为1时，沿着此轴运算时都用（或复制）此轴上的第一组值。</li></ul><blockquote><p>目的：计算A+B，其中A为 4×1 矩阵，B为一维向量 (3,)。</p></blockquote><p>处理过程如下：</p><ul><li>根据规则 1，B 需要向看齐，把 B 变为 (1,3)</li><li>根据规则2，输出的结果为各个轴上的最大值，即输出结果应该为 (4,3) 矩阵，那么 A 如何由 (4,1) 变为 (4,3) 矩阵？B 又如何由 (1,3) 变为 (4,3) 矩阵？</li><li>根据规则4，用此轴上的第一组值（要主要区分是哪个轴），进行复制（但在实际处理中不是真正复制，否则太耗内存，而是采用其他对象如 ogrid 对象，进行网格处理）即可，详细处理过程如图1所示。</li></ul><div align=\"center\"><img src=\"/image/Numpy广播.png\" width=\"400\"></div><center>图1 NumPy广播规则</center><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">A = np.arange(<span class=\"number\">0</span>, <span class=\"number\">40</span>,<span class=\"number\">10</span>).reshape(<span class=\"number\">4</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">B = np.arange(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"A矩阵的形状:&#123;&#125;,B矩阵的形状:&#123;&#125;\"</span>.format(A.shape,B.shape))</span><br><span class=\"line\">C=A+B</span><br><span class=\"line\">print(<span class=\"string\">\"C矩阵的形状:&#123;&#125;\"</span>.format(C.shape))</span><br><span class=\"line\">print(C)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">A矩阵的形状:(4, 1),B矩阵的形状:(3,)</span></span><br><span class=\"line\"><span class=\"string\">C矩阵的形状:(4, 3)</span></span><br><span class=\"line\"><span class=\"string\">[[ 0  1  2]</span></span><br><span class=\"line\"><span class=\"string\"> [10 11 12]</span></span><br><span class=\"line\"><span class=\"string\"> [20 21 22]</span></span><br><span class=\"line\"><span class=\"string\"> [30 31 32]]</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"},{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"Numpy","path":"api/tags/Numpy.json"}]}