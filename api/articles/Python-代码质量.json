{"title":"Python-代码质量","slug":"Python-代码质量","date":"2020-04-27T09:52:09.000Z","updated":"2020-04-28T04:02:40.301Z","comments":true,"path":"api/articles/Python-代码质量.json","excerpt":null,"covers":null,"content":"<!-- build time:Wed Apr 29 2020 18:13:23 GMT+0800 (GMT+08:00) --><h1 id=\"参考链接\"><a class=\"markdownIt-Anchor\" href=\"#参考链接\"></a> 参考链接</h1><ul><li><a href=\"https://www.zhihu.com/question/21408921/answer/129036707\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">怎样才能写出 Pythonic 的代码？</a></li><li><a href=\"https://www.zhihu.com/question/37751951/answer/73425339\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">Python优美代码的一些方法</a></li></ul><h1 id=\"内置函数\"><a class=\"markdownIt-Anchor\" href=\"#内置函数\"></a> 内置函数</h1><h2 id=\"enumerate类\"><a class=\"markdownIt-Anchor\" href=\"#enumerate类\"></a> enumerate类</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</span><br><span class=\"line\"></span><br><span class=\"line\">L = [i*i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</span><br><span class=\"line\"><span class=\"comment\"># 普通写法</span></span><br><span class=\"line\">index = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> L:</span><br><span class=\"line\">    index += <span class=\"number\">1</span></span><br><span class=\"line\">    print(index, <span class=\"string\">':'</span>, data)</span><br><span class=\"line\"><span class=\"comment\"># enumerate类的使用</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> index, data <span class=\"keyword\">in</span> enumerate(L, <span class=\"number\">1</span>):</span><br><span class=\"line\">    print(index, <span class=\"string\">':'</span>, data)</span><br></pre></td></tr></table></figure><p>在保证代码可读性的前提下，代码越少越好。显然，使用enumerate效果就好很多。</p><h2 id=\"reversed\"><a class=\"markdownIt-Anchor\" href=\"#reversed\"></a> reversed</h2><p>Python中的列表支持切片操作，可以像L[::-1]这样取reverse列表。</p><h2 id=\"any\"><a class=\"markdownIt-Anchor\" href=\"#any\"></a> any</h2><p>遍历一个二维的元组，判断是否存在Non_unique为0,Null列不为YES的记录</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 普通</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_primary_key</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> rows:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> row[<span class=\"number\">1</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> row[<span class=\"number\">9</span>] != <span class=\"string\">'YES'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"comment\"># 使用any</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_prmary_key1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> any(row[<span class=\"number\">1</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> row[<span class=\"number\">9</span>] != <span class=\"string\">'YES'</span> <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> rows)</span><br></pre></td></tr></table></figure><h1 id=\"python中的小细节\"><a class=\"markdownIt-Anchor\" href=\"#python中的小细节\"></a> Python中的小细节</h1><h2 id=\"raise-systemexit\"><a class=\"markdownIt-Anchor\" href=\"#raise-systemexit\"></a> raise SystemExit</h2><p>在程序检测某种错误时，打印错误信息，并退出程序</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">raise</span> SystemExit(<span class=\"string\">'It failed!'</span>)</span><br></pre></td></tr></table></figure><h2 id=\"文件的x模式\"><a class=\"markdownIt-Anchor\" href=\"#文件的x模式\"></a> 文件的x模式</h2><p>需求：写一个文件，如果该文件已经存在，则不写，否则以w模式打开文件并写入：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.paht.exists(<span class=\"string\">'filename'</span>):</span><br><span class=\"line\">    f.write(<span class=\"string\">'Hello\\n'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'File already exists!'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 使用x模式</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'filename'</span>, <span class=\"string\">'xt'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(<span class=\"string\">'Hello\\n'</span>)</span><br></pre></td></tr></table></figure><h2 id=\"configparser\"><a class=\"markdownIt-Anchor\" href=\"#configparser\"></a> ConfigParser</h2><p>提供生成连接字符串的功能，用于读取配置参数。如下：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat db.conf</span><br><span class=\"line\">[DEFAULT]</span><br><span class=\"line\">conn_str&#x3D;%(dbn)s:&#x2F;&#x2F;(%user)s:%(pw)s@%(host)s:%(port)s&#x2F;%(db)s</span><br><span class=\"line\">dbn&#x3D;mysql</span><br><span class=\"line\">user&#x3D;root</span><br><span class=\"line\">pw&#x3D;root</span><br><span class=\"line\">host&#x3D;localhost</span><br><span class=\"line\">port&#x3D;3306</span><br><span class=\"line\">db&#x3D;test</span><br></pre></td></tr></table></figure><h1 id=\"合理的使用数据结构\"><a class=\"markdownIt-Anchor\" href=\"#合理的使用数据结构\"></a> 合理的使用数据结构</h1><h2 id=\"字典的get传递默认值\"><a class=\"markdownIt-Anchor\" href=\"#字典的get传递默认值\"></a> 字典的get传递默认值</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port = kwargs.get(<span class=\"string\">'port'</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> port <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">    port = <span class=\"number\">3306</span></span><br></pre></td></tr></table></figure><p>字典的get方法支持提供默认参数，在字典没有值的情况下，将返回用户提供的默认参数，高质量的写法：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port = kwargs.get(<span class=\"string\">'port'</span>, <span class=\"number\">3306</span>)</span><br></pre></td></tr></table></figure><p>在调用pop()函数是，需要返回最后一个元素：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">last = L[<span class=\"number\">-1</span>]</span><br><span class=\"line\">L.pop()</span><br><span class=\"line\"><span class=\"comment\"># 优化</span></span><br><span class=\"line\">last = L.pop()</span><br></pre></td></tr></table></figure><h2 id=\"dfaultdict-counter\"><a class=\"markdownIt-Anchor\" href=\"#dfaultdict-counter\"></a> dfaultdict &amp; Counter</h2><p>需求1：假设字典的value是list，先判断key是否已经存在，如果不存在，新建一个list并赋值给key，如果已经存在，则调用list的append()方法，将值添加进去。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 普通</span></span><br><span class=\"line\">d = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> pairs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> d:</span><br><span class=\"line\">        d[key] = []</span><br><span class=\"line\">    d[key].append(value)</span><br><span class=\"line\"><span class=\"comment\"># 使用defaultdict</span></span><br><span class=\"line\">d = defaultdict(list)</span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> pairs:</span><br><span class=\"line\">    d[key].append(value)</span><br></pre></td></tr></table></figure><p>需求2：统计一个文件中，每个单词出现的次数，使用字典的写法如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 普通写法</span></span><br><span class=\"line\">d = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/etc/passwd/) as f:</span></span><br><span class=\"line\"><span class=\"string\">    for line in f:</span></span><br><span class=\"line\"><span class=\"string\">        for word in line.strip().split('</span>:<span class=\"string\">'):</span></span><br><span class=\"line\"><span class=\"string\">            if word not in d:</span></span><br><span class=\"line\"><span class=\"string\">                d[word] = 1</span></span><br><span class=\"line\"><span class=\"string\">            else:</span></span><br><span class=\"line\"><span class=\"string\">            d[word] += 1</span></span><br><span class=\"line\"><span class=\"string\"># 使用collections中的Counter</span></span><br><span class=\"line\"><span class=\"string\">word_counts = Counter()</span></span><br><span class=\"line\"><span class=\"string\">with open('</span>/etc/passwd<span class=\"string\">') as f:</span></span><br><span class=\"line\"><span class=\"string\">    for line in f:</span></span><br><span class=\"line\"><span class=\"string\">        word_counts.update(line.strip().split('</span>:<span class=\"string\">'))</span></span><br></pre></td></tr></table></figure><p>需求3：打印出现次数最多的三个单词，使用字典如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = sorted(zip(d.values(),d.keys()), reverse=<span class=\"literal\">True</span>)[:<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\"># Couter直接提供</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key, val <span class=\"keyword\">in</span> (word_counts.most_common(<span class=\"number\">3</span>)):</span><br><span class=\"line\">    print(key,<span class=\"string\">':'</span>, val)</span><br></pre></td></tr></table></figure><h2 id=\"nametuple\"><a class=\"markdownIt-Anchor\" href=\"#nametuple\"></a> nametuple</h2><p>监控系统，可以从/proc/diskstats中获取磁盘的详细信息</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat /proc/diskstats </span></span><br><span class=\"line\">   7       0 loop0 59 0 2116 3486 0 0 0 0 0 120 3420 0 0 0 0</span><br><span class=\"line\">   7       1 loop1 132 0 2288 3816 0 0 0 0 0 164 3752 0 0 0 0</span><br></pre></td></tr></table></figure><p>如果使用下标访问，计算较复杂，可以使用Python中的命名元组，即collections中的namedtuple，如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DiskDevice = collections.namedtuple(<span class=\"string\">'DiskDevice'</span>, <span class=\"string\">'major_number minor_number device_name read_count read_merged_count'</span>...)</span><br><span class=\"line\"><span class=\"comment\"># 有了命名空间，通过命名元组，能够通过属性访问各个字段，获取磁盘监控的代码如下：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_disk_info</span><span class=\"params\">(disk_name)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"/proc/diskstats\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> line.split()[<span class=\"number\">2</span>] == disk_name:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> DiskDevice(*(line.split()))</span><br></pre></td></tr></table></figure><h1 id=\"使用高级并发工具\"><a class=\"markdownIt-Anchor\" href=\"#使用高级并发工具\"></a> 使用高级并发工具</h1><p>实例：生产者消费者模型，生产者向队列中放东西，消费者从队列中取东西。创建一个锁来保证线程间操作的互斥性，当队列满时，生产者进入等待状态，当队列空的时候，消费者进入等待状态。如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread, Condition</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">queue = []</span><br><span class=\"line\">MAX_NUM = <span class=\"number\">10</span></span><br><span class=\"line\">Condition = Condition()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerThread</span><span class=\"params\">(Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        nums = range(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">global</span> queue</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            Condition.acquire()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(queue) == MAX_NUM:</span><br><span class=\"line\">                print(<span class=\"string\">\"Queue full, producer is waiting\"</span>)</span><br><span class=\"line\">                Condition.wait()</span><br><span class=\"line\">                print(<span class=\"string\">\"Space in queue, Consumer notified the producer\"</span>)</span><br><span class=\"line\">            num = random.choice(nums)</span><br><span class=\"line\">            queue.append(num)</span><br><span class=\"line\">            print(<span class=\"string\">\"Produced\"</span>, num)</span><br><span class=\"line\">            Condition.notify()</span><br><span class=\"line\">            Condition.release()</span><br><span class=\"line\">            time.sleep(random.random())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerThread</span><span class=\"params\">(Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> queue</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            Condition.acquire()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> queue:</span><br><span class=\"line\">                print(<span class=\"string\">\"Nothing in queue, consumer is waiting\"</span>)</span><br><span class=\"line\">                Condition.wait()</span><br><span class=\"line\">                print(</span><br><span class=\"line\">                    <span class=\"string\">\"producer added something queue and notified the consumer\"</span>)</span><br><span class=\"line\">            num = queue.pop()</span><br><span class=\"line\">            print(<span class=\"string\">\"Consumed\"</span>, num)</span><br><span class=\"line\">            Condition.notify()</span><br><span class=\"line\">            Condition.release()</span><br><span class=\"line\">            time.sleep(random.random())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ProducerThread().start()</span><br><span class=\"line\">ConsumerThread().start()</span><br></pre></td></tr></table></figure><p>对于同步问题，可以直接使用Queue，Queue提供线程安全的队列，适用解决生产者和消费者问题，支持阻塞读、阻塞写，写法如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"></span><br><span class=\"line\">queue = Queue(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducThread</span><span class=\"params\">(Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        nums = range(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">global</span> queue</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            num = random.choice(nums)</span><br><span class=\"line\">            queue.put(num)</span><br><span class=\"line\">            print(<span class=\"string\">\"Produced\"</span>, num)</span><br><span class=\"line\">            time.sleep(random.random())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerThread</span><span class=\"params\">(Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> queue</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            num = queue.get()</span><br><span class=\"line\">            queue.task_done()</span><br><span class=\"line\">            print(<span class=\"string\">\"Consumed\"</span>, num)</span><br><span class=\"line\">            time.sleep(random.random())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ProducThread().start()</span><br><span class=\"line\">ConsumerThread().start()</span><br></pre></td></tr></table></figure><p>使用Queue后，代码量减少。同时，在并发编程，不需要手动启动一个线程或进程，可以使用并发工具，内置的map是单线程运行的，如果涉及到网络请求或大量CPU计算，速度相对会慢很多，需要使用并发的map，如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_website_data</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    r = requests.get(url)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r.url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    urls = [<span class=\"string\">'http://www.google.com'</span>.</span><br><span class=\"line\">    <span class=\"string\">'https://www.baidu.com'</span>,</span><br><span class=\"line\">    <span class=\"string\">'http://www.163.com'</span>]</span><br><span class=\"line\">    pool = Pool(<span class=\"number\">2</span>)</span><br><span class=\"line\">    print(pool.map(get_website_data, urls))</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure><p>为了保证线程兼容，模型提供了dummy，用以提供线程池的实现，如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing.dummy <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"><span class=\"comment\"># 可以快速的在线程池和进程池之间切换</span></span><br></pre></td></tr></table></figure><h1 id=\"使用装饰器\"><a class=\"markdownIt-Anchor\" href=\"#使用装饰器\"></a> 使用装饰器</h1><p>实例：有两个模块，A模块需要给B模块发消息，B模块检查A模块发送过来的参数，没有问题则进行处理，对于检查参数的操作，使用装饰器的代码如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_args</span><span class=\"params\">(parameters)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    check paramenters of action</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorated</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        decorator</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">        @functools.wraps</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">            func_args = inspect.getcallargs(f, *args, **kwargs)</span><br><span class=\"line\">            msg = func_args.get(<span class=\"string\">'msg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> parameters:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> msg.body_dict.get(item) <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">\"check faild, %s is not found\"</span> % item</span><br><span class=\"line\">            <span class=\"keyword\">return</span> f(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorated</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用装饰器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncMsgHandle</span><span class=\"params\">(MsgHandler)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @check.check_args(['Containerldentifier', 'MonitorSecretKey', \"InstanceID\", \"UUID\"])</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_container</span><span class=\"params\">(self, msg)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><h1 id=\"python中的设计模式\"><a class=\"markdownIt-Anchor\" href=\"#python中的设计模式\"></a> Python中的设计模式</h1><h2 id=\"单例模式\"><a class=\"markdownIt-Anchor\" href=\"#单例模式\"></a> 单例模式</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Borg</span>:</span></span><br><span class=\"line\">    _shared_state = &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.__dict__ = self._shared_state</span><br></pre></td></tr></table></figure><p>只要所有的实例共享状态、行为一直，就达到单例的目的，通过Borg可以创建任意数量的实例。在Python中，模块初始化一次，import机制是线程安全的，因此模块本身就是单例的实现。</p><h2 id=\"工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#工厂模式\"></a> 工厂模式</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CPP的工厂模式实现</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">class</span> <span class=\"title\">Circle</span>:</span> <span class=\"keyword\">public</span> Shape</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span>:</span> <span class=\"keyword\">public</span> Shape</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Shape *<span class=\"title\">Shape::factory</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;type)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type == <span class=\"string\">\"Circle\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Circle;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type == <span class=\"string\">\"Square\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Square;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p>上述单例的Python实现如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span><span class=\"params\">(Shape)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span><span class=\"params\">(Shape)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> [<span class=\"string\">\"Circle\"</span>, <span class=\"string\">\"Square\"</span>]:</span><br><span class=\"line\">    cls = globals()[name]</span><br><span class=\"line\">    obj = cls()</span><br></pre></td></tr></table></figure><p>理解：Python中的类是可调用的对象，在import后，存在于当前命名空间中。可以先通过名字获取类，再用类构造出对象，Python比C++少一个需要维护的函数。</p><h1 id=\"优美代码注意事项\"><a class=\"markdownIt-Anchor\" href=\"#优美代码注意事项\"></a> 优美代码注意事项</h1><ul><li>写代码跟写作文一样，条理要清晰</li><li>准确无歧义，完整且清晰</li><li>排版清楚，添加必要的空行</li><li>添加必要的注释、注意标点符号</li><li>保证可读性且代码尽可能短小</li></ul><!-- rebuild by neat -->","more":"<!-- build time:Wed Apr 29 2020 18:13:23 GMT+0800 (GMT+08:00) --><h1 id=\"参考链接\"><a class=\"markdownIt-Anchor\" href=\"#参考链接\"></a> 参考链接</h1><ul><li><a href=\"https://www.zhihu.com/question/21408921/answer/129036707\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">怎样才能写出 Pythonic 的代码？</a></li><li><a href=\"https://www.zhihu.com/question/37751951/answer/73425339\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">Python优美代码的一些方法</a></li></ul><h1 id=\"内置函数\"><a class=\"markdownIt-Anchor\" href=\"#内置函数\"></a> 内置函数</h1><h2 id=\"enumerate类\"><a class=\"markdownIt-Anchor\" href=\"#enumerate类\"></a> enumerate类</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</span><br><span class=\"line\"></span><br><span class=\"line\">L = [i*i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>)]</span><br><span class=\"line\"><span class=\"comment\"># 普通写法</span></span><br><span class=\"line\">index = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> L:</span><br><span class=\"line\">    index += <span class=\"number\">1</span></span><br><span class=\"line\">    print(index, <span class=\"string\">':'</span>, data)</span><br><span class=\"line\"><span class=\"comment\"># enumerate类的使用</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> index, data <span class=\"keyword\">in</span> enumerate(L, <span class=\"number\">1</span>):</span><br><span class=\"line\">    print(index, <span class=\"string\">':'</span>, data)</span><br></pre></td></tr></table></figure><p>在保证代码可读性的前提下，代码越少越好。显然，使用enumerate效果就好很多。</p><h2 id=\"reversed\"><a class=\"markdownIt-Anchor\" href=\"#reversed\"></a> reversed</h2><p>Python中的列表支持切片操作，可以像L[::-1]这样取reverse列表。</p><h2 id=\"any\"><a class=\"markdownIt-Anchor\" href=\"#any\"></a> any</h2><p>遍历一个二维的元组，判断是否存在Non_unique为0,Null列不为YES的记录</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 普通</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_primary_key</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> rows:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> row[<span class=\"number\">1</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> row[<span class=\"number\">9</span>] != <span class=\"string\">'YES'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"comment\"># 使用any</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_prmary_key1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> any(row[<span class=\"number\">1</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> row[<span class=\"number\">9</span>] != <span class=\"string\">'YES'</span> <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> rows)</span><br></pre></td></tr></table></figure><h1 id=\"python中的小细节\"><a class=\"markdownIt-Anchor\" href=\"#python中的小细节\"></a> Python中的小细节</h1><h2 id=\"raise-systemexit\"><a class=\"markdownIt-Anchor\" href=\"#raise-systemexit\"></a> raise SystemExit</h2><p>在程序检测某种错误时，打印错误信息，并退出程序</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">raise</span> SystemExit(<span class=\"string\">'It failed!'</span>)</span><br></pre></td></tr></table></figure><h2 id=\"文件的x模式\"><a class=\"markdownIt-Anchor\" href=\"#文件的x模式\"></a> 文件的x模式</h2><p>需求：写一个文件，如果该文件已经存在，则不写，否则以w模式打开文件并写入：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.paht.exists(<span class=\"string\">'filename'</span>):</span><br><span class=\"line\">    f.write(<span class=\"string\">'Hello\\n'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'File already exists!'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 使用x模式</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'filename'</span>, <span class=\"string\">'xt'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(<span class=\"string\">'Hello\\n'</span>)</span><br></pre></td></tr></table></figure><h2 id=\"configparser\"><a class=\"markdownIt-Anchor\" href=\"#configparser\"></a> ConfigParser</h2><p>提供生成连接字符串的功能，用于读取配置参数。如下：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat db.conf</span><br><span class=\"line\">[DEFAULT]</span><br><span class=\"line\">conn_str&#x3D;%(dbn)s:&#x2F;&#x2F;(%user)s:%(pw)s@%(host)s:%(port)s&#x2F;%(db)s</span><br><span class=\"line\">dbn&#x3D;mysql</span><br><span class=\"line\">user&#x3D;root</span><br><span class=\"line\">pw&#x3D;root</span><br><span class=\"line\">host&#x3D;localhost</span><br><span class=\"line\">port&#x3D;3306</span><br><span class=\"line\">db&#x3D;test</span><br></pre></td></tr></table></figure><h1 id=\"合理的使用数据结构\"><a class=\"markdownIt-Anchor\" href=\"#合理的使用数据结构\"></a> 合理的使用数据结构</h1><h2 id=\"字典的get传递默认值\"><a class=\"markdownIt-Anchor\" href=\"#字典的get传递默认值\"></a> 字典的get传递默认值</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port = kwargs.get(<span class=\"string\">'port'</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> port <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">    port = <span class=\"number\">3306</span></span><br></pre></td></tr></table></figure><p>字典的get方法支持提供默认参数，在字典没有值的情况下，将返回用户提供的默认参数，高质量的写法：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port = kwargs.get(<span class=\"string\">'port'</span>, <span class=\"number\">3306</span>)</span><br></pre></td></tr></table></figure><p>在调用pop()函数是，需要返回最后一个元素：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">last = L[<span class=\"number\">-1</span>]</span><br><span class=\"line\">L.pop()</span><br><span class=\"line\"><span class=\"comment\"># 优化</span></span><br><span class=\"line\">last = L.pop()</span><br></pre></td></tr></table></figure><h2 id=\"dfaultdict-counter\"><a class=\"markdownIt-Anchor\" href=\"#dfaultdict-counter\"></a> dfaultdict &amp; Counter</h2><p>需求1：假设字典的value是list，先判断key是否已经存在，如果不存在，新建一个list并赋值给key，如果已经存在，则调用list的append()方法，将值添加进去。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 普通</span></span><br><span class=\"line\">d = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> pairs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> d:</span><br><span class=\"line\">        d[key] = []</span><br><span class=\"line\">    d[key].append(value)</span><br><span class=\"line\"><span class=\"comment\"># 使用defaultdict</span></span><br><span class=\"line\">d = defaultdict(list)</span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> pairs:</span><br><span class=\"line\">    d[key].append(value)</span><br></pre></td></tr></table></figure><p>需求2：统计一个文件中，每个单词出现的次数，使用字典的写法如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 普通写法</span></span><br><span class=\"line\">d = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/etc/passwd/) as f:</span></span><br><span class=\"line\"><span class=\"string\">    for line in f:</span></span><br><span class=\"line\"><span class=\"string\">        for word in line.strip().split('</span>:<span class=\"string\">'):</span></span><br><span class=\"line\"><span class=\"string\">            if word not in d:</span></span><br><span class=\"line\"><span class=\"string\">                d[word] = 1</span></span><br><span class=\"line\"><span class=\"string\">            else:</span></span><br><span class=\"line\"><span class=\"string\">            d[word] += 1</span></span><br><span class=\"line\"><span class=\"string\"># 使用collections中的Counter</span></span><br><span class=\"line\"><span class=\"string\">word_counts = Counter()</span></span><br><span class=\"line\"><span class=\"string\">with open('</span>/etc/passwd<span class=\"string\">') as f:</span></span><br><span class=\"line\"><span class=\"string\">    for line in f:</span></span><br><span class=\"line\"><span class=\"string\">        word_counts.update(line.strip().split('</span>:<span class=\"string\">'))</span></span><br></pre></td></tr></table></figure><p>需求3：打印出现次数最多的三个单词，使用字典如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = sorted(zip(d.values(),d.keys()), reverse=<span class=\"literal\">True</span>)[:<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\"># Couter直接提供</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key, val <span class=\"keyword\">in</span> (word_counts.most_common(<span class=\"number\">3</span>)):</span><br><span class=\"line\">    print(key,<span class=\"string\">':'</span>, val)</span><br></pre></td></tr></table></figure><h2 id=\"nametuple\"><a class=\"markdownIt-Anchor\" href=\"#nametuple\"></a> nametuple</h2><p>监控系统，可以从/proc/diskstats中获取磁盘的详细信息</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat /proc/diskstats </span></span><br><span class=\"line\">   7       0 loop0 59 0 2116 3486 0 0 0 0 0 120 3420 0 0 0 0</span><br><span class=\"line\">   7       1 loop1 132 0 2288 3816 0 0 0 0 0 164 3752 0 0 0 0</span><br></pre></td></tr></table></figure><p>如果使用下标访问，计算较复杂，可以使用Python中的命名元组，即collections中的namedtuple，如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DiskDevice = collections.namedtuple(<span class=\"string\">'DiskDevice'</span>, <span class=\"string\">'major_number minor_number device_name read_count read_merged_count'</span>...)</span><br><span class=\"line\"><span class=\"comment\"># 有了命名空间，通过命名元组，能够通过属性访问各个字段，获取磁盘监控的代码如下：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_disk_info</span><span class=\"params\">(disk_name)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"/proc/diskstats\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> line.split()[<span class=\"number\">2</span>] == disk_name:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> DiskDevice(*(line.split()))</span><br></pre></td></tr></table></figure><h1 id=\"使用高级并发工具\"><a class=\"markdownIt-Anchor\" href=\"#使用高级并发工具\"></a> 使用高级并发工具</h1><p>实例：生产者消费者模型，生产者向队列中放东西，消费者从队列中取东西。创建一个锁来保证线程间操作的互斥性，当队列满时，生产者进入等待状态，当队列空的时候，消费者进入等待状态。如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread, Condition</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">queue = []</span><br><span class=\"line\">MAX_NUM = <span class=\"number\">10</span></span><br><span class=\"line\">Condition = Condition()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerThread</span><span class=\"params\">(Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        nums = range(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">global</span> queue</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            Condition.acquire()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(queue) == MAX_NUM:</span><br><span class=\"line\">                print(<span class=\"string\">\"Queue full, producer is waiting\"</span>)</span><br><span class=\"line\">                Condition.wait()</span><br><span class=\"line\">                print(<span class=\"string\">\"Space in queue, Consumer notified the producer\"</span>)</span><br><span class=\"line\">            num = random.choice(nums)</span><br><span class=\"line\">            queue.append(num)</span><br><span class=\"line\">            print(<span class=\"string\">\"Produced\"</span>, num)</span><br><span class=\"line\">            Condition.notify()</span><br><span class=\"line\">            Condition.release()</span><br><span class=\"line\">            time.sleep(random.random())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerThread</span><span class=\"params\">(Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> queue</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            Condition.acquire()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> queue:</span><br><span class=\"line\">                print(<span class=\"string\">\"Nothing in queue, consumer is waiting\"</span>)</span><br><span class=\"line\">                Condition.wait()</span><br><span class=\"line\">                print(</span><br><span class=\"line\">                    <span class=\"string\">\"producer added something queue and notified the consumer\"</span>)</span><br><span class=\"line\">            num = queue.pop()</span><br><span class=\"line\">            print(<span class=\"string\">\"Consumed\"</span>, num)</span><br><span class=\"line\">            Condition.notify()</span><br><span class=\"line\">            Condition.release()</span><br><span class=\"line\">            time.sleep(random.random())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ProducerThread().start()</span><br><span class=\"line\">ConsumerThread().start()</span><br></pre></td></tr></table></figure><p>对于同步问题，可以直接使用Queue，Queue提供线程安全的队列，适用解决生产者和消费者问题，支持阻塞读、阻塞写，写法如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"></span><br><span class=\"line\">queue = Queue(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducThread</span><span class=\"params\">(Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        nums = range(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">global</span> queue</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            num = random.choice(nums)</span><br><span class=\"line\">            queue.put(num)</span><br><span class=\"line\">            print(<span class=\"string\">\"Produced\"</span>, num)</span><br><span class=\"line\">            time.sleep(random.random())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerThread</span><span class=\"params\">(Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> queue</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            num = queue.get()</span><br><span class=\"line\">            queue.task_done()</span><br><span class=\"line\">            print(<span class=\"string\">\"Consumed\"</span>, num)</span><br><span class=\"line\">            time.sleep(random.random())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ProducThread().start()</span><br><span class=\"line\">ConsumerThread().start()</span><br></pre></td></tr></table></figure><p>使用Queue后，代码量减少。同时，在并发编程，不需要手动启动一个线程或进程，可以使用并发工具，内置的map是单线程运行的，如果涉及到网络请求或大量CPU计算，速度相对会慢很多，需要使用并发的map，如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_website_data</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    r = requests.get(url)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r.url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    urls = [<span class=\"string\">'http://www.google.com'</span>.</span><br><span class=\"line\">    <span class=\"string\">'https://www.baidu.com'</span>,</span><br><span class=\"line\">    <span class=\"string\">'http://www.163.com'</span>]</span><br><span class=\"line\">    pool = Pool(<span class=\"number\">2</span>)</span><br><span class=\"line\">    print(pool.map(get_website_data, urls))</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure><p>为了保证线程兼容，模型提供了dummy，用以提供线程池的实现，如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing.dummy <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"><span class=\"comment\"># 可以快速的在线程池和进程池之间切换</span></span><br></pre></td></tr></table></figure><h1 id=\"使用装饰器\"><a class=\"markdownIt-Anchor\" href=\"#使用装饰器\"></a> 使用装饰器</h1><p>实例：有两个模块，A模块需要给B模块发消息，B模块检查A模块发送过来的参数，没有问题则进行处理，对于检查参数的操作，使用装饰器的代码如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_args</span><span class=\"params\">(parameters)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    check paramenters of action</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorated</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        decorator</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">        @functools.wraps</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">            func_args = inspect.getcallargs(f, *args, **kwargs)</span><br><span class=\"line\">            msg = func_args.get(<span class=\"string\">'msg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> parameters:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> msg.body_dict.get(item) <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">\"check faild, %s is not found\"</span> % item</span><br><span class=\"line\">            <span class=\"keyword\">return</span> f(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorated</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用装饰器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncMsgHandle</span><span class=\"params\">(MsgHandler)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @check.check_args(['Containerldentifier', 'MonitorSecretKey', \"InstanceID\", \"UUID\"])</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_container</span><span class=\"params\">(self, msg)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><h1 id=\"python中的设计模式\"><a class=\"markdownIt-Anchor\" href=\"#python中的设计模式\"></a> Python中的设计模式</h1><h2 id=\"单例模式\"><a class=\"markdownIt-Anchor\" href=\"#单例模式\"></a> 单例模式</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Borg</span>:</span></span><br><span class=\"line\">    _shared_state = &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.__dict__ = self._shared_state</span><br></pre></td></tr></table></figure><p>只要所有的实例共享状态、行为一直，就达到单例的目的，通过Borg可以创建任意数量的实例。在Python中，模块初始化一次，import机制是线程安全的，因此模块本身就是单例的实现。</p><h2 id=\"工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#工厂模式\"></a> 工厂模式</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CPP的工厂模式实现</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">class</span> <span class=\"title\">Circle</span>:</span> <span class=\"keyword\">public</span> Shape</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span>:</span> <span class=\"keyword\">public</span> Shape</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Shape *<span class=\"title\">Shape::factory</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;type)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type == <span class=\"string\">\"Circle\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Circle;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type == <span class=\"string\">\"Square\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Square;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p>上述单例的Python实现如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span><span class=\"params\">(Shape)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span><span class=\"params\">(Shape)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> [<span class=\"string\">\"Circle\"</span>, <span class=\"string\">\"Square\"</span>]:</span><br><span class=\"line\">    cls = globals()[name]</span><br><span class=\"line\">    obj = cls()</span><br></pre></td></tr></table></figure><p>理解：Python中的类是可调用的对象，在import后，存在于当前命名空间中。可以先通过名字获取类，再用类构造出对象，Python比C++少一个需要维护的函数。</p><h1 id=\"优美代码注意事项\"><a class=\"markdownIt-Anchor\" href=\"#优美代码注意事项\"></a> 优美代码注意事项</h1><ul><li>写代码跟写作文一样，条理要清晰</li><li>准确无歧义，完整且清晰</li><li>排版清楚，添加必要的空行</li><li>添加必要的注释、注意标点符号</li><li>保证可读性且代码尽可能短小</li></ul><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"},{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"}]}