{"title":"Python-变量类型和运算符","slug":"Python-变量类型和运算符","date":"2020-04-24T12:25:38.000Z","updated":"2020-04-25T07:19:18.309Z","comments":true,"path":"api/articles/Python-变量类型和运算符.json","excerpt":null,"covers":["/image/运算符.png"],"content":"<!-- build time:Tue Apr 28 2020 11:56:43 GMT+0800 (GMT+08:00) --><h1 id=\"python变量的定义和使用\"><a class=\"markdownIt-Anchor\" href=\"#python变量的定义和使用\"></a> Python变量的定义和使用</h1><p>变量保存的数据可以被多次修改，而常量一旦保存某个数据之后就不能修改了。</p><h2 id=\"python变量的赋值\"><a class=\"markdownIt-Anchor\" href=\"#python变量的赋值\"></a> Python变量的赋值</h2><p>将数据放入变量的过程叫做赋值（Assignment）。Python使用等号=作为赋值运算符，具体格式为：</p><blockquote><p>name = value</p></blockquote><p>name表示变量名；value表示值，也就是要存储的数据。注意，变量是标识符的一种，它的名字不能随便起，要遵守Python标识符命名规范，还要避免和Python内置函数以及Python保留字重名。</p><h2 id=\"python变量的使用\"><a class=\"markdownIt-Anchor\" href=\"#python变量的使用\"></a> Python变量的使用</h2><p>使用 Python 变量时，只要知道变量的名字即可。几乎在Python代码的任何地方都能使用变量。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(n)  <span class=\"comment\">#将变量传递给函数</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m = n * <span class=\"number\">10</span> + <span class=\"number\">5</span>  <span class=\"comment\">#将变量作为四则运算的一部分</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(m)</span><br><span class=\"line\"><span class=\"number\">105</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(m<span class=\"number\">-30</span>)  <span class=\"comment\">#将由变量构成的表达式作为参数传递给函数</span></span><br><span class=\"line\"><span class=\"number\">75</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m = m * <span class=\"number\">2</span>  <span class=\"comment\">#将变量本身的值翻倍</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(m)</span><br><span class=\"line\"><span class=\"number\">210</span></span><br></pre></td></tr></table></figure><h2 id=\"python是弱类型的语言\"><a class=\"markdownIt-Anchor\" href=\"#python是弱类型的语言\"></a> Python是弱类型的语言</h2><p>C语言、C++、Java 是强类型语言的代表。和强类型语言相对应的是弱类型语言，Python、JavaScript、PHP 等脚本语言一般都是弱类型的。</p><p>弱类型语言有两个特点：</p><ul><li>变量无须声明就可以直接赋值，对一个不存在的变量赋值就相当于定义了一个新变量。</li><li>变量的数据类型可以随时改变，比如，同一个变量可以一会儿被赋值为整数，一会儿被赋值为字符串。</li></ul><h1 id=\"python整数类型int详解\"><a class=\"markdownIt-Anchor\" href=\"#python整数类型int详解\"></a> Python整数类型(int)详解</h1><p>整数就是没有小数部分的数字，Python中的整数包括正整数、0和负整数。</p><p>有些强类型的编程语言会提供多种整数类型，每种类型的长度都不同，能容纳的整数的大小也不同，开发者要根据实际数字的大小选用不同的类型。例如C语言提供了short、int、long、long long四种类型的整数，它们的长度依次递增，初学者在选择整数类型时往往比较迷惑，有时候还会导致数值溢出。</p><p>而Python则不同，它的整数不分类型，或者说它只有一种类型的整数。Python整数的取值范围是无限的，不管多大或者多小的数字，Python 都能轻松处理。</p><blockquote><p>当所用数值超过计算机自身的计算能力时，Python 会自动转用高精度计算（大数计算）。</p></blockquote><h2 id=\"整数的不同进制\"><a class=\"markdownIt-Anchor\" href=\"#整数的不同进制\"></a> 整数的不同进制</h2><ul><li>十进制形式：使用十进制形式的整数不能以 0 作为开头，除非这个数值本身就是 0。</li><li>二进制形式：由0和1两个数字组成，书写时以0b或0B开头。例如，101对应十进制数是5。</li><li>八进制：八进制整数由0~7共八个数字组成，以0o或0O开头。注意，第一个符号是数字 0，第二个符号是大写或小写的字母 O。</li><li>十六进制形式：由 0~9 十个数字以及 A~F（或 a~f）六个字母组成，书写时以0x或0X开头。</li></ul><h2 id=\"数字分隔符\"><a class=\"markdownIt-Anchor\" href=\"#数字分隔符\"></a> 数字分隔符</h2><p>Python 3.x 允许使用下划线_作为数字（包括整数和小数）的分隔符。通常每隔三个数字添加一个下划线，类似于英文数字中的逗号。下划线不会影响数字本身的值。</p><h1 id=\"python小数浮点数float类型详解\"><a class=\"markdownIt-Anchor\" href=\"#python小数浮点数float类型详解\"></a> Python小数／浮点数(float)类型详解</h1><p>小数通常以浮点数的形式存储。浮点数和定点数是相对的：小数在存储过程中如果小数点发生移动，就称为浮点数；如果小数点不动，就称为定点数。Python中的小数有两种书写形式：</p><ul><li>十进制形式：平时看到的小数形式，例如 34.6、346.0、0.346。书写小数时必须包含一个小数点，否则会被Python当作整数处理。</li><li>指数形式：小数的指数形式为aEn或aen，a为尾数部分，是一个十进制数；n为指数部分，是一个十进制整数；E或e是固定的字符，用于分割尾数部分和指数部分。整个表达式等价于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>×</mo><mn>1</mn><msup><mn>0</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">a×10^{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.664392em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span>。举例：2.1E5=2.1×105，其中2.1是尾数，5是指数。3.7E-2 = 3.7×10-2，其中3.7是尾数，-2是指数。0.5E7=0.5×107，其中 0.5是尾数，7是指数。</li></ul><blockquote><p>Python 只有一种小数类型，就是 float。C语言有两种小数类型，分别是 float 和 double：float 能容纳的小数范围比较小，double 能容纳的小数范围比较大。</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1 = <span class=\"number\">12.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'f1Value:'</span>, f1)</span><br><span class=\"line\">f1Value: <span class=\"number\">12.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'f1Type:'</span>, type(f1))</span><br><span class=\"line\">f1Type: &lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">float</span>'&gt;</span></span><br><span class=\"line\">&gt;&gt;&gt; f5 = 12e4</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"f5Value: \"</span>, f5)</span><br><span class=\"line\">f5Value:  <span class=\"number\">120000.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"f5Type: \"</span>, type(f5))</span><br><span class=\"line\">f5Type:  &lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">float</span>'&gt;</span></span><br><span class=\"line\">&gt;&gt;&gt; f6 = 12.3 * 0.1</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"f6Value: \"</span>, f6)</span><br><span class=\"line\">f6Value:  <span class=\"number\">1.2300000000000002</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"f6Type: \"</span>, type(f6))</span><br><span class=\"line\">f6Type:  &lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">float</span>'&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"为什么python浮点类型存在误差\"><a class=\"markdownIt-Anchor\" href=\"#为什么python浮点类型存在误差\"></a> 为什么Python浮点类型存在误差</h1><p>主要还是因浮点数在计算机中实际是以二进制保存的，有些数不精确。<br>比如说: 0.1是十进制，转化为二进制后它是个无限循环的数：<br>0.00011001100110011001100110011001100110011001100110011001100<br>而python是以双精度(64)位来保存浮点数，多余的位会被截掉，所以看到的是0.1，但在电脑上实际保存的已不是精确的0.1，参与运算后，也就有可能点误差。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解决方法 </span></span><br><span class=\"line\"><span class=\"keyword\">from</span> decimal <span class=\"keyword\">import</span> *</span><br><span class=\"line\">a = Decimal(<span class=\"string\">'4.2'</span>)</span><br><span class=\"line\">b = Decimal(<span class=\"string\">'2.1'</span>)</span><br><span class=\"line\">c = a * b</span><br></pre></td></tr></table></figure><h1 id=\"python复数类型complex详解\"><a class=\"markdownIt-Anchor\" href=\"#python复数类型complex详解\"></a> Python复数类型(complex)详解</h1><p>复数由实部（real）和虚部（imag）构成，在Python中，复数的虚部以j或者J作为后缀，具体格式为：</p><blockquote><p>a + bj # a表示实部，b表示虚部。</p></blockquote><h1 id=\"python字符串详解包含长字符串和原始字符串\"><a class=\"markdownIt-Anchor\" href=\"#python字符串详解包含长字符串和原始字符串\"></a> Python字符串详解（包含长字符串和原始字符串）</h1><p>字符串必须由双引号&quot; &quot;或者单引号’ '包围，具体格式为：</p><blockquote><p>“字符串内容”<br>‘字符串内容’</p></blockquote><p>字符串的内容可以包含字母、标点、特殊符号、中文、日文等全世界的所有文字。字符串中的双引号和单引号没有任何区别，而有些编程语言的双引号字符串可以解析变量，单引号字符串一律原样输出。</p><h2 id=\"处理字符串中的引号\"><a class=\"markdownIt-Anchor\" href=\"#处理字符串中的引号\"></a> 处理字符串中的引号</h2><p>当字符串内容中出现引号时，我们需要进行特殊处理，否则Python会解析出错，处理方案如下：</p><p><strong>1.对引号进行转义</strong></p><p>在引号前面添加反斜杠\\就可以对引号进行转义，让 Python 把它作为普通文本对待，例如：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">'I\\'m a great Person'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(str1)</span><br><span class=\"line\">I<span class=\"string\">'m a great Person</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; str2 = \"引文双引号是\\\",中文双引号是\"</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; print(str2)</span></span><br><span class=\"line\"><span class=\"string\">引文双引号是\",中文双引号是</span></span><br></pre></td></tr></table></figure><p><strong>2.使用不同的引号包围字符串</strong></p><p>字符串内容中出现了单引号，那么我们可以使用双引号包围字符串，反之亦然。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"I'm a great coder!\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(str1)</span><br><span class=\"line\">I<span class=\"string\">'m a great coder!</span></span><br></pre></td></tr></table></figure><h2 id=\"字符串的换行\"><a class=\"markdownIt-Anchor\" href=\"#字符串的换行\"></a> 字符串的换行</h2><p>Python 不是格式自由的语言，它对程序的换行、缩进都有严格的语法要求。要想换行书写一个比较长的字符串，必须在行尾添加反斜杠\\，ｐｙｔｈｏｎ也支持表达式的换行。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s2 = <span class=\"string\">\"It took six months to writer \\</span></span><br><span class=\"line\"><span class=\"string\">... Please give me more support. \\</span></span><br><span class=\"line\"><span class=\"string\">... I will keep !\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(s2)</span><br><span class=\"line\">It took six months to writer Please give me more support. I will keep !</span><br></pre></td></tr></table></figure><h2 id=\"python原始字符串\"><a class=\"markdownIt-Anchor\" href=\"#python原始字符串\"></a> Python原始字符串</h2><p>为了解决转义字符的问题，Python 支持原始字符串。在原始字符串中，\\不会被当作转义字符，所有的内容都保持“原汁原味”的样子。在普通字符串或者长字符串的开头加上r前缀，就变成了原始字符串，具体格式为：</p><blockquote><p>str1 = r’原始字符串内容’<br>str2 = r&quot;&quot;“原始字符串内容”&quot;&quot;</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">r'I\\'m a great coder!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(str1)</span><br><span class=\"line\">I\\<span class=\"string\">'m a great coder!</span></span><br></pre></td></tr></table></figure><p>Python 原始字符串中的反斜杠仍然会对引号进行转义，因此原始字符串的结尾处不能是反斜杠，否则字符串结尾处的引号会被转义，导致字符串不能正确结束。</p><p>在 Python 中有两种方式解决这个问题：一种方式是改用长字符串的写法，不要使用原始字符串；另一种方式是单独书写反斜杠。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">r'D:\\Program Files\\Python 3.8'</span> <span class=\"string\">'\\\\'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(str1)</span><br><span class=\"line\">D:\\Program Files\\Python <span class=\"number\">3.8</span>\\</span><br></pre></td></tr></table></figure><h1 id=\"编码格式\"><a class=\"markdownIt-Anchor\" href=\"#编码格式\"></a> 编码格式</h1><p>ASCII码，全称为美国信息交换标准代码，是基于拉丁字母的一套字符编码，主要用于显示现代英语，因为万维网的出现，使得 ASCII码广为使用，其直到2007年12月才逐渐被Unicode取代。nicode字符集可以使用的编码方案有三种，分别是：</p><ul><li>UTF-8：一种变长的编码方案，使用1~6个字节来存储；</li><li>UTF-32：一种固定长度的编码方案，不管字符编号大小，始终使用4个字节来存储；</li><li>UTF-16：介于UTF-8和UTF-32之间，使用2个或者4个字节来存储，长度既固定又可变。</li></ul><h2 id=\"python使用的字符编码\"><a class=\"markdownIt-Anchor\" href=\"#python使用的字符编码\"></a> Python使用的字符编码</h2><p>Ｐython3.x中，字符串采用的是Unicode字符集，可以用如下代码来查看当前环境的编码格式：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getdefaultencoding()</span><br><span class=\"line\"><span class=\"string\">'utf-8'</span></span><br><span class=\"line\"><span class=\"comment\"># 使用ord()和chr()函数实现字符和编码数字之间的转换</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ord(<span class=\"string\">'Q'</span>)</span><br><span class=\"line\"><span class=\"number\">81</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>chr(<span class=\"number\">81</span>)</span><br><span class=\"line\"><span class=\"string\">'Q'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ord(<span class=\"string\">\"网\"</span>)</span><br><span class=\"line\"><span class=\"number\">32593</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>chr(<span class=\"number\">32593</span>)</span><br><span class=\"line\"><span class=\"string\">'网'</span></span><br></pre></td></tr></table></figure><p>虽然Python默认采用UTF-8编码，但它也提供了encode()方法，可以轻松实现将Unicode编码格式的字符串转化为其它编码格式。</p><h1 id=\"bytes类型及其用法\"><a class=\"markdownIt-Anchor\" href=\"#bytes类型及其用法\"></a> Bytes类型及其用法</h1><p>字节串（bytes）和字符串（string）的对比：</p><ul><li>字符串由若干个字符组成，以字符为单位进行操作；字节串由若干个字节组成，以字节为单位进行操作。</li><li>字节串和字符串除了操作的数据单元不同之外，它们支持的所有方法都基本相同。</li><li>字节串和字符串都是不可变序列，不能随意增加和删除数据。</li></ul><p>bytes只负责以字节序列的形式（二进制形式）来存储数据，至于这些数据到底表示什么内容（字符串、数字、图片、音频等），完全由程序的解析方式决定。如果采用合适的字符编码方式（字符集），字节串可以恢复成字符串；反之亦然，字符串也可以转换成字节串。</p><ul><li>如果字符串的内容都是ASCII字符，那么直接在字符串前面添加b前缀就可以转换成 bytes。</li><li>bytes是一个类，调用它的构造方法，也就是bytes()，可以将字符串按照指定的字符集转换成bytes；如果不指定字符集，那么默认采用UTF-8。</li><li>字符串本身有一个encode()方法，该方法专门用来将字符串按照指定的字符集转换成对应的字节串；如果不指定字符集，那么默认采用 UTF-8。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b5 = <span class=\"string\">\"个人博客\"</span>.encode(<span class=\"string\">'UTF-8'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(b5)</span><br><span class=\"line\"><span class=\"string\">b'\\xe4\\xb8\\xaa\\xe4\\xba\\xba\\xe5\\x8d\\x9a\\xe5\\xae\\xa2'</span></span><br></pre></td></tr></table></figure><h1 id=\"python-bool布尔类型\"><a class=\"markdownIt-Anchor\" href=\"#python-bool布尔类型\"></a> Python bool布尔类型</h1><p>Python提供了bool 类型来表示真（对）或假（错），比如常见的5&gt;3比较算式，这个是正确的，在程序世界里称之为真（对），Python 使用 True 来代表；再比如4 &gt; 20比较算式，这个是错误的，在程序世界里称之为假（错），Python 使用 False 来代表。</p><h1 id=\"python的缓存重用机制\"><a class=\"markdownIt-Anchor\" href=\"#python的缓存重用机制\"></a> Python的缓存重用机制</h1><p>Python 缓冲机制是为提高程序执行的效率服务的，实际上就是在 Python 解释器启动时从内存空间中开辟出一小部分，用来存储高频使用的数据，这样可以大大减少高频使用的数据创建时申请内存和销毁时撤销内存的开销。Python 在存储数据时，会根据数据的读取频繁程度以及内存占用情况来考虑，是否按照一定的规则将数据存储缓存中。那么问题来了，内存重用机制适用于哪些基本数据类型呢？</p><table><tr><td>数据类型</td><td>是否可以重用</td><td>生效范围</td></tr><tr><td>范围在[-5,256]之间的小整数</td><td rowspan=\"3\">如果之前在程序中创建过，就直接存入缓存，后续不再创建。</td><td rowspan=\"3\">全局</td></tr><tr><td>bool类型</td></tr><tr><td>字符串类型数据</td></tr><tr><td>大于 256 的整数</td><td rowspan=\"2\">只要在本代码块内创建过，就直接缓存，后续不再创建。</td><td rowspan=\"2\">本代码块</td></tr><tr><td>大于0的浮点型小数</td></tr><td>小于0的浮点型小数</td><td rowspan=\"2\">不进行缓存，每次都需要额外创建。</td><td rowspan=\"2\"></td><tr><td>小于 -5 的整数</td></tr></table><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#范围在 [-5, 256] 之间的小整数</span></span><br><span class=\"line\"><span class=\"meta\">... </span>int1 = <span class=\"number\">-5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2 = <span class=\"number\">-5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"[-5, 256] 情况下的两个变量：\"</span>, id(int1), id(int2))</span><br><span class=\"line\">[<span class=\"number\">-5</span>, <span class=\"number\">256</span>] 情况下的两个变量： <span class=\"number\">10914304</span> <span class=\"number\">10914304</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#bool类型</span></span><br><span class=\"line\"><span class=\"meta\">... </span>bool1 = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bool2 = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"bool类型情况下的两个变量：\"</span>,id(bool1),id(bool2))</span><br><span class=\"line\">bool类型情况下的两个变量： <span class=\"number\">10302848</span> <span class=\"number\">10302848</span></span><br></pre></td></tr></table></figure><h1 id=\"python-input函数获取用户输入的字符串\"><a class=\"markdownIt-Anchor\" href=\"#python-input函数获取用户输入的字符串\"></a> Python input()函数：获取用户输入的字符串</h1><p>input() 函数的用法为：</p><blockquote><p>str = input(tipmsg)</p></blockquote><p>说明：</p><ul><li>str 表示一个字符串类型的变量，input 会将读取到的字符串放入 str 中。</li><li>tipmsg 表示提示信息，它会显示在控制台上，告诉用户应该输入什么样的内容；如果不写 tipmsg，就不会有任何提示信息。</li></ul><p>可以使用 Python 内置函数将字符串转换成想要的类型，比如：</p><ul><li>int(string) 将字符串转换成 int 类型；</li><li>float(string) 将字符串转换成 float 类型；</li><li>bool(string) 将字符串转换成 bool 类型。</li></ul><h1 id=\"print函数的高级用法\"><a class=\"markdownIt-Anchor\" href=\"#print函数的高级用法\"></a> Print()函数的高级用法</h1><p>使用 print() 函数时，都只输出了一个变量，但实际上 print() 函数完全可以同时输出多个变量，而且它具有更多丰富的功能。详细语法格式如下：</p><blockquote><p>print (value,…,sep=’’,end=’\\n’,file=sys.stdout,flush=False)</p></blockquote><p>value 参数可以接受任意多个变量或值，因此 print() 函数完全可以输出多个值。例如如下代码：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_name=<span class=\"string\">'Charlie'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_age = <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"读者名：\"</span>,user_name,<span class=\"string\">\"年龄：\"</span>,user_age)</span><br><span class=\"line\">读者名： Charlie 年龄： <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\"># 指定分隔符</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"读者名：\"</span>,user_name,<span class=\"string\">\"年龄：\"</span>,user_age, sep=<span class=\"string\">'|'</span>)</span><br><span class=\"line\">读者名：|Charlie|年龄：|<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\">#设置end 参数，指定输出之后不再换行</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">40</span>,<span class=\"string\">'\\t'</span>,end=<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"><span class=\"number\">40</span> \t&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>file 参数指定 print() 函数的输出目标，file 参数的默认值为 sys.stdout，该默认值代表了系统标准输出，也就是屏幕，因此 print() 函数默认输出到屏幕。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(<span class=\"string\">\"./demo.txt\"</span>, <span class=\"string\">\"w\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'沧海月明珠有泪'</span>, file=f)</span><br><span class=\"line\">print(<span class=\"string\">'蓝回日暖玉生烟'</span>, file=f)</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure><h1 id=\"python格式化字符串\"><a class=\"markdownIt-Anchor\" href=\"#python格式化字符串\"></a> Python格式化字符串</h1><p>print() 函数使用以%开头的转换说明符对各种类型的数据进行格式化输出。</p><table><thead><tr><th>转换说明符</th><th>解释</th></tr></thead><tbody><tr><td>%d、%i</td><td>转换为带符号的十进制整数</td></tr><tr><td>%o</td><td>转换为带符号的八进制整数</td></tr><tr><td>%x、%X</td><td>转换为带符号的十六进制整数</td></tr><tr><td>%e</td><td>转化为科学计数法表示的浮点数（e 小写）</td></tr><tr><td>%E</td><td>转化为科学计数法表示的浮点数（E 大写）</td></tr><tr><td>%f、%F</td><td>转化为十进制浮点数</td></tr><tr><td>%g</td><td>智能选择使用 %f 或 %e 格式</td></tr><tr><td>%G</td><td>智能选择使用 %F 或 %E 格式</td></tr><tr><td>%c</td><td>格式化字符及其 ASCII 码</td></tr><tr><td>%r</td><td>使用 repr() 函数将表达式转换为字符串</td></tr><tr><td>%s</td><td>使用 str() 函数将表达式转换为字符串</td></tr></tbody></table><h2 id=\"指定最小输出宽度\"><a class=\"markdownIt-Anchor\" href=\"#指定最小输出宽度\"></a> 指定最小输出宽度</h2><p>当使用表1中的转换说明符时，可以使用下面的格式指定最小输出宽度（至少占用多少个字符的位置）：</p><ul><li>%10d 表示输出的整数宽度至少为 10；</li><li>%20s 表示输出的字符串宽度至少为 20。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = <span class=\"number\">1234567</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"n(10):%10d.\"</span> % n)</span><br><span class=\"line\">n(<span class=\"number\">10</span>):   <span class=\"number\">1234567.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"n(5):%5d.\"</span> % n)</span><br><span class=\"line\">n(<span class=\"number\">5</span>):<span class=\"number\">1234567.</span></span><br></pre></td></tr></table></figure><h2 id=\"指定对齐方式\"><a class=\"markdownIt-Anchor\" href=\"#指定对齐方式\"></a> 指定对齐方式</h2><p>默认情况下，print()输出的数据总是右对齐的。也就是说，当数据不够宽时，数据总是靠右边输出，而在左边补充空格以达到指定的宽度。Python 允许在最小宽度之前增加一个标志来改变对齐方式，Python 支持的标志如下：</p><table><thead><tr><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>-</td><td>指定左对齐</td></tr><tr><td>+</td><td>表示输出的数字总要带着符号；整数带+，负数带-。</td></tr><tr><td>0</td><td>表示宽度不足时补充 0，而不是补充空格。</td></tr></tbody></table><p>说明：</p><ul><li>对于整数，指定左对齐时，在右边补0是没有效果的，因为这样会改变整数的值。</li><li>对于小数，以上三个标志可以同时存在。</li><li>对于字符串，只能使用-标志，因为符号对于字符串没有意义，而补0会改变字符串的值。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = <span class=\"number\">123456</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"n(09):%09d\"</span> % n)</span><br><span class=\"line\">n(<span class=\"number\">09</span>):<span class=\"number\">000123456</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"n(+9):%+9d\"</span> % n)</span><br><span class=\"line\">n(+<span class=\"number\">9</span>):  +<span class=\"number\">123456</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = <span class=\"number\">140.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"f(-+0):%-+010f\"</span> % f)</span><br><span class=\"line\">f(-+<span class=\"number\">0</span>):+<span class=\"number\">140.500000</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"s(-10):%-10s.\"</span> % s)</span><br><span class=\"line\">s(<span class=\"number\">-10</span>):Hello     .</span><br></pre></td></tr></table></figure><h2 id=\"指定小数精度\"><a class=\"markdownIt-Anchor\" href=\"#指定小数精度\"></a> 指定小数精度</h2><p>对于小数（浮点数），print() 还允许指定小数点后的数字位数，也即指定小数的输出精度。精度值需要放在最小宽度之后，中间用点号.隔开；也可以不写最小宽度，只写精度。具体格式如下：</p><blockquote><p>%<a href=\"http://m.nf\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">m.nf</a> %.nf # m表示最小宽度，n表示输出精度，.是必须存在的。</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = <span class=\"number\">3.141592653</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"%8.3f\"</span> % f)</span><br><span class=\"line\">   <span class=\"number\">3.142</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"%08.3f\"</span> % f)</span><br><span class=\"line\"><span class=\"number\">0003.142</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"%+08.3f\"</span> % f)</span><br><span class=\"line\">+<span class=\"number\">003.142</span></span><br></pre></td></tr></table></figure><h1 id=\"转义字符及用法\"><a class=\"markdownIt-Anchor\" href=\"#转义字符及用法\"></a> 转义字符及用法</h1><p>ASCII 编码，0~31（十进制）范围内的字符为控制字符，它们都是看不见的，不能在显示器上显示，甚至无法从键盘输入，只能用转义字符的形式来表示。不过，直接使用ASCII 码记忆不方便，也不容易理解，所以，针对常用的控制字符，C语言又定义了简写方式，完整的列表如下。</p><table><thead><tr><th>转义字符</th><th>说明</th></tr></thead><tbody><tr><td>\\n</td><td>换行符，将光标位置移到下一行开头</td></tr><tr><td>\\r</td><td>回车符，将光标位置移到本行开头</td></tr><tr><td>\\t</td><td>水平制表符，Tab键，相当于四个空格</td></tr><tr><td>\\b</td><td>退格（Backspace），将光标位置移到前一列</td></tr><tr><td>\\</td><td>反斜线</td></tr><tr><td>’</td><td>单引号</td></tr><tr><td>&quot;</td><td>双引号</td></tr><tr><td>\\</td><td>在字符串行尾的续行符，即一行未完，转到下一行继续写。</td></tr></tbody></table><h1 id=\"python数据类型转换\"><a class=\"markdownIt-Anchor\" href=\"#python数据类型转换\"></a> Python数据类型转换</h1><p>Python 已经为我们提供了多种可实现数据类型转换的函数，如下表：</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换成整数类型</td></tr><tr><td>float(x)</td><td>将x转换成浮点数类型</td></tr><tr><td>complex(real, [,image])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将x转换成字符串</td></tr><tr><td>repr(x)</td><td>将x转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>计算在字符串中的有效 Python 表达式，并返回一个对象</td></tr><tr><td>chr(x)</td><td>将整数x转换为一个字符</td></tr><tr><td>ord(x)</td><td>将一个字符x转换为它对应的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数x转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数 x 转换为一个八进制的字符串</td></tr></tbody></table><h1 id=\"python算术运算符及用法详解\"><a class=\"markdownIt-Anchor\" href=\"#python算术运算符及用法详解\"></a> Python算术运算符及用法详解</h1><p>算术运算符也即数学运算符，用来对数字进行数学运算，比如加减乘除。下表列出了 Python 支持所有基本算术运算符。</p><table><thead><tr><th>运算符</th><th>说明</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>12.45+15</td><td>27.45</td></tr><tr><td>-</td><td>减</td><td>4.56-0.26</td><td>4.3</td></tr><tr><td>*</td><td>乘</td><td>5*3.6</td><td>18.0</td></tr><tr><td>/</td><td>除法</td><td>7/2</td><td>3.5</td></tr><tr><td>//</td><td>整除</td><td>7//2</td><td>3</td></tr><tr><td>%</td><td>取余</td><td>7%2</td><td>1</td></tr><tr><td>**</td><td>幂运算/次方运算，即返回 x 的 y 次方</td><td>2**4</td><td>16，即<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{4}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8141079999999999em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span></span></td></tr></tbody></table><h1 id=\"python赋值运算符\"><a class=\"markdownIt-Anchor\" href=\"#python赋值运算符\"></a> Python赋值运算符</h1><p>赋值运算符用来把右侧的值传递给左侧的变量（或者常量）；可以直接将右侧的值交给左侧的变量，也可以进行某些运算后再交给左侧的变量，比如加减乘除、函数调用、逻辑运算等。</p><p><font color=\"red\">= 和 == 是两个不同的运算符，= 用来赋值，而 == 用来判断两边的值是否相等，千万不要混淆。</font></p><p>Python扩展赋值运算符如下表：</p><div align=\"center\"><img src=\"/image/运算符.png\" width=\"400\"></div><h1 id=\"python位运算符\"><a class=\"markdownIt-Anchor\" href=\"#python位运算符\"></a> Python位运算符</h1><p>Python 位运算按照数据在内存中的二进制位（Bit）进行操作，它一般用于底层开发（算法设计、驱动、图像处理、单片机等），在应用层开发（Web 开发、Linux 运维等）中并不常见。Python 支持的位运算符如下表所示。</p><table><thead><tr><th>位运算符</th><th>说明</th><th>使用形式</th><th>举例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td><td>a&amp;b</td><td>4&amp;5</td></tr><tr><td>|</td><td>按位或</td><td>a|b</td><td>4|5</td></tr><tr><td>^</td><td>按位异或</td><td>a^b</td><td>4^5</td></tr><tr><td>~</td><td>按位取反</td><td>~a</td><td>~4</td></tr><tr><td>&lt;&lt;</td><td>按位左移</td><td>a&lt;&lt;b</td><td>4&lt;&lt;2表示整数4按位左移2位</td></tr><tr><td>&gt;&gt;</td><td>按位右移</td><td>a&gt;&gt;b</td><td>4 &gt;&gt; 2，表示整数 4 按位右移 2 位</td></tr></tbody></table><h1 id=\"python比较运算符\"><a class=\"markdownIt-Anchor\" href=\"#python比较运算符\"></a> Python比较运算符</h1><p>比较运算符，也称关系运算符，用于对常量、变量或表达式的结果进行大小比较。如果这种比较是成立的，则返回True（真），反之则返回False（假）。支持的比较运算符如表所示：<br>比较运算符\t说明</p><table><thead><tr><th>&gt;</th><th>大于，如果&gt;前面的值大于后面的值，则返回 True，否则返回 False。</th></tr></thead><tbody><tr><td>&lt;</td><td>小于，如果&lt;前面的值小于后面的值，则返回 True，否则返回 False。</td></tr><tr><td>==</td><td>等于，如果==两边的值相等，则返回 True，否则返回 False。</td></tr><tr><td>&gt;=</td><td>大于等于（等价于数学中的 ≥），如果&gt;=前面的值大于或者等于后面的值，则返回 True，否则返回 False。</td></tr><tr><td>&lt;=</td><td>小于等于（等价于数学中的 ≤），如果&lt;=前面的值小于或者等于后面的值，则返回 True，否则返回 False。</td></tr><tr><td>!=</td><td>不等于（等价于数学中的 ≠），如果!=两边的值不相等，则返回 True，否则返回 False。</td></tr><tr><td>is</td><td>判断两个变量所引用的对象是否相同，如果相同则返回 True，否则返回 False。</td></tr><tr><td>is not</td><td>判断两个变量所引用的对象是否不相同，如果不相同则返回 True，否则返回 False。</td></tr></tbody></table><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time  <span class=\"comment\">#引入time模块</span></span><br><span class=\"line\">t1 = time.gmtime() <span class=\"comment\"># gmtime()用来获取当前时间</span></span><br><span class=\"line\">t2 =  time.gmtime()</span><br><span class=\"line\">print(t1 == t2) <span class=\"comment\">#输出True</span></span><br><span class=\"line\">print(t1 <span class=\"keyword\">is</span> t2) <span class=\"comment\">#输出False</span></span><br><span class=\"line\"><span class=\"comment\"># t1与t2值相等，但是两个不同的对象</span></span><br></pre></td></tr></table></figure><h1 id=\"python的逻辑运算符及其用法\"><a class=\"markdownIt-Anchor\" href=\"#python的逻辑运算符及其用法\"></a> Python的逻辑运算符及其用法</h1><p>常用逻辑运算符及功能如下：</p><table><thead><tr><th>逻辑运算符</th><th>含义</th><th>基本格式</th><th>说明</th></tr></thead><tbody><tr><td>and</td><td>逻辑与运算，等价于数学中的“且”</td><td>a and b</td><td>当 a 和 b 两个表达式都为假时，a or b 的结果才是假，否则为真。</td></tr><tr><td>or</td><td>逻辑或运算，等价于数学中的“或”</td><td>a or b</td><td>当 a 和 b 两个表达式都为假时，a or b 的结果才是假，否则为真。</td></tr><tr><td>not</td><td>逻辑非运算，等价于数学中的“非”</td><td>not a</td><td>如果 a 为真，那么 not a 的结果为假；如果 a 为假，那么 not a 的结果为真。相当于对 a 取反。</td></tr></tbody></table><p>Python 逻辑运算符用于操作 bool 类型的表达式，执行结果也是 bool 类型，这两点其实都是错误的！实例如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">100</span> <span class=\"keyword\">and</span> <span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">45</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"\"</span> <span class=\"keyword\">or</span> <span class=\"string\">\"http://forwardpeng.club/\"</span>)</span><br><span class=\"line\">http://forwardpeng.club/</span><br></pre></td></tr></table></figure><h2 id=\"逻辑运算符本质\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符本质\"></a> 逻辑运算符本质</h2><p><font color=\"red\">在Python中，and 和or不一定会计算右边表达式的值，有时候只计算左边表达式的值就能得到最终结果。另外，and和or运算符会将其中一个表达式的值作为最终结果，而不是将 True 或者 False 作为最终结果。<br></font><br>对于 and 运算符，两边的值都为真时最终结果才为真，但是只要其中有一个值为假，那么最终结果就是假，所以 Python 按照下面的规则执行 and 运算：</p><ul><li>如果左边表达式的值为假，那么就不用计算右边表达式的值了，因为不管右边表达式的值是什么，都不会影响最终结果，最终结果都是假，此时 and 会把左边表达式的值作为最终结果。</li><li>如果左边表达式的值为真，那么最终值是不能确定的，and 会继续计算右边表达式的值，并将右边表达式的值作为最终结果。</li></ul><p>对于 or 运算符，情况是类似的，两边的值都为假时最终结果才为假，只要其中有一个值为真，那么最终结果就是真，所以 Python 按照下面的规则执行 or 运算：</p><ul><li>如果左边表达式的值为真，那么就不用计算右边表达式的值了，因为不管右边表达式的值是什么，都不会影响最终结果，最终结果都是真，此时 or 会把左边表达式的值作为最终结果。</li><li>如果左边表达式的值为假，那么最终值是不能确定的，or 会继续计算右边表达式的值，并将右边表达式的值作为最终结果。</li></ul><h1 id=\"python-三目运算符用法详解\"><a class=\"markdownIt-Anchor\" href=\"#python-三目运算符用法详解\"></a> Python 三目运算符用法详解</h1><p>if else 实现三目运算符（条件运算符）的格式如下：</p><blockquote><p>exp1 if contion else exp2</p></blockquote><p>Python三目运算符支持嵌套，如此可以构成更加复杂的表达式。在嵌套时需要注意 if和else的配对，如下：</p><blockquote><p>a if a&gt;b else c if c&gt;d else d</p></blockquote><h1 id=\"python运算符优先级和结合性\"><a class=\"markdownIt-Anchor\" href=\"#python运算符优先级和结合性\"></a> Python运算符优先级和结合性</h1><p>Python 支持几十种运算符，被划分成将近二十个优先级，有的运算符优先级不同，有的运算符优先级相同，请看下表。</p><div align=\"center\"><img src=\"/image/运算符优先级.png\" width=\"400\"></div><p>虽然 Python 运算符存在优先级的关系，但不推荐过度依赖运算符的优先级，建议：</p><ul><li>不要把一个表达式写得过于复杂，如果一个表达式过于复杂，可以尝试把它拆分来书写。</li><li>不要过多地依赖运算符的优先级来控制表达式的执行顺序，这样可读性太差，应尽量使用( )来控制表达式的执行顺序。</li></ul><h2 id=\"运算符结合性\"><a class=\"markdownIt-Anchor\" href=\"#运算符结合性\"></a> 运算符结合性</h2><p>结合性，就是当一个表达式中出现多个优先级相同的运算符时，先执行哪个运算符：先执行左边的叫左结合性，先执行右边的叫右结合性。如：100 / 25 * 16，/和*都具有左结合性，因此先执行左边的除法，再执行右边的乘法，最终结果是64。</p><p>Python中大部分运算符都具有左结合性，也就是从左到右执行；只有单目运算符（例如 not 逻辑非运算符）、赋值运算符和三目运算符例外，它们具有右结合性，也就是从右向左执行。表 1 中列出了所有 Python 运算符的结合性。</p><!-- rebuild by neat -->","more":"<!-- build time:Tue Apr 28 2020 11:56:43 GMT+0800 (GMT+08:00) --><h1 id=\"python变量的定义和使用\"><a class=\"markdownIt-Anchor\" href=\"#python变量的定义和使用\"></a> Python变量的定义和使用</h1><p>变量保存的数据可以被多次修改，而常量一旦保存某个数据之后就不能修改了。</p><h2 id=\"python变量的赋值\"><a class=\"markdownIt-Anchor\" href=\"#python变量的赋值\"></a> Python变量的赋值</h2><p>将数据放入变量的过程叫做赋值（Assignment）。Python使用等号=作为赋值运算符，具体格式为：</p><blockquote><p>name = value</p></blockquote><p>name表示变量名；value表示值，也就是要存储的数据。注意，变量是标识符的一种，它的名字不能随便起，要遵守Python标识符命名规范，还要避免和Python内置函数以及Python保留字重名。</p><h2 id=\"python变量的使用\"><a class=\"markdownIt-Anchor\" href=\"#python变量的使用\"></a> Python变量的使用</h2><p>使用 Python 变量时，只要知道变量的名字即可。几乎在Python代码的任何地方都能使用变量。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(n)  <span class=\"comment\">#将变量传递给函数</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m = n * <span class=\"number\">10</span> + <span class=\"number\">5</span>  <span class=\"comment\">#将变量作为四则运算的一部分</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(m)</span><br><span class=\"line\"><span class=\"number\">105</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(m<span class=\"number\">-30</span>)  <span class=\"comment\">#将由变量构成的表达式作为参数传递给函数</span></span><br><span class=\"line\"><span class=\"number\">75</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m = m * <span class=\"number\">2</span>  <span class=\"comment\">#将变量本身的值翻倍</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(m)</span><br><span class=\"line\"><span class=\"number\">210</span></span><br></pre></td></tr></table></figure><h2 id=\"python是弱类型的语言\"><a class=\"markdownIt-Anchor\" href=\"#python是弱类型的语言\"></a> Python是弱类型的语言</h2><p>C语言、C++、Java 是强类型语言的代表。和强类型语言相对应的是弱类型语言，Python、JavaScript、PHP 等脚本语言一般都是弱类型的。</p><p>弱类型语言有两个特点：</p><ul><li>变量无须声明就可以直接赋值，对一个不存在的变量赋值就相当于定义了一个新变量。</li><li>变量的数据类型可以随时改变，比如，同一个变量可以一会儿被赋值为整数，一会儿被赋值为字符串。</li></ul><h1 id=\"python整数类型int详解\"><a class=\"markdownIt-Anchor\" href=\"#python整数类型int详解\"></a> Python整数类型(int)详解</h1><p>整数就是没有小数部分的数字，Python中的整数包括正整数、0和负整数。</p><p>有些强类型的编程语言会提供多种整数类型，每种类型的长度都不同，能容纳的整数的大小也不同，开发者要根据实际数字的大小选用不同的类型。例如C语言提供了short、int、long、long long四种类型的整数，它们的长度依次递增，初学者在选择整数类型时往往比较迷惑，有时候还会导致数值溢出。</p><p>而Python则不同，它的整数不分类型，或者说它只有一种类型的整数。Python整数的取值范围是无限的，不管多大或者多小的数字，Python 都能轻松处理。</p><blockquote><p>当所用数值超过计算机自身的计算能力时，Python 会自动转用高精度计算（大数计算）。</p></blockquote><h2 id=\"整数的不同进制\"><a class=\"markdownIt-Anchor\" href=\"#整数的不同进制\"></a> 整数的不同进制</h2><ul><li>十进制形式：使用十进制形式的整数不能以 0 作为开头，除非这个数值本身就是 0。</li><li>二进制形式：由0和1两个数字组成，书写时以0b或0B开头。例如，101对应十进制数是5。</li><li>八进制：八进制整数由0~7共八个数字组成，以0o或0O开头。注意，第一个符号是数字 0，第二个符号是大写或小写的字母 O。</li><li>十六进制形式：由 0~9 十个数字以及 A~F（或 a~f）六个字母组成，书写时以0x或0X开头。</li></ul><h2 id=\"数字分隔符\"><a class=\"markdownIt-Anchor\" href=\"#数字分隔符\"></a> 数字分隔符</h2><p>Python 3.x 允许使用下划线_作为数字（包括整数和小数）的分隔符。通常每隔三个数字添加一个下划线，类似于英文数字中的逗号。下划线不会影响数字本身的值。</p><h1 id=\"python小数浮点数float类型详解\"><a class=\"markdownIt-Anchor\" href=\"#python小数浮点数float类型详解\"></a> Python小数／浮点数(float)类型详解</h1><p>小数通常以浮点数的形式存储。浮点数和定点数是相对的：小数在存储过程中如果小数点发生移动，就称为浮点数；如果小数点不动，就称为定点数。Python中的小数有两种书写形式：</p><ul><li>十进制形式：平时看到的小数形式，例如 34.6、346.0、0.346。书写小数时必须包含一个小数点，否则会被Python当作整数处理。</li><li>指数形式：小数的指数形式为aEn或aen，a为尾数部分，是一个十进制数；n为指数部分，是一个十进制整数；E或e是固定的字符，用于分割尾数部分和指数部分。整个表达式等价于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>×</mo><mn>1</mn><msup><mn>0</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">a×10^{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.664392em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span>。举例：2.1E5=2.1×105，其中2.1是尾数，5是指数。3.7E-2 = 3.7×10-2，其中3.7是尾数，-2是指数。0.5E7=0.5×107，其中 0.5是尾数，7是指数。</li></ul><blockquote><p>Python 只有一种小数类型，就是 float。C语言有两种小数类型，分别是 float 和 double：float 能容纳的小数范围比较小，double 能容纳的小数范围比较大。</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1 = <span class=\"number\">12.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'f1Value:'</span>, f1)</span><br><span class=\"line\">f1Value: <span class=\"number\">12.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'f1Type:'</span>, type(f1))</span><br><span class=\"line\">f1Type: &lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">float</span>'&gt;</span></span><br><span class=\"line\">&gt;&gt;&gt; f5 = 12e4</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"f5Value: \"</span>, f5)</span><br><span class=\"line\">f5Value:  <span class=\"number\">120000.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"f5Type: \"</span>, type(f5))</span><br><span class=\"line\">f5Type:  &lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">float</span>'&gt;</span></span><br><span class=\"line\">&gt;&gt;&gt; f6 = 12.3 * 0.1</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"f6Value: \"</span>, f6)</span><br><span class=\"line\">f6Value:  <span class=\"number\">1.2300000000000002</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"f6Type: \"</span>, type(f6))</span><br><span class=\"line\">f6Type:  &lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">float</span>'&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"为什么python浮点类型存在误差\"><a class=\"markdownIt-Anchor\" href=\"#为什么python浮点类型存在误差\"></a> 为什么Python浮点类型存在误差</h1><p>主要还是因浮点数在计算机中实际是以二进制保存的，有些数不精确。<br>比如说: 0.1是十进制，转化为二进制后它是个无限循环的数：<br>0.00011001100110011001100110011001100110011001100110011001100<br>而python是以双精度(64)位来保存浮点数，多余的位会被截掉，所以看到的是0.1，但在电脑上实际保存的已不是精确的0.1，参与运算后，也就有可能点误差。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解决方法 </span></span><br><span class=\"line\"><span class=\"keyword\">from</span> decimal <span class=\"keyword\">import</span> *</span><br><span class=\"line\">a = Decimal(<span class=\"string\">'4.2'</span>)</span><br><span class=\"line\">b = Decimal(<span class=\"string\">'2.1'</span>)</span><br><span class=\"line\">c = a * b</span><br></pre></td></tr></table></figure><h1 id=\"python复数类型complex详解\"><a class=\"markdownIt-Anchor\" href=\"#python复数类型complex详解\"></a> Python复数类型(complex)详解</h1><p>复数由实部（real）和虚部（imag）构成，在Python中，复数的虚部以j或者J作为后缀，具体格式为：</p><blockquote><p>a + bj # a表示实部，b表示虚部。</p></blockquote><h1 id=\"python字符串详解包含长字符串和原始字符串\"><a class=\"markdownIt-Anchor\" href=\"#python字符串详解包含长字符串和原始字符串\"></a> Python字符串详解（包含长字符串和原始字符串）</h1><p>字符串必须由双引号&quot; &quot;或者单引号’ '包围，具体格式为：</p><blockquote><p>“字符串内容”<br>‘字符串内容’</p></blockquote><p>字符串的内容可以包含字母、标点、特殊符号、中文、日文等全世界的所有文字。字符串中的双引号和单引号没有任何区别，而有些编程语言的双引号字符串可以解析变量，单引号字符串一律原样输出。</p><h2 id=\"处理字符串中的引号\"><a class=\"markdownIt-Anchor\" href=\"#处理字符串中的引号\"></a> 处理字符串中的引号</h2><p>当字符串内容中出现引号时，我们需要进行特殊处理，否则Python会解析出错，处理方案如下：</p><p><strong>1.对引号进行转义</strong></p><p>在引号前面添加反斜杠\\就可以对引号进行转义，让 Python 把它作为普通文本对待，例如：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">'I\\'m a great Person'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(str1)</span><br><span class=\"line\">I<span class=\"string\">'m a great Person</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; str2 = \"引文双引号是\\\",中文双引号是\"</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; print(str2)</span></span><br><span class=\"line\"><span class=\"string\">引文双引号是\",中文双引号是</span></span><br></pre></td></tr></table></figure><p><strong>2.使用不同的引号包围字符串</strong></p><p>字符串内容中出现了单引号，那么我们可以使用双引号包围字符串，反之亦然。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"I'm a great coder!\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(str1)</span><br><span class=\"line\">I<span class=\"string\">'m a great coder!</span></span><br></pre></td></tr></table></figure><h2 id=\"字符串的换行\"><a class=\"markdownIt-Anchor\" href=\"#字符串的换行\"></a> 字符串的换行</h2><p>Python 不是格式自由的语言，它对程序的换行、缩进都有严格的语法要求。要想换行书写一个比较长的字符串，必须在行尾添加反斜杠\\，ｐｙｔｈｏｎ也支持表达式的换行。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s2 = <span class=\"string\">\"It took six months to writer \\</span></span><br><span class=\"line\"><span class=\"string\">... Please give me more support. \\</span></span><br><span class=\"line\"><span class=\"string\">... I will keep !\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(s2)</span><br><span class=\"line\">It took six months to writer Please give me more support. I will keep !</span><br></pre></td></tr></table></figure><h2 id=\"python原始字符串\"><a class=\"markdownIt-Anchor\" href=\"#python原始字符串\"></a> Python原始字符串</h2><p>为了解决转义字符的问题，Python 支持原始字符串。在原始字符串中，\\不会被当作转义字符，所有的内容都保持“原汁原味”的样子。在普通字符串或者长字符串的开头加上r前缀，就变成了原始字符串，具体格式为：</p><blockquote><p>str1 = r’原始字符串内容’<br>str2 = r&quot;&quot;“原始字符串内容”&quot;&quot;</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">r'I\\'m a great coder!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(str1)</span><br><span class=\"line\">I\\<span class=\"string\">'m a great coder!</span></span><br></pre></td></tr></table></figure><p>Python 原始字符串中的反斜杠仍然会对引号进行转义，因此原始字符串的结尾处不能是反斜杠，否则字符串结尾处的引号会被转义，导致字符串不能正确结束。</p><p>在 Python 中有两种方式解决这个问题：一种方式是改用长字符串的写法，不要使用原始字符串；另一种方式是单独书写反斜杠。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">r'D:\\Program Files\\Python 3.8'</span> <span class=\"string\">'\\\\'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(str1)</span><br><span class=\"line\">D:\\Program Files\\Python <span class=\"number\">3.8</span>\\</span><br></pre></td></tr></table></figure><h1 id=\"编码格式\"><a class=\"markdownIt-Anchor\" href=\"#编码格式\"></a> 编码格式</h1><p>ASCII码，全称为美国信息交换标准代码，是基于拉丁字母的一套字符编码，主要用于显示现代英语，因为万维网的出现，使得 ASCII码广为使用，其直到2007年12月才逐渐被Unicode取代。nicode字符集可以使用的编码方案有三种，分别是：</p><ul><li>UTF-8：一种变长的编码方案，使用1~6个字节来存储；</li><li>UTF-32：一种固定长度的编码方案，不管字符编号大小，始终使用4个字节来存储；</li><li>UTF-16：介于UTF-8和UTF-32之间，使用2个或者4个字节来存储，长度既固定又可变。</li></ul><h2 id=\"python使用的字符编码\"><a class=\"markdownIt-Anchor\" href=\"#python使用的字符编码\"></a> Python使用的字符编码</h2><p>Ｐython3.x中，字符串采用的是Unicode字符集，可以用如下代码来查看当前环境的编码格式：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getdefaultencoding()</span><br><span class=\"line\"><span class=\"string\">'utf-8'</span></span><br><span class=\"line\"><span class=\"comment\"># 使用ord()和chr()函数实现字符和编码数字之间的转换</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ord(<span class=\"string\">'Q'</span>)</span><br><span class=\"line\"><span class=\"number\">81</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>chr(<span class=\"number\">81</span>)</span><br><span class=\"line\"><span class=\"string\">'Q'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ord(<span class=\"string\">\"网\"</span>)</span><br><span class=\"line\"><span class=\"number\">32593</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>chr(<span class=\"number\">32593</span>)</span><br><span class=\"line\"><span class=\"string\">'网'</span></span><br></pre></td></tr></table></figure><p>虽然Python默认采用UTF-8编码，但它也提供了encode()方法，可以轻松实现将Unicode编码格式的字符串转化为其它编码格式。</p><h1 id=\"bytes类型及其用法\"><a class=\"markdownIt-Anchor\" href=\"#bytes类型及其用法\"></a> Bytes类型及其用法</h1><p>字节串（bytes）和字符串（string）的对比：</p><ul><li>字符串由若干个字符组成，以字符为单位进行操作；字节串由若干个字节组成，以字节为单位进行操作。</li><li>字节串和字符串除了操作的数据单元不同之外，它们支持的所有方法都基本相同。</li><li>字节串和字符串都是不可变序列，不能随意增加和删除数据。</li></ul><p>bytes只负责以字节序列的形式（二进制形式）来存储数据，至于这些数据到底表示什么内容（字符串、数字、图片、音频等），完全由程序的解析方式决定。如果采用合适的字符编码方式（字符集），字节串可以恢复成字符串；反之亦然，字符串也可以转换成字节串。</p><ul><li>如果字符串的内容都是ASCII字符，那么直接在字符串前面添加b前缀就可以转换成 bytes。</li><li>bytes是一个类，调用它的构造方法，也就是bytes()，可以将字符串按照指定的字符集转换成bytes；如果不指定字符集，那么默认采用UTF-8。</li><li>字符串本身有一个encode()方法，该方法专门用来将字符串按照指定的字符集转换成对应的字节串；如果不指定字符集，那么默认采用 UTF-8。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b5 = <span class=\"string\">\"个人博客\"</span>.encode(<span class=\"string\">'UTF-8'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(b5)</span><br><span class=\"line\"><span class=\"string\">b'\\xe4\\xb8\\xaa\\xe4\\xba\\xba\\xe5\\x8d\\x9a\\xe5\\xae\\xa2'</span></span><br></pre></td></tr></table></figure><h1 id=\"python-bool布尔类型\"><a class=\"markdownIt-Anchor\" href=\"#python-bool布尔类型\"></a> Python bool布尔类型</h1><p>Python提供了bool 类型来表示真（对）或假（错），比如常见的5&gt;3比较算式，这个是正确的，在程序世界里称之为真（对），Python 使用 True 来代表；再比如4 &gt; 20比较算式，这个是错误的，在程序世界里称之为假（错），Python 使用 False 来代表。</p><h1 id=\"python的缓存重用机制\"><a class=\"markdownIt-Anchor\" href=\"#python的缓存重用机制\"></a> Python的缓存重用机制</h1><p>Python 缓冲机制是为提高程序执行的效率服务的，实际上就是在 Python 解释器启动时从内存空间中开辟出一小部分，用来存储高频使用的数据，这样可以大大减少高频使用的数据创建时申请内存和销毁时撤销内存的开销。Python 在存储数据时，会根据数据的读取频繁程度以及内存占用情况来考虑，是否按照一定的规则将数据存储缓存中。那么问题来了，内存重用机制适用于哪些基本数据类型呢？</p><table><tr><td>数据类型</td><td>是否可以重用</td><td>生效范围</td></tr><tr><td>范围在[-5,256]之间的小整数</td><td rowspan=\"3\">如果之前在程序中创建过，就直接存入缓存，后续不再创建。</td><td rowspan=\"3\">全局</td></tr><tr><td>bool类型</td></tr><tr><td>字符串类型数据</td></tr><tr><td>大于 256 的整数</td><td rowspan=\"2\">只要在本代码块内创建过，就直接缓存，后续不再创建。</td><td rowspan=\"2\">本代码块</td></tr><tr><td>大于0的浮点型小数</td></tr><td>小于0的浮点型小数</td><td rowspan=\"2\">不进行缓存，每次都需要额外创建。</td><td rowspan=\"2\"></td><tr><td>小于 -5 的整数</td></tr></table><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#范围在 [-5, 256] 之间的小整数</span></span><br><span class=\"line\"><span class=\"meta\">... </span>int1 = <span class=\"number\">-5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2 = <span class=\"number\">-5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"[-5, 256] 情况下的两个变量：\"</span>, id(int1), id(int2))</span><br><span class=\"line\">[<span class=\"number\">-5</span>, <span class=\"number\">256</span>] 情况下的两个变量： <span class=\"number\">10914304</span> <span class=\"number\">10914304</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#bool类型</span></span><br><span class=\"line\"><span class=\"meta\">... </span>bool1 = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bool2 = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"bool类型情况下的两个变量：\"</span>,id(bool1),id(bool2))</span><br><span class=\"line\">bool类型情况下的两个变量： <span class=\"number\">10302848</span> <span class=\"number\">10302848</span></span><br></pre></td></tr></table></figure><h1 id=\"python-input函数获取用户输入的字符串\"><a class=\"markdownIt-Anchor\" href=\"#python-input函数获取用户输入的字符串\"></a> Python input()函数：获取用户输入的字符串</h1><p>input() 函数的用法为：</p><blockquote><p>str = input(tipmsg)</p></blockquote><p>说明：</p><ul><li>str 表示一个字符串类型的变量，input 会将读取到的字符串放入 str 中。</li><li>tipmsg 表示提示信息，它会显示在控制台上，告诉用户应该输入什么样的内容；如果不写 tipmsg，就不会有任何提示信息。</li></ul><p>可以使用 Python 内置函数将字符串转换成想要的类型，比如：</p><ul><li>int(string) 将字符串转换成 int 类型；</li><li>float(string) 将字符串转换成 float 类型；</li><li>bool(string) 将字符串转换成 bool 类型。</li></ul><h1 id=\"print函数的高级用法\"><a class=\"markdownIt-Anchor\" href=\"#print函数的高级用法\"></a> Print()函数的高级用法</h1><p>使用 print() 函数时，都只输出了一个变量，但实际上 print() 函数完全可以同时输出多个变量，而且它具有更多丰富的功能。详细语法格式如下：</p><blockquote><p>print (value,…,sep=’’,end=’\\n’,file=sys.stdout,flush=False)</p></blockquote><p>value 参数可以接受任意多个变量或值，因此 print() 函数完全可以输出多个值。例如如下代码：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_name=<span class=\"string\">'Charlie'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_age = <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"读者名：\"</span>,user_name,<span class=\"string\">\"年龄：\"</span>,user_age)</span><br><span class=\"line\">读者名： Charlie 年龄： <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\"># 指定分隔符</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"读者名：\"</span>,user_name,<span class=\"string\">\"年龄：\"</span>,user_age, sep=<span class=\"string\">'|'</span>)</span><br><span class=\"line\">读者名：|Charlie|年龄：|<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\">#设置end 参数，指定输出之后不再换行</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">40</span>,<span class=\"string\">'\\t'</span>,end=<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"><span class=\"number\">40</span> \t&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>file 参数指定 print() 函数的输出目标，file 参数的默认值为 sys.stdout，该默认值代表了系统标准输出，也就是屏幕，因此 print() 函数默认输出到屏幕。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(<span class=\"string\">\"./demo.txt\"</span>, <span class=\"string\">\"w\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'沧海月明珠有泪'</span>, file=f)</span><br><span class=\"line\">print(<span class=\"string\">'蓝回日暖玉生烟'</span>, file=f)</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure><h1 id=\"python格式化字符串\"><a class=\"markdownIt-Anchor\" href=\"#python格式化字符串\"></a> Python格式化字符串</h1><p>print() 函数使用以%开头的转换说明符对各种类型的数据进行格式化输出。</p><table><thead><tr><th>转换说明符</th><th>解释</th></tr></thead><tbody><tr><td>%d、%i</td><td>转换为带符号的十进制整数</td></tr><tr><td>%o</td><td>转换为带符号的八进制整数</td></tr><tr><td>%x、%X</td><td>转换为带符号的十六进制整数</td></tr><tr><td>%e</td><td>转化为科学计数法表示的浮点数（e 小写）</td></tr><tr><td>%E</td><td>转化为科学计数法表示的浮点数（E 大写）</td></tr><tr><td>%f、%F</td><td>转化为十进制浮点数</td></tr><tr><td>%g</td><td>智能选择使用 %f 或 %e 格式</td></tr><tr><td>%G</td><td>智能选择使用 %F 或 %E 格式</td></tr><tr><td>%c</td><td>格式化字符及其 ASCII 码</td></tr><tr><td>%r</td><td>使用 repr() 函数将表达式转换为字符串</td></tr><tr><td>%s</td><td>使用 str() 函数将表达式转换为字符串</td></tr></tbody></table><h2 id=\"指定最小输出宽度\"><a class=\"markdownIt-Anchor\" href=\"#指定最小输出宽度\"></a> 指定最小输出宽度</h2><p>当使用表1中的转换说明符时，可以使用下面的格式指定最小输出宽度（至少占用多少个字符的位置）：</p><ul><li>%10d 表示输出的整数宽度至少为 10；</li><li>%20s 表示输出的字符串宽度至少为 20。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = <span class=\"number\">1234567</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"n(10):%10d.\"</span> % n)</span><br><span class=\"line\">n(<span class=\"number\">10</span>):   <span class=\"number\">1234567.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"n(5):%5d.\"</span> % n)</span><br><span class=\"line\">n(<span class=\"number\">5</span>):<span class=\"number\">1234567.</span></span><br></pre></td></tr></table></figure><h2 id=\"指定对齐方式\"><a class=\"markdownIt-Anchor\" href=\"#指定对齐方式\"></a> 指定对齐方式</h2><p>默认情况下，print()输出的数据总是右对齐的。也就是说，当数据不够宽时，数据总是靠右边输出，而在左边补充空格以达到指定的宽度。Python 允许在最小宽度之前增加一个标志来改变对齐方式，Python 支持的标志如下：</p><table><thead><tr><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>-</td><td>指定左对齐</td></tr><tr><td>+</td><td>表示输出的数字总要带着符号；整数带+，负数带-。</td></tr><tr><td>0</td><td>表示宽度不足时补充 0，而不是补充空格。</td></tr></tbody></table><p>说明：</p><ul><li>对于整数，指定左对齐时，在右边补0是没有效果的，因为这样会改变整数的值。</li><li>对于小数，以上三个标志可以同时存在。</li><li>对于字符串，只能使用-标志，因为符号对于字符串没有意义，而补0会改变字符串的值。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = <span class=\"number\">123456</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"n(09):%09d\"</span> % n)</span><br><span class=\"line\">n(<span class=\"number\">09</span>):<span class=\"number\">000123456</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"n(+9):%+9d\"</span> % n)</span><br><span class=\"line\">n(+<span class=\"number\">9</span>):  +<span class=\"number\">123456</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = <span class=\"number\">140.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"f(-+0):%-+010f\"</span> % f)</span><br><span class=\"line\">f(-+<span class=\"number\">0</span>):+<span class=\"number\">140.500000</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"s(-10):%-10s.\"</span> % s)</span><br><span class=\"line\">s(<span class=\"number\">-10</span>):Hello     .</span><br></pre></td></tr></table></figure><h2 id=\"指定小数精度\"><a class=\"markdownIt-Anchor\" href=\"#指定小数精度\"></a> 指定小数精度</h2><p>对于小数（浮点数），print() 还允许指定小数点后的数字位数，也即指定小数的输出精度。精度值需要放在最小宽度之后，中间用点号.隔开；也可以不写最小宽度，只写精度。具体格式如下：</p><blockquote><p>%<a href=\"http://m.nf\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">m.nf</a> %.nf # m表示最小宽度，n表示输出精度，.是必须存在的。</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = <span class=\"number\">3.141592653</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"%8.3f\"</span> % f)</span><br><span class=\"line\">   <span class=\"number\">3.142</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"%08.3f\"</span> % f)</span><br><span class=\"line\"><span class=\"number\">0003.142</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"%+08.3f\"</span> % f)</span><br><span class=\"line\">+<span class=\"number\">003.142</span></span><br></pre></td></tr></table></figure><h1 id=\"转义字符及用法\"><a class=\"markdownIt-Anchor\" href=\"#转义字符及用法\"></a> 转义字符及用法</h1><p>ASCII 编码，0~31（十进制）范围内的字符为控制字符，它们都是看不见的，不能在显示器上显示，甚至无法从键盘输入，只能用转义字符的形式来表示。不过，直接使用ASCII 码记忆不方便，也不容易理解，所以，针对常用的控制字符，C语言又定义了简写方式，完整的列表如下。</p><table><thead><tr><th>转义字符</th><th>说明</th></tr></thead><tbody><tr><td>\\n</td><td>换行符，将光标位置移到下一行开头</td></tr><tr><td>\\r</td><td>回车符，将光标位置移到本行开头</td></tr><tr><td>\\t</td><td>水平制表符，Tab键，相当于四个空格</td></tr><tr><td>\\b</td><td>退格（Backspace），将光标位置移到前一列</td></tr><tr><td>\\</td><td>反斜线</td></tr><tr><td>’</td><td>单引号</td></tr><tr><td>&quot;</td><td>双引号</td></tr><tr><td>\\</td><td>在字符串行尾的续行符，即一行未完，转到下一行继续写。</td></tr></tbody></table><h1 id=\"python数据类型转换\"><a class=\"markdownIt-Anchor\" href=\"#python数据类型转换\"></a> Python数据类型转换</h1><p>Python 已经为我们提供了多种可实现数据类型转换的函数，如下表：</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换成整数类型</td></tr><tr><td>float(x)</td><td>将x转换成浮点数类型</td></tr><tr><td>complex(real, [,image])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将x转换成字符串</td></tr><tr><td>repr(x)</td><td>将x转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>计算在字符串中的有效 Python 表达式，并返回一个对象</td></tr><tr><td>chr(x)</td><td>将整数x转换为一个字符</td></tr><tr><td>ord(x)</td><td>将一个字符x转换为它对应的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数x转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数 x 转换为一个八进制的字符串</td></tr></tbody></table><h1 id=\"python算术运算符及用法详解\"><a class=\"markdownIt-Anchor\" href=\"#python算术运算符及用法详解\"></a> Python算术运算符及用法详解</h1><p>算术运算符也即数学运算符，用来对数字进行数学运算，比如加减乘除。下表列出了 Python 支持所有基本算术运算符。</p><table><thead><tr><th>运算符</th><th>说明</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>12.45+15</td><td>27.45</td></tr><tr><td>-</td><td>减</td><td>4.56-0.26</td><td>4.3</td></tr><tr><td>*</td><td>乘</td><td>5*3.6</td><td>18.0</td></tr><tr><td>/</td><td>除法</td><td>7/2</td><td>3.5</td></tr><tr><td>//</td><td>整除</td><td>7//2</td><td>3</td></tr><tr><td>%</td><td>取余</td><td>7%2</td><td>1</td></tr><tr><td>**</td><td>幂运算/次方运算，即返回 x 的 y 次方</td><td>2**4</td><td>16，即<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{4}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8141079999999999em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span></span></td></tr></tbody></table><h1 id=\"python赋值运算符\"><a class=\"markdownIt-Anchor\" href=\"#python赋值运算符\"></a> Python赋值运算符</h1><p>赋值运算符用来把右侧的值传递给左侧的变量（或者常量）；可以直接将右侧的值交给左侧的变量，也可以进行某些运算后再交给左侧的变量，比如加减乘除、函数调用、逻辑运算等。</p><p><font color=\"red\">= 和 == 是两个不同的运算符，= 用来赋值，而 == 用来判断两边的值是否相等，千万不要混淆。</font></p><p>Python扩展赋值运算符如下表：</p><div align=\"center\"><img src=\"/image/运算符.png\" width=\"400\"></div><h1 id=\"python位运算符\"><a class=\"markdownIt-Anchor\" href=\"#python位运算符\"></a> Python位运算符</h1><p>Python 位运算按照数据在内存中的二进制位（Bit）进行操作，它一般用于底层开发（算法设计、驱动、图像处理、单片机等），在应用层开发（Web 开发、Linux 运维等）中并不常见。Python 支持的位运算符如下表所示。</p><table><thead><tr><th>位运算符</th><th>说明</th><th>使用形式</th><th>举例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td><td>a&amp;b</td><td>4&amp;5</td></tr><tr><td>|</td><td>按位或</td><td>a|b</td><td>4|5</td></tr><tr><td>^</td><td>按位异或</td><td>a^b</td><td>4^5</td></tr><tr><td>~</td><td>按位取反</td><td>~a</td><td>~4</td></tr><tr><td>&lt;&lt;</td><td>按位左移</td><td>a&lt;&lt;b</td><td>4&lt;&lt;2表示整数4按位左移2位</td></tr><tr><td>&gt;&gt;</td><td>按位右移</td><td>a&gt;&gt;b</td><td>4 &gt;&gt; 2，表示整数 4 按位右移 2 位</td></tr></tbody></table><h1 id=\"python比较运算符\"><a class=\"markdownIt-Anchor\" href=\"#python比较运算符\"></a> Python比较运算符</h1><p>比较运算符，也称关系运算符，用于对常量、变量或表达式的结果进行大小比较。如果这种比较是成立的，则返回True（真），反之则返回False（假）。支持的比较运算符如表所示：<br>比较运算符\t说明</p><table><thead><tr><th>&gt;</th><th>大于，如果&gt;前面的值大于后面的值，则返回 True，否则返回 False。</th></tr></thead><tbody><tr><td>&lt;</td><td>小于，如果&lt;前面的值小于后面的值，则返回 True，否则返回 False。</td></tr><tr><td>==</td><td>等于，如果==两边的值相等，则返回 True，否则返回 False。</td></tr><tr><td>&gt;=</td><td>大于等于（等价于数学中的 ≥），如果&gt;=前面的值大于或者等于后面的值，则返回 True，否则返回 False。</td></tr><tr><td>&lt;=</td><td>小于等于（等价于数学中的 ≤），如果&lt;=前面的值小于或者等于后面的值，则返回 True，否则返回 False。</td></tr><tr><td>!=</td><td>不等于（等价于数学中的 ≠），如果!=两边的值不相等，则返回 True，否则返回 False。</td></tr><tr><td>is</td><td>判断两个变量所引用的对象是否相同，如果相同则返回 True，否则返回 False。</td></tr><tr><td>is not</td><td>判断两个变量所引用的对象是否不相同，如果不相同则返回 True，否则返回 False。</td></tr></tbody></table><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time  <span class=\"comment\">#引入time模块</span></span><br><span class=\"line\">t1 = time.gmtime() <span class=\"comment\"># gmtime()用来获取当前时间</span></span><br><span class=\"line\">t2 =  time.gmtime()</span><br><span class=\"line\">print(t1 == t2) <span class=\"comment\">#输出True</span></span><br><span class=\"line\">print(t1 <span class=\"keyword\">is</span> t2) <span class=\"comment\">#输出False</span></span><br><span class=\"line\"><span class=\"comment\"># t1与t2值相等，但是两个不同的对象</span></span><br></pre></td></tr></table></figure><h1 id=\"python的逻辑运算符及其用法\"><a class=\"markdownIt-Anchor\" href=\"#python的逻辑运算符及其用法\"></a> Python的逻辑运算符及其用法</h1><p>常用逻辑运算符及功能如下：</p><table><thead><tr><th>逻辑运算符</th><th>含义</th><th>基本格式</th><th>说明</th></tr></thead><tbody><tr><td>and</td><td>逻辑与运算，等价于数学中的“且”</td><td>a and b</td><td>当 a 和 b 两个表达式都为假时，a or b 的结果才是假，否则为真。</td></tr><tr><td>or</td><td>逻辑或运算，等价于数学中的“或”</td><td>a or b</td><td>当 a 和 b 两个表达式都为假时，a or b 的结果才是假，否则为真。</td></tr><tr><td>not</td><td>逻辑非运算，等价于数学中的“非”</td><td>not a</td><td>如果 a 为真，那么 not a 的结果为假；如果 a 为假，那么 not a 的结果为真。相当于对 a 取反。</td></tr></tbody></table><p>Python 逻辑运算符用于操作 bool 类型的表达式，执行结果也是 bool 类型，这两点其实都是错误的！实例如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">100</span> <span class=\"keyword\">and</span> <span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">45</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"\"</span> <span class=\"keyword\">or</span> <span class=\"string\">\"http://forwardpeng.club/\"</span>)</span><br><span class=\"line\">http://forwardpeng.club/</span><br></pre></td></tr></table></figure><h2 id=\"逻辑运算符本质\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符本质\"></a> 逻辑运算符本质</h2><p><font color=\"red\">在Python中，and 和or不一定会计算右边表达式的值，有时候只计算左边表达式的值就能得到最终结果。另外，and和or运算符会将其中一个表达式的值作为最终结果，而不是将 True 或者 False 作为最终结果。<br></font><br>对于 and 运算符，两边的值都为真时最终结果才为真，但是只要其中有一个值为假，那么最终结果就是假，所以 Python 按照下面的规则执行 and 运算：</p><ul><li>如果左边表达式的值为假，那么就不用计算右边表达式的值了，因为不管右边表达式的值是什么，都不会影响最终结果，最终结果都是假，此时 and 会把左边表达式的值作为最终结果。</li><li>如果左边表达式的值为真，那么最终值是不能确定的，and 会继续计算右边表达式的值，并将右边表达式的值作为最终结果。</li></ul><p>对于 or 运算符，情况是类似的，两边的值都为假时最终结果才为假，只要其中有一个值为真，那么最终结果就是真，所以 Python 按照下面的规则执行 or 运算：</p><ul><li>如果左边表达式的值为真，那么就不用计算右边表达式的值了，因为不管右边表达式的值是什么，都不会影响最终结果，最终结果都是真，此时 or 会把左边表达式的值作为最终结果。</li><li>如果左边表达式的值为假，那么最终值是不能确定的，or 会继续计算右边表达式的值，并将右边表达式的值作为最终结果。</li></ul><h1 id=\"python-三目运算符用法详解\"><a class=\"markdownIt-Anchor\" href=\"#python-三目运算符用法详解\"></a> Python 三目运算符用法详解</h1><p>if else 实现三目运算符（条件运算符）的格式如下：</p><blockquote><p>exp1 if contion else exp2</p></blockquote><p>Python三目运算符支持嵌套，如此可以构成更加复杂的表达式。在嵌套时需要注意 if和else的配对，如下：</p><blockquote><p>a if a&gt;b else c if c&gt;d else d</p></blockquote><h1 id=\"python运算符优先级和结合性\"><a class=\"markdownIt-Anchor\" href=\"#python运算符优先级和结合性\"></a> Python运算符优先级和结合性</h1><p>Python 支持几十种运算符，被划分成将近二十个优先级，有的运算符优先级不同，有的运算符优先级相同，请看下表。</p><div align=\"center\"><img src=\"/image/运算符优先级.png\" width=\"400\"></div><p>虽然 Python 运算符存在优先级的关系，但不推荐过度依赖运算符的优先级，建议：</p><ul><li>不要把一个表达式写得过于复杂，如果一个表达式过于复杂，可以尝试把它拆分来书写。</li><li>不要过多地依赖运算符的优先级来控制表达式的执行顺序，这样可读性太差，应尽量使用( )来控制表达式的执行顺序。</li></ul><h2 id=\"运算符结合性\"><a class=\"markdownIt-Anchor\" href=\"#运算符结合性\"></a> 运算符结合性</h2><p>结合性，就是当一个表达式中出现多个优先级相同的运算符时，先执行哪个运算符：先执行左边的叫左结合性，先执行右边的叫右结合性。如：100 / 25 * 16，/和*都具有左结合性，因此先执行左边的除法，再执行右边的乘法，最终结果是64。</p><p>Python中大部分运算符都具有左结合性，也就是从左到右执行；只有单目运算符（例如 not 逻辑非运算符）、赋值运算符和三目运算符例外，它们具有右结合性，也就是从右向左执行。表 1 中列出了所有 Python 运算符的结合性。</p><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"},{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"}]}