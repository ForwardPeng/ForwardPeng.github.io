{"title":"Python-字符串","slug":"Python-字符串","date":"2020-04-27T03:06:19.000Z","updated":"2020-04-27T03:51:44.310Z","comments":true,"path":"api/articles/Python-字符串.json","excerpt":null,"covers":null,"content":"<!-- build time:Tue Apr 28 2020 11:56:42 GMT+0800 (GMT+08:00) --><h1 id=\"split分割字符串\"><a class=\"markdownIt-Anchor\" href=\"#split分割字符串\"></a> split()分割字符串</h1><p>split() 方法可以实现将一个字符串按照指定的分隔符切分成多个子串，这些子串会被保存到列表中（不包含分隔符），作为方法的返回值反馈回来。该方法的基本语法格式如下：</p><blockquote><p>str.split(sep,maxsplit)</p></blockquote><p>此方法中各部分参数的含义分别是：</p><ul><li>str：表示要进行分割的字符串；</li><li>sep：用于指定分隔符，可以包含多个字符。此参数默认为 None，表示所有空字符，包括空格、换行符“\\n”、制表符“\\t”等。</li><li>maxsplit：可选参数，用于指定分割的次数，最后列表中子串的个数最多为 maxsplit+1。如果不指定或者指定为 -1，则表示分割次数没有限制。’</li></ul><h1 id=\"join方法合并字符串\"><a class=\"markdownIt-Anchor\" href=\"#join方法合并字符串\"></a> join()方法，合并字符串</h1><p>join() 方法的语法格式如下：</p><blockquote><p>newstr = str.join(iterable)</p></blockquote><p>此方法中各参数的含义如下：</p><ul><li>newstr：表示合并后生成的新字符串；</li><li>str：用于指定合并时的分隔符；</li><li>iterable：做合并操作的源字符串数据，允许以列表、元组等形式提供。</li></ul><h1 id=\"统计字符串出现的次数\"><a class=\"markdownIt-Anchor\" href=\"#统计字符串出现的次数\"></a> 统计字符串出现的次数</h1><p>count 方法用于检索指定字符串在另一字符串中出现的次数，如果检索的字符串不存在，则返回 0，否则返回出现的次数。count方法的语法格式如下：</p><blockquote><p>str.count(sub[,start[,end]])</p></blockquote><p>此方法中，各参数的具体含义如下：</p><ul><li>str：表示原字符串；</li><li>sub：表示要检索的字符串；</li><li>start：指定检索的起始位置，也就是从什么位置开始检测。如果不指定，默认从头开始检索；</li><li>end：指定检索的终止位置，如果不指定，则表示一直检索到结尾。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"c.biancheng.net\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.count(<span class=\"string\">'.'</span>)</span><br></pre></td></tr></table></figure><h1 id=\"find方法检测字符串中是否包含某子串\"><a class=\"markdownIt-Anchor\" href=\"#find方法检测字符串中是否包含某子串\"></a> find()方法，检测字符串中是否包含某子串</h1><p>find() 方法的语法格式如下：</p><blockquote><p>str.find(sub[,start[,end]])</p></blockquote><p>此格式中各参数的含义如下：</p><ul><li>str：表示原字符串；</li><li>sub：表示要检索的目标字符串；</li><li>start：表示开始检索的起始位置。如果不指定，则默认从头开始检索；</li><li>end：表示结束检索的结束位置。如果不指定，则默认一直检索到结尾。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.find(<span class=\"string\">'.'</span>) <span class=\"comment\"># 首次出现</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.find(<span class=\"string\">'.'</span>, <span class=\"number\">2</span>) <span class=\"comment\"># 起始索引位置</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.find(<span class=\"string\">'.'</span>, <span class=\"number\">2</span>,<span class=\"number\">4</span>) <span class=\"comment\"># 区间</span></span><br><span class=\"line\"><span class=\"number\">-1</span></span><br></pre></td></tr></table></figure><p><font color=\"red\">注意，Python 还提供了 rfind() 方法，与 find() 方法最大的不同在于，rfind()是从字符串右边开始检索。</font></p><h1 id=\"index方法检测字符串中是否包含某子串\"><a class=\"markdownIt-Anchor\" href=\"#index方法检测字符串中是否包含某子串\"></a> index()方法：检测字符串中是否包含某子串</h1><p>index() 方法也可以用于检索是否包含指定的字符串，不同之处在于，当指定的字符串不存在时，index() 方法会抛出异常。index()方法的语法格式如下：</p><blockquote><p>str.index(sub[,start[,end]])</p></blockquote><p>此格式中各参数的含义分别是：</p><ul><li>str：表示原字符串；</li><li>sub：表示要检索的子字符串；</li><li>start：表示检索开始的起始位置，如果不指定，默认从头开始检索；</li><li>end：表示检索的结束位置，如果不指定，默认一直检索到结尾。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.index(<span class=\"string\">'z'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;pyshell#49&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    str.index(<span class=\"string\">'z'</span>)</span><br><span class=\"line\">ValueError: substring <span class=\"keyword\">not</span> found</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.rindex(<span class=\"string\">'.'</span>)</span><br><span class=\"line\"><span class=\"number\">11</span></span><br></pre></td></tr></table></figure><h1 id=\"字符串对齐方法ljust-rjust和center\"><a class=\"markdownIt-Anchor\" href=\"#字符串对齐方法ljust-rjust和center\"></a> 字符串对齐方法(ljust()、rjust()和center())</h1><h2 id=\"ljust方法\"><a class=\"markdownIt-Anchor\" href=\"#ljust方法\"></a> ljust()方法</h2><p>ljust() 方法的功能是向指定字符串的右侧填充指定字符，从而达到左对齐文本的目的。ljust() 方法的基本格式如下：</p><blockquote><p>S.ljust(width[, fillchar])</p></blockquote><p>其中各个参数的含义如下：</p><ul><li>S：表示要进行填充的字符串；</li><li>width：表示包括 S 本身长度在内，字符串要占的总长度；</li><li>fillchar：作为可选参数，用来指定填充字符串时所用的字符，默认情况使用空格。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S = <span class=\"string\">'http://c.biancheng.net/python/'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>addr = <span class=\"string\">'http://c.biancheng.net'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(S.ljust(<span class=\"number\">35</span>))</span><br><span class=\"line\">http://c.biancheng.net/python/      </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(addr.ljust(<span class=\"number\">35</span>))</span><br><span class=\"line\">http://c.biancheng.net </span><br><span class=\"line\"><span class=\"comment\"># 该输出结果中除了明显可见的网址字符串外，其后还有空格字符存在，每行一共 35 个字符长度。</span></span><br></pre></td></tr></table></figure><h2 id=\"rjust方法\"><a class=\"markdownIt-Anchor\" href=\"#rjust方法\"></a> rjust()方法</h2><p>rjust() 和 ljust() 方法类似，唯一的不同在于，rjust() 方法是向字符串的左侧填充指定字符，从而达到右对齐文本的目的。rjust() 方法的基本格式如下：</p><blockquote><p>S.rjust(width[, fillchar])</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(S.rjust(<span class=\"number\">35</span>))</span><br><span class=\"line\">     http://c.biancheng.net/python/</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(addr.rjust(<span class=\"number\">35</span>))</span><br><span class=\"line\">             http://c.biancheng.net</span><br></pre></td></tr></table></figure><h2 id=\"center方法\"><a class=\"markdownIt-Anchor\" href=\"#center方法\"></a> center()方法</h2><p>center() 字符串方法与 ljust() 和 rjust() 的用法类似，但它让文本居中，而不是左对齐或右对齐。center() 方法的基本格式如下：</p><blockquote><p>S.center(width[, fillchar])</p></blockquote><p>其中各个参数的含义和 ljust()、rjust()方法相同。</p><h1 id=\"startswith和endswith方法\"><a class=\"markdownIt-Anchor\" href=\"#startswith和endswith方法\"></a> startswith()和endswith()方法</h1><h2 id=\"startswith方法\"><a class=\"markdownIt-Anchor\" href=\"#startswith方法\"></a> startswith()方法</h2><p>startswith() 方法用于检索字符串是否以指定字符串开头，如果是返回 True；反之返回 False。此方法的语法格式如下：</p><blockquote><p>str.startswith(sub[,start[,end]])</p></blockquote><p>此格式中各个参数的具体含义如下：</p><ul><li>str：表示原字符串；</li><li>sub：要检索的子串；</li><li>start：指定检索开始的起始位置索引，如果不指定，则默认从头开始检索；</li><li>end：指定检索的结束位置索引，如果不指定，则默认一直检索在结束。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"c.biancheng.net\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.startswith(<span class=\"string\">\"http\"</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure><h2 id=\"endswith方法\"><a class=\"markdownIt-Anchor\" href=\"#endswith方法\"></a> endswith()方法</h2><p>endswith() 方法用于检索字符串是否以指定字符串结尾，如果是则返回 True；反之则返回 False。该方法的语法格式如下：</p><blockquote><p>str.endswith(sub[,start[,end]])</p></blockquote><p>此格式中各参数的含义如下：</p><ul><li>str：表示原字符串；</li><li>sub：表示要检索的字符串；</li><li>start：指定检索开始时的起始位置索引（字符串第一个字符对应的索引值为 0），如果不指定，默认从头开始检索。</li><li>end：指定检索的结束位置索引，如果不指定，默认一直检索到结束。</li></ul><h1 id=\"字符串大小写转换3种函数及用法\"><a class=\"markdownIt-Anchor\" href=\"#字符串大小写转换3种函数及用法\"></a> 字符串大小写转换（3种）函数及用法</h1><h2 id=\"title方法\"><a class=\"markdownIt-Anchor\" href=\"#title方法\"></a> title()方法</h2><p>title() 方法用于将字符串中每个单词的首字母转为大写，其他字母全部转为小写，转换完成后，此方法会返回转换得到的字符串。如果字符串中没有需要被转换的字符，此方法会将字符串原封不动地返回。title()方法的语法格式如下：</p><blockquote><p>str.title()</p></blockquote><p>其中，str 表示要进行转换的字符串。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"c.biancheng.net\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.title()</span><br><span class=\"line\"><span class=\"string\">'C.Biancheng.Net'</span></span><br></pre></td></tr></table></figure><h2 id=\"lower方法\"><a class=\"markdownIt-Anchor\" href=\"#lower方法\"></a> lower()方法</h2><p>lower() 方法用于将字符串中的所有大写字母转换为小写字母，转换完成后，该方法会返回新得到的字符串。如果字符串中原本就都是小写字母，则该方法会返回原字符串。lower() 方法的语法格式如下：</p><blockquote><p>str.lower()</p></blockquote><h2 id=\"upper方法\"><a class=\"markdownIt-Anchor\" href=\"#upper方法\"></a> upper()方法</h2><p>upper() 的功能和 lower()方法恰好相反，它用于将字符串中的所有小写字母转换为大写字母，和以上两种方法的返回方式相同，即如果转换成功，则返回新字符串；反之，则返回原字符串。upper()方法的语法格式如下：</p><blockquote><p>str.upper()</p></blockquote><h1 id=\"去除字符串中空格删除指定字符的3种方法\"><a class=\"markdownIt-Anchor\" href=\"#去除字符串中空格删除指定字符的3种方法\"></a> 去除字符串中空格（删除指定字符）的3种方法</h1><p>特殊字符，指的是制表符（\\t）、回车符（\\r）、换行符（\\n）等<br>字符串变量提供了 3 种方法来删除字符串中多余的空格和特殊字符，它们分别是：</p><ul><li>strip()：删除字符串前后（左右两侧）的空格或特殊字符。</li><li>lstrip()：删除字符串前面（左边）的空格或特殊字符。</li><li>rstrip()：删除字符串后面（右边）的空格或特殊字符。</li></ul><h2 id=\"strip方法\"><a class=\"markdownIt-Anchor\" href=\"#strip方法\"></a> strip()方法</h2><p>strip() 方法用于删除字符串左右两个的空格和特殊字符，该方法的语法格式为：</p><blockquote><p>str.strip([chars])</p></blockquote><p>其中，str 表示原字符串，[chars] 用来指定要删除的字符，可以同时指定多个，如果不手动指定，则默认会删除空格以及制表符、回车符、换行符等特殊字符。</p><h2 id=\"lstrip方法\"><a class=\"markdownIt-Anchor\" href=\"#lstrip方法\"></a> lstrip()方法</h2><p>lstrip() 方法用于去掉字符串左右的空格和特殊字符。该方法的语法格式如下：</p><blockquote><p>str.lstrip([chars])</p></blockquote><p>其中，str和chars参数的含义，分别同 strip()语法格式中的str和chars完全相同。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"  c.biancheng.net \\t\\n\\r\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.lstrip()</span><br><span class=\"line\"><span class=\"string\">'c.biancheng.net \\t\\n\\r'</span></span><br></pre></td></tr></table></figure><h2 id=\"rstrip方法\"><a class=\"markdownIt-Anchor\" href=\"#rstrip方法\"></a> rstrip()方法</h2><p>rstrip() 方法用于删除字符串右侧的空格和特殊字符，其语法格式为：</p><blockquote><p>str.rstrip([chars])</p></blockquote><p>str和chars参数的含义和前面2种方法语法格式中的参数完全相同。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"  c.biancheng.net \\t\\n\\r\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.rstrip()</span><br><span class=\"line\"><span class=\"string\">'  c.biancheng.net'</span></span><br></pre></td></tr></table></figure><h1 id=\"format格式化输出方法详解\"><a class=\"markdownIt-Anchor\" href=\"#format格式化输出方法详解\"></a> format()格式化输出方法详解</h1><p>format()方法的语法格式如下：</p><blockquote><p>str.format(args)</p></blockquote><p>此方法中，str用于指定字符串的显示样式；args用于指定要进行格式转换的项，如果有多项，之间有逗号进行分割。使用{}和：来指定占位符，其完整的语法格式为：</p><blockquote><p>{ [index][ : [ [fill] align] [sign] [#] [width] [.precision] [type] ] }</p></blockquote><p>格式中用[]括起来的参数都是可选参数，即可以使用，也可以不使用。各个参数的含义如下：</p><ul><li>index：指定：后边设置的格式要作用到 args 中第几个数据，数据的索引值从 0 开始。如果省略此选项，则会根据 args 中数据的先后顺序自动分配。</li><li>fill：指定空白处填充的字符。注意，当填充字符为逗号(,)且作用于整数或浮点数时，该整数（或浮点数）会以逗号分隔的形式输出，例如（1000000会输出 1,000,000）。</li><li>align：指定数据的对齐方式，具体的对齐方式如下表所示。</li></ul><table><thead><tr><th>align</th><th>含义</th></tr></thead><tbody><tr><td>&lt;</td><td>数据左对齐</td></tr><tr><td>&gt;</td><td>数据右对齐</td></tr><tr><td>=</td><td>数据右对齐，同时将符号放置在填充内容的最左侧，该选项只对数字类型有效。</td></tr><tr><td>^</td><td>数据居中，此选项需和 width 参数一起使用。</td></tr></tbody></table><ul><li>sign：指定有无符号数，此参数的值以及对应的含义如下表：</li></ul><table><thead><tr><th>sign参数</th><th>含义</th></tr></thead><tbody><tr><td>+</td><td>正数前加正号，负数前加负号。</td></tr><tr><td>-</td><td>正数前不加正号，负数前加负号。</td></tr><tr><td>空格</td><td>正数前加空格，负数前加负号。</td></tr><tr><td>#</td><td>对于二进制数、八进制数和十六进制数，使用此参数，各进制数前会分别显示 0b、0o、0x前缀；反之则不显示前缀。</td></tr></tbody></table><ul><li>width：指定输出数据时所占的宽度。</li><li>.precision：指定保留的小数位数。</li><li>type：指定输出数据的具体类型，如下表：</li><li></li></ul><table><thead><tr><th>type类型值</th><th>含义</th></tr></thead><tbody><tr><td>s</td><td>对字符串类型格式化。</td></tr><tr><td>d</td><td>十进制整数。</td></tr><tr><td>c</td><td>将十进制整数自动转换成对应的 Unicode 字符。</td></tr><tr><td>e 或者 E</td><td>转换成科学计数法后，再格式化输出。</td></tr><tr><td>g 或 G</td><td>自动在 e 和 f（或 E 和 F）中切换。</td></tr><tr><td>b</td><td>将十进制数自动转换成二进制表示，再格式化输出。</td></tr><tr><td>o</td><td>将十进制数自动转换成八进制表示，再格式化输出。</td></tr><tr><td>x 或者 X</td><td>将十进制数自动转换成十六进制表示，再格式化输出。</td></tr><tr><td>f 或者 F</td><td>转换为浮点数（默认小数点后保留 6 位），再格式化输出。</td></tr><tr><td>%</td><td>显示百分比（默认显示小数点后 6 位）。</td></tr></tbody></table><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"货币形式：&#123;:,d&#125;\"</span>.format(<span class=\"number\">1000000</span>))</span><br><span class=\"line\">货币形式：<span class=\"number\">1</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#科学计数法表示</span></span><br><span class=\"line\"><span class=\"meta\">... </span>print(<span class=\"string\">\"科学计数法：&#123;:E&#125;\"</span>.format(<span class=\"number\">1200.12</span>))</span><br><span class=\"line\">科学计数法：<span class=\"number\">1.200120E+03</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#以十六进制表示</span></span><br><span class=\"line\"><span class=\"meta\">... </span>print(<span class=\"string\">\"100的十六进制：&#123;:#x&#125;\"</span>.format(<span class=\"number\">100</span>))</span><br><span class=\"line\"><span class=\"number\">100</span>的十六进制：<span class=\"number\">0x64</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#输出百分比形式</span></span><br><span class=\"line\"><span class=\"meta\">... </span>print(<span class=\"string\">\"0.01的百分比表示：&#123;:.0%&#125;\"</span>.format(<span class=\"number\">0.01</span>))</span><br><span class=\"line\"><span class=\"number\">0.01</span>的百分比表示：<span class=\"number\">1</span>%</span><br></pre></td></tr></table></figure><h1 id=\"encode和decode方法字符串编码转换\"><a class=\"markdownIt-Anchor\" href=\"#encode和decode方法字符串编码转换\"></a> encode()和decode()方法：字符串编码转换</h1><p>Python 中，有2种常用的字符串类型，分别为str和 bytes 类型，其中 str 用来表示 Unicode 字符，bytes 用来表示二进制数据。str 类型和 bytes 类型之间就需要使用 encode() 和 decode() 方法进行转换。</p><blockquote><p>Python 3.x 默认采用 UTF-8 编码格式，有效地解决了中文乱码的问题。</p></blockquote><h2 id=\"encode方法\"><a class=\"markdownIt-Anchor\" href=\"#encode方法\"></a> encode()方法</h2><p>encode() 方法为字符串类型（str）提供的方法，用于将 str 类型转换成 bytes 类型，这个过程也称为“编码”。encode()方法的语法格式如下：</p><blockquote><p>str.encode([encoding=“utf-8”][,errors=“strict”])</p></blockquote><p><font color=\"red\">注意，格式中用 [] 括起来的参数为可选参数，也就是说，在使用此方法时，可以使用 [] 中的参数，也可以不使用。</font></p><p>errors = &quot;strict&quot;指定错误处理方式，其可选择值可以是：</p><ul><li>strict：遇到非法字符就抛出异常。</li><li>ignore：忽略非法字符。</li><li>replace：用“？”替换非法字符。</li><li>xmlcharrefreplace：使用 xml的字符引用。该参数的默认值为 strict。</li></ul><h2 id=\"decode方法\"><a class=\"markdownIt-Anchor\" href=\"#decode方法\"></a> decode()方法</h2><p>和 encode() 方法正好相反，decode() 方法用于将 bytes 类型的二进制数据转换为 str 类型，这个过程也称为“解码”。decode()方法的语法格式如下：</p><blockquote><p>bytes.decode([encoding=“utf-8”][,errors=“strict”])</p></blockquote><h1 id=\"dir和help帮助函数\"><a class=\"markdownIt-Anchor\" href=\"#dir和help帮助函数\"></a> dir()和help()帮助函数</h1><p>dir() 函数用来列出某个类或者某个模块中的全部内容，包括变量、方法、函数和类等，它的用法为：</p><blockquote><p>dir(obj)</p></blockquote><p>obj表示要查看的对象。obj 可以不写，此时 dir() 会列出当前范围内的变量、方法和定义的类型。</p><p>Python help() 函数用来查看某个函数或者模块的帮助文档，它的用法为：</p><blockquote><p>help(obj)</p></blockquote><p>obj表示要查看的对象。obj可以不写，此时help()会进入帮助子程序。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>help(str.lower)</span><br><span class=\"line\">Help on method_descriptor:</span><br><span class=\"line\"></span><br><span class=\"line\">lower(self, /)</span><br><span class=\"line\">    Return a copy of the string converted to lowercase.</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","more":"<!-- build time:Tue Apr 28 2020 11:56:42 GMT+0800 (GMT+08:00) --><h1 id=\"split分割字符串\"><a class=\"markdownIt-Anchor\" href=\"#split分割字符串\"></a> split()分割字符串</h1><p>split() 方法可以实现将一个字符串按照指定的分隔符切分成多个子串，这些子串会被保存到列表中（不包含分隔符），作为方法的返回值反馈回来。该方法的基本语法格式如下：</p><blockquote><p>str.split(sep,maxsplit)</p></blockquote><p>此方法中各部分参数的含义分别是：</p><ul><li>str：表示要进行分割的字符串；</li><li>sep：用于指定分隔符，可以包含多个字符。此参数默认为 None，表示所有空字符，包括空格、换行符“\\n”、制表符“\\t”等。</li><li>maxsplit：可选参数，用于指定分割的次数，最后列表中子串的个数最多为 maxsplit+1。如果不指定或者指定为 -1，则表示分割次数没有限制。’</li></ul><h1 id=\"join方法合并字符串\"><a class=\"markdownIt-Anchor\" href=\"#join方法合并字符串\"></a> join()方法，合并字符串</h1><p>join() 方法的语法格式如下：</p><blockquote><p>newstr = str.join(iterable)</p></blockquote><p>此方法中各参数的含义如下：</p><ul><li>newstr：表示合并后生成的新字符串；</li><li>str：用于指定合并时的分隔符；</li><li>iterable：做合并操作的源字符串数据，允许以列表、元组等形式提供。</li></ul><h1 id=\"统计字符串出现的次数\"><a class=\"markdownIt-Anchor\" href=\"#统计字符串出现的次数\"></a> 统计字符串出现的次数</h1><p>count 方法用于检索指定字符串在另一字符串中出现的次数，如果检索的字符串不存在，则返回 0，否则返回出现的次数。count方法的语法格式如下：</p><blockquote><p>str.count(sub[,start[,end]])</p></blockquote><p>此方法中，各参数的具体含义如下：</p><ul><li>str：表示原字符串；</li><li>sub：表示要检索的字符串；</li><li>start：指定检索的起始位置，也就是从什么位置开始检测。如果不指定，默认从头开始检索；</li><li>end：指定检索的终止位置，如果不指定，则表示一直检索到结尾。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"c.biancheng.net\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.count(<span class=\"string\">'.'</span>)</span><br></pre></td></tr></table></figure><h1 id=\"find方法检测字符串中是否包含某子串\"><a class=\"markdownIt-Anchor\" href=\"#find方法检测字符串中是否包含某子串\"></a> find()方法，检测字符串中是否包含某子串</h1><p>find() 方法的语法格式如下：</p><blockquote><p>str.find(sub[,start[,end]])</p></blockquote><p>此格式中各参数的含义如下：</p><ul><li>str：表示原字符串；</li><li>sub：表示要检索的目标字符串；</li><li>start：表示开始检索的起始位置。如果不指定，则默认从头开始检索；</li><li>end：表示结束检索的结束位置。如果不指定，则默认一直检索到结尾。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.find(<span class=\"string\">'.'</span>) <span class=\"comment\"># 首次出现</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.find(<span class=\"string\">'.'</span>, <span class=\"number\">2</span>) <span class=\"comment\"># 起始索引位置</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.find(<span class=\"string\">'.'</span>, <span class=\"number\">2</span>,<span class=\"number\">4</span>) <span class=\"comment\"># 区间</span></span><br><span class=\"line\"><span class=\"number\">-1</span></span><br></pre></td></tr></table></figure><p><font color=\"red\">注意，Python 还提供了 rfind() 方法，与 find() 方法最大的不同在于，rfind()是从字符串右边开始检索。</font></p><h1 id=\"index方法检测字符串中是否包含某子串\"><a class=\"markdownIt-Anchor\" href=\"#index方法检测字符串中是否包含某子串\"></a> index()方法：检测字符串中是否包含某子串</h1><p>index() 方法也可以用于检索是否包含指定的字符串，不同之处在于，当指定的字符串不存在时，index() 方法会抛出异常。index()方法的语法格式如下：</p><blockquote><p>str.index(sub[,start[,end]])</p></blockquote><p>此格式中各参数的含义分别是：</p><ul><li>str：表示原字符串；</li><li>sub：表示要检索的子字符串；</li><li>start：表示检索开始的起始位置，如果不指定，默认从头开始检索；</li><li>end：表示检索的结束位置，如果不指定，默认一直检索到结尾。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.index(<span class=\"string\">'z'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;pyshell#49&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    str.index(<span class=\"string\">'z'</span>)</span><br><span class=\"line\">ValueError: substring <span class=\"keyword\">not</span> found</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.rindex(<span class=\"string\">'.'</span>)</span><br><span class=\"line\"><span class=\"number\">11</span></span><br></pre></td></tr></table></figure><h1 id=\"字符串对齐方法ljust-rjust和center\"><a class=\"markdownIt-Anchor\" href=\"#字符串对齐方法ljust-rjust和center\"></a> 字符串对齐方法(ljust()、rjust()和center())</h1><h2 id=\"ljust方法\"><a class=\"markdownIt-Anchor\" href=\"#ljust方法\"></a> ljust()方法</h2><p>ljust() 方法的功能是向指定字符串的右侧填充指定字符，从而达到左对齐文本的目的。ljust() 方法的基本格式如下：</p><blockquote><p>S.ljust(width[, fillchar])</p></blockquote><p>其中各个参数的含义如下：</p><ul><li>S：表示要进行填充的字符串；</li><li>width：表示包括 S 本身长度在内，字符串要占的总长度；</li><li>fillchar：作为可选参数，用来指定填充字符串时所用的字符，默认情况使用空格。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S = <span class=\"string\">'http://c.biancheng.net/python/'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>addr = <span class=\"string\">'http://c.biancheng.net'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(S.ljust(<span class=\"number\">35</span>))</span><br><span class=\"line\">http://c.biancheng.net/python/      </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(addr.ljust(<span class=\"number\">35</span>))</span><br><span class=\"line\">http://c.biancheng.net </span><br><span class=\"line\"><span class=\"comment\"># 该输出结果中除了明显可见的网址字符串外，其后还有空格字符存在，每行一共 35 个字符长度。</span></span><br></pre></td></tr></table></figure><h2 id=\"rjust方法\"><a class=\"markdownIt-Anchor\" href=\"#rjust方法\"></a> rjust()方法</h2><p>rjust() 和 ljust() 方法类似，唯一的不同在于，rjust() 方法是向字符串的左侧填充指定字符，从而达到右对齐文本的目的。rjust() 方法的基本格式如下：</p><blockquote><p>S.rjust(width[, fillchar])</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(S.rjust(<span class=\"number\">35</span>))</span><br><span class=\"line\">     http://c.biancheng.net/python/</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(addr.rjust(<span class=\"number\">35</span>))</span><br><span class=\"line\">             http://c.biancheng.net</span><br></pre></td></tr></table></figure><h2 id=\"center方法\"><a class=\"markdownIt-Anchor\" href=\"#center方法\"></a> center()方法</h2><p>center() 字符串方法与 ljust() 和 rjust() 的用法类似，但它让文本居中，而不是左对齐或右对齐。center() 方法的基本格式如下：</p><blockquote><p>S.center(width[, fillchar])</p></blockquote><p>其中各个参数的含义和 ljust()、rjust()方法相同。</p><h1 id=\"startswith和endswith方法\"><a class=\"markdownIt-Anchor\" href=\"#startswith和endswith方法\"></a> startswith()和endswith()方法</h1><h2 id=\"startswith方法\"><a class=\"markdownIt-Anchor\" href=\"#startswith方法\"></a> startswith()方法</h2><p>startswith() 方法用于检索字符串是否以指定字符串开头，如果是返回 True；反之返回 False。此方法的语法格式如下：</p><blockquote><p>str.startswith(sub[,start[,end]])</p></blockquote><p>此格式中各个参数的具体含义如下：</p><ul><li>str：表示原字符串；</li><li>sub：要检索的子串；</li><li>start：指定检索开始的起始位置索引，如果不指定，则默认从头开始检索；</li><li>end：指定检索的结束位置索引，如果不指定，则默认一直检索在结束。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"c.biancheng.net\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.startswith(<span class=\"string\">\"http\"</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure><h2 id=\"endswith方法\"><a class=\"markdownIt-Anchor\" href=\"#endswith方法\"></a> endswith()方法</h2><p>endswith() 方法用于检索字符串是否以指定字符串结尾，如果是则返回 True；反之则返回 False。该方法的语法格式如下：</p><blockquote><p>str.endswith(sub[,start[,end]])</p></blockquote><p>此格式中各参数的含义如下：</p><ul><li>str：表示原字符串；</li><li>sub：表示要检索的字符串；</li><li>start：指定检索开始时的起始位置索引（字符串第一个字符对应的索引值为 0），如果不指定，默认从头开始检索。</li><li>end：指定检索的结束位置索引，如果不指定，默认一直检索到结束。</li></ul><h1 id=\"字符串大小写转换3种函数及用法\"><a class=\"markdownIt-Anchor\" href=\"#字符串大小写转换3种函数及用法\"></a> 字符串大小写转换（3种）函数及用法</h1><h2 id=\"title方法\"><a class=\"markdownIt-Anchor\" href=\"#title方法\"></a> title()方法</h2><p>title() 方法用于将字符串中每个单词的首字母转为大写，其他字母全部转为小写，转换完成后，此方法会返回转换得到的字符串。如果字符串中没有需要被转换的字符，此方法会将字符串原封不动地返回。title()方法的语法格式如下：</p><blockquote><p>str.title()</p></blockquote><p>其中，str 表示要进行转换的字符串。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"c.biancheng.net\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.title()</span><br><span class=\"line\"><span class=\"string\">'C.Biancheng.Net'</span></span><br></pre></td></tr></table></figure><h2 id=\"lower方法\"><a class=\"markdownIt-Anchor\" href=\"#lower方法\"></a> lower()方法</h2><p>lower() 方法用于将字符串中的所有大写字母转换为小写字母，转换完成后，该方法会返回新得到的字符串。如果字符串中原本就都是小写字母，则该方法会返回原字符串。lower() 方法的语法格式如下：</p><blockquote><p>str.lower()</p></blockquote><h2 id=\"upper方法\"><a class=\"markdownIt-Anchor\" href=\"#upper方法\"></a> upper()方法</h2><p>upper() 的功能和 lower()方法恰好相反，它用于将字符串中的所有小写字母转换为大写字母，和以上两种方法的返回方式相同，即如果转换成功，则返回新字符串；反之，则返回原字符串。upper()方法的语法格式如下：</p><blockquote><p>str.upper()</p></blockquote><h1 id=\"去除字符串中空格删除指定字符的3种方法\"><a class=\"markdownIt-Anchor\" href=\"#去除字符串中空格删除指定字符的3种方法\"></a> 去除字符串中空格（删除指定字符）的3种方法</h1><p>特殊字符，指的是制表符（\\t）、回车符（\\r）、换行符（\\n）等<br>字符串变量提供了 3 种方法来删除字符串中多余的空格和特殊字符，它们分别是：</p><ul><li>strip()：删除字符串前后（左右两侧）的空格或特殊字符。</li><li>lstrip()：删除字符串前面（左边）的空格或特殊字符。</li><li>rstrip()：删除字符串后面（右边）的空格或特殊字符。</li></ul><h2 id=\"strip方法\"><a class=\"markdownIt-Anchor\" href=\"#strip方法\"></a> strip()方法</h2><p>strip() 方法用于删除字符串左右两个的空格和特殊字符，该方法的语法格式为：</p><blockquote><p>str.strip([chars])</p></blockquote><p>其中，str 表示原字符串，[chars] 用来指定要删除的字符，可以同时指定多个，如果不手动指定，则默认会删除空格以及制表符、回车符、换行符等特殊字符。</p><h2 id=\"lstrip方法\"><a class=\"markdownIt-Anchor\" href=\"#lstrip方法\"></a> lstrip()方法</h2><p>lstrip() 方法用于去掉字符串左右的空格和特殊字符。该方法的语法格式如下：</p><blockquote><p>str.lstrip([chars])</p></blockquote><p>其中，str和chars参数的含义，分别同 strip()语法格式中的str和chars完全相同。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"  c.biancheng.net \\t\\n\\r\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.lstrip()</span><br><span class=\"line\"><span class=\"string\">'c.biancheng.net \\t\\n\\r'</span></span><br></pre></td></tr></table></figure><h2 id=\"rstrip方法\"><a class=\"markdownIt-Anchor\" href=\"#rstrip方法\"></a> rstrip()方法</h2><p>rstrip() 方法用于删除字符串右侧的空格和特殊字符，其语法格式为：</p><blockquote><p>str.rstrip([chars])</p></blockquote><p>str和chars参数的含义和前面2种方法语法格式中的参数完全相同。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"  c.biancheng.net \\t\\n\\r\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.rstrip()</span><br><span class=\"line\"><span class=\"string\">'  c.biancheng.net'</span></span><br></pre></td></tr></table></figure><h1 id=\"format格式化输出方法详解\"><a class=\"markdownIt-Anchor\" href=\"#format格式化输出方法详解\"></a> format()格式化输出方法详解</h1><p>format()方法的语法格式如下：</p><blockquote><p>str.format(args)</p></blockquote><p>此方法中，str用于指定字符串的显示样式；args用于指定要进行格式转换的项，如果有多项，之间有逗号进行分割。使用{}和：来指定占位符，其完整的语法格式为：</p><blockquote><p>{ [index][ : [ [fill] align] [sign] [#] [width] [.precision] [type] ] }</p></blockquote><p>格式中用[]括起来的参数都是可选参数，即可以使用，也可以不使用。各个参数的含义如下：</p><ul><li>index：指定：后边设置的格式要作用到 args 中第几个数据，数据的索引值从 0 开始。如果省略此选项，则会根据 args 中数据的先后顺序自动分配。</li><li>fill：指定空白处填充的字符。注意，当填充字符为逗号(,)且作用于整数或浮点数时，该整数（或浮点数）会以逗号分隔的形式输出，例如（1000000会输出 1,000,000）。</li><li>align：指定数据的对齐方式，具体的对齐方式如下表所示。</li></ul><table><thead><tr><th>align</th><th>含义</th></tr></thead><tbody><tr><td>&lt;</td><td>数据左对齐</td></tr><tr><td>&gt;</td><td>数据右对齐</td></tr><tr><td>=</td><td>数据右对齐，同时将符号放置在填充内容的最左侧，该选项只对数字类型有效。</td></tr><tr><td>^</td><td>数据居中，此选项需和 width 参数一起使用。</td></tr></tbody></table><ul><li>sign：指定有无符号数，此参数的值以及对应的含义如下表：</li></ul><table><thead><tr><th>sign参数</th><th>含义</th></tr></thead><tbody><tr><td>+</td><td>正数前加正号，负数前加负号。</td></tr><tr><td>-</td><td>正数前不加正号，负数前加负号。</td></tr><tr><td>空格</td><td>正数前加空格，负数前加负号。</td></tr><tr><td>#</td><td>对于二进制数、八进制数和十六进制数，使用此参数，各进制数前会分别显示 0b、0o、0x前缀；反之则不显示前缀。</td></tr></tbody></table><ul><li>width：指定输出数据时所占的宽度。</li><li>.precision：指定保留的小数位数。</li><li>type：指定输出数据的具体类型，如下表：</li><li></li></ul><table><thead><tr><th>type类型值</th><th>含义</th></tr></thead><tbody><tr><td>s</td><td>对字符串类型格式化。</td></tr><tr><td>d</td><td>十进制整数。</td></tr><tr><td>c</td><td>将十进制整数自动转换成对应的 Unicode 字符。</td></tr><tr><td>e 或者 E</td><td>转换成科学计数法后，再格式化输出。</td></tr><tr><td>g 或 G</td><td>自动在 e 和 f（或 E 和 F）中切换。</td></tr><tr><td>b</td><td>将十进制数自动转换成二进制表示，再格式化输出。</td></tr><tr><td>o</td><td>将十进制数自动转换成八进制表示，再格式化输出。</td></tr><tr><td>x 或者 X</td><td>将十进制数自动转换成十六进制表示，再格式化输出。</td></tr><tr><td>f 或者 F</td><td>转换为浮点数（默认小数点后保留 6 位），再格式化输出。</td></tr><tr><td>%</td><td>显示百分比（默认显示小数点后 6 位）。</td></tr></tbody></table><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"货币形式：&#123;:,d&#125;\"</span>.format(<span class=\"number\">1000000</span>))</span><br><span class=\"line\">货币形式：<span class=\"number\">1</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#科学计数法表示</span></span><br><span class=\"line\"><span class=\"meta\">... </span>print(<span class=\"string\">\"科学计数法：&#123;:E&#125;\"</span>.format(<span class=\"number\">1200.12</span>))</span><br><span class=\"line\">科学计数法：<span class=\"number\">1.200120E+03</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#以十六进制表示</span></span><br><span class=\"line\"><span class=\"meta\">... </span>print(<span class=\"string\">\"100的十六进制：&#123;:#x&#125;\"</span>.format(<span class=\"number\">100</span>))</span><br><span class=\"line\"><span class=\"number\">100</span>的十六进制：<span class=\"number\">0x64</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#输出百分比形式</span></span><br><span class=\"line\"><span class=\"meta\">... </span>print(<span class=\"string\">\"0.01的百分比表示：&#123;:.0%&#125;\"</span>.format(<span class=\"number\">0.01</span>))</span><br><span class=\"line\"><span class=\"number\">0.01</span>的百分比表示：<span class=\"number\">1</span>%</span><br></pre></td></tr></table></figure><h1 id=\"encode和decode方法字符串编码转换\"><a class=\"markdownIt-Anchor\" href=\"#encode和decode方法字符串编码转换\"></a> encode()和decode()方法：字符串编码转换</h1><p>Python 中，有2种常用的字符串类型，分别为str和 bytes 类型，其中 str 用来表示 Unicode 字符，bytes 用来表示二进制数据。str 类型和 bytes 类型之间就需要使用 encode() 和 decode() 方法进行转换。</p><blockquote><p>Python 3.x 默认采用 UTF-8 编码格式，有效地解决了中文乱码的问题。</p></blockquote><h2 id=\"encode方法\"><a class=\"markdownIt-Anchor\" href=\"#encode方法\"></a> encode()方法</h2><p>encode() 方法为字符串类型（str）提供的方法，用于将 str 类型转换成 bytes 类型，这个过程也称为“编码”。encode()方法的语法格式如下：</p><blockquote><p>str.encode([encoding=“utf-8”][,errors=“strict”])</p></blockquote><p><font color=\"red\">注意，格式中用 [] 括起来的参数为可选参数，也就是说，在使用此方法时，可以使用 [] 中的参数，也可以不使用。</font></p><p>errors = &quot;strict&quot;指定错误处理方式，其可选择值可以是：</p><ul><li>strict：遇到非法字符就抛出异常。</li><li>ignore：忽略非法字符。</li><li>replace：用“？”替换非法字符。</li><li>xmlcharrefreplace：使用 xml的字符引用。该参数的默认值为 strict。</li></ul><h2 id=\"decode方法\"><a class=\"markdownIt-Anchor\" href=\"#decode方法\"></a> decode()方法</h2><p>和 encode() 方法正好相反，decode() 方法用于将 bytes 类型的二进制数据转换为 str 类型，这个过程也称为“解码”。decode()方法的语法格式如下：</p><blockquote><p>bytes.decode([encoding=“utf-8”][,errors=“strict”])</p></blockquote><h1 id=\"dir和help帮助函数\"><a class=\"markdownIt-Anchor\" href=\"#dir和help帮助函数\"></a> dir()和help()帮助函数</h1><p>dir() 函数用来列出某个类或者某个模块中的全部内容，包括变量、方法、函数和类等，它的用法为：</p><blockquote><p>dir(obj)</p></blockquote><p>obj表示要查看的对象。obj 可以不写，此时 dir() 会列出当前范围内的变量、方法和定义的类型。</p><p>Python help() 函数用来查看某个函数或者模块的帮助文档，它的用法为：</p><blockquote><p>help(obj)</p></blockquote><p>obj表示要查看的对象。obj可以不写，此时help()会进入帮助子程序。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>help(str.lower)</span><br><span class=\"line\">Help on method_descriptor:</span><br><span class=\"line\"></span><br><span class=\"line\">lower(self, /)</span><br><span class=\"line\">    Return a copy of the string converted to lowercase.</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"},{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"}]}