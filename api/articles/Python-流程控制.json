{"title":"Python-流程控制","slug":"Python-流程控制","date":"2020-04-27T03:55:54.000Z","updated":"2020-04-27T09:47:49.784Z","comments":true,"path":"api/articles/Python-流程控制.json","excerpt":null,"covers":null,"content":"<!-- build time:Sun May 03 2020 17:49:41 GMT+0800 (GMT+08:00) --><h1 id=\"assert断言\"><a class=\"markdownIt-Anchor\" href=\"#assert断言\"></a> assert断言</h1><p>assert 语句的语法结构为：</p><blockquote><p>assert 表达式</p></blockquote><p>assert 语句的执行流程可以用 if 判断语句表示，如下所示：</p><blockquote><p>if 表达式==True:<br>程序继续执行<br>else:<br>程序报 AssertionError 错误</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#price 为原价，discount 为折扣力度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply_discount</span><span class=\"params\">(price, discount)</span>:</span></span><br><span class=\"line\">    updated_price = price * (<span class=\"number\">1</span> - discount)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">0</span> &lt;= updated_price &lt;= price, <span class=\"string\">'折扣价应在 0 和原价之间'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> updated_price</span><br><span class=\"line\"><span class=\"comment\"># 添加了一个 assert 语句，用来检查折后价格，这里要求新折扣价格必须大于等于 0、小于等于原来的价格，否则就抛出异常。</span></span><br></pre></td></tr></table></figure><p>assert 的加入可以有效预防程序漏洞，提高程序的健壮性。循环嵌套结构的代码，Python解释器执行的流程为：</p><ul><li>当外层循环条件为 True 时，则执行外层循环结构中的循环体；</li><li>外层循环体中包含了普通程序和内循环，当内层循环的循环条件为 True 时会执行此循环中的循环体，直到内层循环条件为 False，跳出内循环；</li><li>如果此时外层循环的条件仍为 True，则返回第 2 步，继续执行外层循环体，直到外层循环的循环条件为False；</li><li>当内层循环的循环条件为False，且外层循环的循环条件也为False，则整个嵌套循环才算执行完毕。</li></ul><h1 id=\"zip函数及其用法\"><a class=\"markdownIt-Anchor\" href=\"#zip函数及其用法\"></a> zip函数及其用法</h1><p>zip() 函数是 Python 内置函数之一，它可以将多个序列（列表、元组、字典、集合、字符串以及 range() 区间构成的列表）“压缩”成一个 zip 对象。所谓“压缩”，其实就是将这些序列中对应位置的元素重新组合，生成一个个新的元组。</p><blockquote><p>语法格式：zip(iterable, …)</p></blockquote><p>其中iterable,… 表示多个列表、元组、字典、集合、字符串，甚至还可以为range()区间。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list = [<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_tuple = (<span class=\"number\">21</span>,<span class=\"number\">22</span>,<span class=\"number\">23</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print([x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> zip(my_list,my_tuple)])</span><br><span class=\"line\">[(<span class=\"number\">11</span>, <span class=\"number\">21</span>), (<span class=\"number\">12</span>, <span class=\"number\">22</span>), (<span class=\"number\">13</span>, <span class=\"number\">23</span>)]</span><br></pre></td></tr></table></figure><h1 id=\"reversed函数及用法\"><a class=\"markdownIt-Anchor\" href=\"#reversed函数及用法\"></a> reversed函数及用法</h1><p>对于给定的序列（包括列表、元组、字符串以及 range(n) 区间），该函数可以返回一个逆序序列的迭代器（用于遍历该逆序序列）reserved()函数的语法格式如下：</p><blockquote><p>reversed(seq)</p></blockquote><p>其中，seq可以是列表，元素，字符串以及range()生成的区间列表。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print([x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> reversed((<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>))])</span><br><span class=\"line\">[<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure><h1 id=\"sorted函数及用法\"><a class=\"markdownIt-Anchor\" href=\"#sorted函数及用法\"></a> sorted函数及用法</h1><p>sorted() 作为 Python 内置函数之一，其功能是对序列（列表、元组、字典、集合、还包括字符串）进行排序。sorted()函数的基本语法格式如下：</p><blockquote><p>list = sorted(iterable, key=None, reverse=False)</p></blockquote><p>其中，iterable表示指定的序列，key 参数可以自定义排序规则；reverse参数指定以升序（False，默认）还是降序（True）进行排序。sorted()函数会返回一个排好序的列表。</p><p><font color=\"red\">注意，key 参数和 reverse 参数是可选参数，即可以使用，也可以忽略。</font></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = &#123;<span class=\"number\">4</span>:<span class=\"number\">1</span>,\\</span><br><span class=\"line\"><span class=\"meta\">... </span>     <span class=\"number\">5</span>:<span class=\"number\">2</span>,\\</span><br><span class=\"line\"><span class=\"meta\">... </span>     <span class=\"number\">3</span>:<span class=\"number\">3</span>,\\</span><br><span class=\"line\"><span class=\"meta\">... </span>     <span class=\"number\">2</span>:<span class=\"number\">6</span>,\\</span><br><span class=\"line\"><span class=\"meta\">... </span>     <span class=\"number\">1</span>:<span class=\"number\">8</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(sorted(a.items()))</span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"number\">8</span>), (<span class=\"number\">2</span>, <span class=\"number\">6</span>), (<span class=\"number\">3</span>, <span class=\"number\">3</span>), (<span class=\"number\">4</span>, <span class=\"number\">1</span>), (<span class=\"number\">5</span>, <span class=\"number\">2</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(sorted(a.values()))</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"comment\"># 函数默认对序列中元素进行升序排序，通过手动将其reverse参数值改为True，可实现降序排序。</span></span><br></pre></td></tr></table></figure><p>sorted()函数时，还可传入一个 key参数，它可以接受一个函数，该函数的功能是指定sorted()函数按照什么标准进行排序，实例如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>chars = [<span class=\"string\">'sss'</span>, <span class=\"string\">'ss'</span>, <span class=\"string\">'sssss'</span>, <span class=\"string\">'s'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(sorted(chars))</span><br><span class=\"line\">[<span class=\"string\">'s'</span>, <span class=\"string\">'ss'</span>, <span class=\"string\">'sss'</span>, <span class=\"string\">'sssss'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(sorted(chars, key=<span class=\"keyword\">lambda</span> x:len(x)))</span><br><span class=\"line\">[<span class=\"string\">'s'</span>, <span class=\"string\">'ss'</span>, <span class=\"string\">'sss'</span>, <span class=\"string\">'sssss'</span>]</span><br></pre></td></tr></table></figure><h1 id=\"函数可变参数args及kwargs\"><a class=\"markdownIt-Anchor\" href=\"#函数可变参数args及kwargs\"></a> 函数可变参数*args及**kwargs</h1><p>Python函数可变参数*args及**kwargs，先给出标准答案：</p><ul><li><p>*args是arguments单词缩写，表示任意多个无名参数，是一个tuple，如 (1,2,3,‘a’,‘b’,‘c’)</p></li><li><p>**kwargs是keyword arguments单词缩写,表示关键字参数，是一个dict，如{‘a’:1,‘b’:2,‘c’:3}，*args参数必须在**kwargs前</p></li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(*args,**kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'args='</span>,args</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'kwargs='</span>,kwargs</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'*'</span>*<span class=\"number\">20</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#只传参数*args=(1,2,3)</span></span><br><span class=\"line\">    foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#只传参数**kwargs=dict(a=1,b=2,c=3)</span></span><br><span class=\"line\">    foo(a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#传入参数*args=(1,2,3)</span></span><br><span class=\"line\">    <span class=\"comment\">#传入参数**kwargs=dict(a=1,b=2,c=3)</span></span><br><span class=\"line\">    foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#传入参数*args=(1,'b','c')</span></span><br><span class=\"line\">    <span class=\"comment\">#传入参数**kwargs=dict(a=1,b='b',c='c')</span></span><br><span class=\"line\">    foo(<span class=\"number\">1</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,a=<span class=\"number\">1</span>,b=<span class=\"string\">'b'</span>,c=<span class=\"string\">'c'</span>)</span><br><span class=\"line\">输出：    </span><br><span class=\"line\">args= (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">kwargs= &#123;&#125;</span><br><span class=\"line\">********************</span><br><span class=\"line\">args= ()</span><br><span class=\"line\">kwargs= &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">3</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">********************</span><br><span class=\"line\">args= (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">kwargs= &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">3</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">********************</span><br><span class=\"line\">args= (<span class=\"number\">1</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>)</span><br><span class=\"line\">kwargs= &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'b'</span>&#125;</span><br><span class=\"line\">********************</span><br></pre></td></tr></table></figure><h2 id=\"逆向参数收集\"><a class=\"markdownIt-Anchor\" href=\"#逆向参数收集\"></a> 逆向参数收集</h2><p>在列表、元组前添加 *，在字典前添加 **。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(a)</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(b)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>vals_1 = [<span class=\"number\">10</span>,<span class=\"number\">20</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test(*vals_1)</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>vals_2 = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">10</span>, <span class=\"string\">'b'</span>:<span class=\"number\">20</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test(*vals_2)</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test(**vals_2)</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br></pre></td></tr></table></figure><h1 id=\"none空值及其用法\"><a class=\"markdownIt-Anchor\" href=\"#none空值及其用法\"></a> None(空值)及其用法</h1><p>有一个特殊的常量None（N 必须大写）。和False不同，它不表示0，也不表示空字符串，而表示没有值，也就是空值。</p><p>这里的空值并不代表空对象，即None和[]、“” 不同：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">None</span> <span class=\"keyword\">is</span> []</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">None</span> <span class=\"keyword\">is</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"literal\">None</span>)</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">NoneType</span>'&gt;</span></span><br></pre></td></tr></table></figure><p><font color=\"red\">None 是 NoneType 数据类型的唯一值（其他编程语言可能称这个值为 null、nil 或 undefined），也就是说，我们不能再创建其它 NoneType 类型的变量，但是可以将 None 赋值给任何变量。如果希望变量中存储的东西不与任何其它值混淆，就可以使用 None。</font></p><h1 id=\"partial偏函数及其用法\"><a class=\"markdownIt-Anchor\" href=\"#partial偏函数及其用法\"></a> partial偏函数及其用法</h1><p>简单的理解偏函数，它是对原始函数的二次封装，是将现有函数的部分参数预先绑定为指定值，从而得到一个新的函数，该函数就称为偏函数。相比原函数，偏函数具有较少的可变参数，从而降低了函数调用的难度。</p><p>定义偏函数，需使用 partial 关键字（位于 functools 模块中），其语法格式如下：</p><ul><li>偏函数名 = partial(func, *args, **kwargs)</li></ul><p>其中，func 指的是要封装的原函数，*args 和 **kwargs 分别用于接收无关键字实参和关键字实参。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mod</span><span class=\"params\">( n, m )</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>  <span class=\"keyword\">return</span> n % m</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mod_by_100 = partial( mod, <span class=\"number\">100</span> )</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(mod( <span class=\"number\">100</span>, <span class=\"number\">7</span> ))</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(mod_by_100( <span class=\"number\">7</span> ))</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure><h1 id=\"变量作用域全局变量和局部变量\"><a class=\"markdownIt-Anchor\" href=\"#变量作用域全局变量和局部变量\"></a> 变量作用域(全局变量和局部变量)</h1><p>作用域（Scope），就是变量的有效范围，就是变量可以在哪个范围以内使用。有些变量可以在整段代码的任意位置使用，有些变量只能在函数内部使用，有些变量只能在 for 循环内部使用。变量的作用域由变量的定义位置决定，在不同位置定义的变量，它的作用域是不一样的。本节我们只讲解两种变量，局部变量和全局变量。</p><h2 id=\"局部变量\"><a class=\"markdownIt-Anchor\" href=\"#局部变量\"></a> 局部变量</h2><p>在函数内部定义的变量，它的作用域也仅限于函数内部，出了函数就不能使用了，我们将这样的变量称为局部变量（Local Variable）。</p><p>要知道，当函数被执行时，Python 会为其分配一块临时的存储空间，所有在函数内部定义的变量，都会存储在这块空间中。而在函数执行完毕后，这块临时存储空间随即会被释放并回收，该空间中存储的变量自然也就无法再被使用。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    add = <span class=\"string\">\"http://c.biancheng.net/python/\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"函数内部 add =\"</span>,add)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>demo()</span><br><span class=\"line\">函数内部 add = http://c.biancheng.net/python/</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"函数外部 add =\"</span>,add)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">NameError: name <span class=\"string\">'add'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure><h2 id=\"全局变量\"><a class=\"markdownIt-Anchor\" href=\"#全局变量\"></a> 全局变量</h2><p>在函数内部定义变量，Python 还允许在所有函数的外部定义变量，这样的变量称为全局变量（Global Variable）。和局部变量不同，全局变量的默认作用域是整个程序，即全局变量既可以在各个函数的外部使用，也可以在各函数内部使用。</p><p>定义全局变量的方式有以下2种：</p><ul><li>在函数体外定义的变量，一定是全局变量，如：</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add = <span class=\"string\">\"http://c.biancheng.net/shell/\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">text</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"函数体内访问：\"</span>,add)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text()</span><br><span class=\"line\">函数体内访问： http://c.biancheng.net/shell/</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'函数体外访问：'</span>,add)</span><br><span class=\"line\">函数体外访问： http://c.biancheng.net/shell/</span><br></pre></td></tr></table></figure><ul><li>在函数体内定义全局变量。即使用 global关键字对变量进行修饰后，该变量就会变为全局变量</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">text</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">global</span> add</span><br><span class=\"line\"><span class=\"meta\">... </span>    add= <span class=\"string\">\"http://c.biancheng.net/java/\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"函数体内访问：\"</span>,add)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text()</span><br><span class=\"line\">函数体内访问： http://c.biancheng.net/java/</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(add)</span><br><span class=\"line\">http://c.biancheng.net/java/</span><br></pre></td></tr></table></figure><p><font color=\"red\">注意，在使用 global 关键字修饰变量名时，不能直接给变量赋初值，否则会引发语法错误。</font></p><h2 id=\"获取指定作用域范围中的变量\"><a class=\"markdownIt-Anchor\" href=\"#获取指定作用域范围中的变量\"></a> 获取指定作用域范围中的变量</h2><p><strong>1.globals()函数</strong></p><p>globals()函数为Python的内置函数，它可以返回一个包含全局范围内所有变量的字典，该字典中的每个键值对，键为变量名，值为该变量的值。globals()函数返回的字典中，会默认包含有很多变量。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>globals()[<span class=\"string\">'Pyname'</span>] = <span class=\"string\">\"Python入门教程\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(Pyname)</span><br><span class=\"line\">Python入门教程</span><br></pre></td></tr></table></figure><p><strong>2.locals()函数</strong></p><p>locals()函数也是Python内置函数之一，通过调用该函数，我们可以得到一个包含当前作用域内所有变量的字典。这里所谓的“当前作用域”指的是，在函数内部调用 locals() 函数，会获得包含所有局部变量的字典；而在全局范文内调用 locals() 函数，其功能和 globals() 函数相同。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Pyname = <span class=\"string\">\"Python教程\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Pyadd = <span class=\"string\">\"http://c.biancheng.net/python/\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">text</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"comment\">#局部变量</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    Shename = <span class=\"string\">\"shell教程\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    Sheadd= <span class=\"string\">\"http://c.biancheng.net/shell/\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"函数内部的 locals:\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(locals())</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text()</span><br><span class=\"line\">函数内部的 locals:</span><br><span class=\"line\">&#123;<span class=\"string\">'Sheadd'</span>: <span class=\"string\">'http://c.biancheng.net/shell/'</span>, <span class=\"string\">'Shename'</span>: <span class=\"string\">'shell教程'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"函数外部的 locals:\"</span>)</span><br><span class=\"line\">函数外部的 locals:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(locals())</span><br></pre></td></tr></table></figure><p><strong>3.vars(object)</strong></p><p>vars() 函数也是 Python 内置函数，其功能是返回一个指定 object 对象范围内所有变量组成的字典。如果不传入object 参数，vars() 和 locals() 的作用完全相同。</p><h1 id=\"同名的全局变量\"><a class=\"markdownIt-Anchor\" href=\"#同名的全局变量\"></a> 同名的全局变量</h1><p>解决方式：</p><p>方式1：在函数中要定义局部变量时不要与全局变量同名， 即在numCheck( )中定义的局部变量换个名。</p><p>方式2：进入函数时先定义与全局变量同名的局部变量，就不会报错了，但是这样就没有达到引用全局变量a之后再定义与全局变量同名的局部变量a 的目的，所以引入方式3。</p><p>方式3：这里涉及到全局变量和局部变量的区分，如果想使用全局变量a之后再使用同名的局部变量a，就应该是把方法和变量定义在类里。通过类的成员变量去引用全局变量。</p><h1 id=\"局部函数及用法包含nonlocal关键字\"><a class=\"markdownIt-Anchor\" href=\"#局部函数及用法包含nonlocal关键字\"></a> 局部函数及用法（包含nonlocal关键字）</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#全局函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outdef</span> <span class=\"params\">()</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">\"所在函数中定义的 name 变量\"</span></span><br><span class=\"line\">    <span class=\"comment\">#局部函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">indef</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> name</span><br><span class=\"line\">        print(name)</span><br><span class=\"line\">        <span class=\"comment\">#修改name变量的值</span></span><br><span class=\"line\">        name = <span class=\"string\">\"局部函数中定义的 name 变量\"</span></span><br><span class=\"line\">    indef()</span><br><span class=\"line\"><span class=\"comment\">#调用全局函数</span></span><br><span class=\"line\">outdef()</span><br></pre></td></tr></table></figure><p>由于这里的name变量也是局部变量，因此前面章节讲解的globals() 函数或者 globals关键字，并不适用于解决此问题。这里可以使用Python提供的 nonlocal关键字</p><h1 id=\"函数的高级用法\"><a class=\"markdownIt-Anchor\" href=\"#函数的高级用法\"></a> 函数的高级用法</h1><p>Python 函数还支持赋值、作为其他函数的参数以及作为其他函数的返回值。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_def</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"正在执行 my_def 函数\"</span>)</span><br><span class=\"line\">other = my_def</span><br><span class=\"line\">other()</span><br><span class=\"line\">正在执行 my_def 函数</span><br><span class=\"line\"><span class=\"comment\"># Python 还支持函数的返回值也为函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_def</span> <span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#局部函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">indef</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"调用局部函数\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">#调用局部函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> indef</span><br><span class=\"line\">other_def = my_def()</span><br><span class=\"line\"><span class=\"comment\">#调用局部的 indef() 函数</span></span><br><span class=\"line\">other_def()</span><br><span class=\"line\">调用局部函数</span><br></pre></td></tr></table></figure><h1 id=\"python的闭包\"><a class=\"markdownIt-Anchor\" href=\"#python的闭包\"></a> Python的闭包</h1><p>闭包，又称闭包函数或者闭合函数，其实和前面讲的嵌套函数类似，不同之处在于，闭包中外部函数返回的不是一个具体的值，而是一个函数。一般情况下，返回的函数会赋值给一个变量，这个变量可以在后面被继续执行调用。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#闭包函数，其中 exponent 称为自由变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nth_power</span><span class=\"params\">(exponent)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exponent_of</span><span class=\"params\">(base)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> base ** exponent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exponent_of <span class=\"comment\"># 返回值是 exponent_of 函数</span></span><br><span class=\"line\">square = nth_power(<span class=\"number\">2</span>) <span class=\"comment\"># 计算一个数的平方</span></span><br><span class=\"line\">cube = nth_power(<span class=\"number\">3</span>) <span class=\"comment\"># 计算一个数的立方</span></span><br><span class=\"line\">print(square(<span class=\"number\">2</span>))  <span class=\"comment\"># 计算 2 的平方</span></span><br><span class=\"line\">print(cube(<span class=\"number\">2</span>)) <span class=\"comment\"># 计算 2 的立方</span></span><br></pre></td></tr></table></figure><p><font color=\"red\">函数开头需要做一些额外工作，当需要多次调用该函数时，如果将那些额外工作的代码放在外部函数，就可以减少多次调用导致的不必要开销，提高程序的运行效率。</font></p><h2 id=\"闭包的__closure__属性\"><a class=\"markdownIt-Anchor\" href=\"#闭包的__closure__属性\"></a> 闭包的__closure__属性</h2><p>记录着自由变量的地址。当闭包被调用时，系统就会根据该地址找到对应的自由变量，完成整体的函数调用。类型是一个元组，这表明闭包可以支持多个自由变量的形式。</p><h1 id=\"lambda表达式匿名函数及其用法\"><a class=\"markdownIt-Anchor\" href=\"#lambda表达式匿名函数及其用法\"></a> lambda表达式(匿名函数)及其用法</h1><p>lambda 表达式，又称匿名函数，常用来表示内部仅包含 1 行表达式的函数。如果一个函数的函数体仅有 1 行表达式，则该函数就可以用 lambda 表达式来代替。lambda 表达式的语法格式如下：</p><blockquote><p>name = lambda [list] : 表达式</p></blockquote><p>其中，定义 lambda 表达式，必须使用 lambda 关键字；[list] 作为可选参数，等同于定义函数是指定的参数列表；value 为该表达式的名称。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add = <span class=\"keyword\">lambda</span> x,y: x + y</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(add(<span class=\"number\">3</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"number\">7</span></span><br></pre></td></tr></table></figure><p>lamba 表达式具有以下 2 个优势：</p><ul><li>对于单行函数，使用 lambda 表达式可以省去定义函数的过程，让代码更加简洁；</li><li>对于不需要多次复用的函数，使用 lambda 表达式可以在用完之后立即释放，提高程序执行的性能。</li></ul><h1 id=\"eval和exec函数\"><a class=\"markdownIt-Anchor\" href=\"#eval和exec函数\"></a> eval()和exec()函数</h1><p>eval() 和 exec() 函数的功能是相似的，都可以执行一个字符串形式的 Python 代码（代码以字符串的形式提供），相当于一个 Python 的解释器。二者不同之处在于，eval() 执行完要返回结果，而 exec() 执行完不返回结果。<br>eval() 函数的语法格式为：</p><blockquote><p>eval(source, globals=None, locals=None, /)</p></blockquote><p>而 exec() 函数的语法格式如下：</p><blockquote><p>exec(source, globals=None, locals=None, /)</p></blockquote><p>二者的语法格式除了函数名，其他都相同，其中各个参数的具体含义如下：</p><ul><li>expression：这个参数是一个字符串，代表要执行的语句 。该语句受后面两个字典类型参数 globals 和 locals 的限制，只有在 globals 字典和 locals 字典作用域内的函数和变量才能被执行。</li><li>globals：这个参数管控的是一个全局的命名空间，即 expression 可以使用全局命名空间中的函数。如果只是提供了 globals 参数，而没有提供自定义的 <strong>builtins</strong>，则系统会将当前环境中的 * <strong>builtins</strong> 复制到自己提供的 globals 中，然后才会进行计算；如果连 globals 这个参数都没有被提供，则使用 Python 的全局命名空间。</li><li>locals：这个参数管控的是一个局部的命名空间，和 globals 类似，当它和 globals 中有重复或冲突时，以 locals 的为准。如果 locals 没有被提供，则默认为 globals。</li></ul><p><font color=\"red\">注意，<strong>builtins</strong> 是 Python 的内建模块，平时使用的 int、str、abs 都在这个模块中。通过<br>print(dic[“<strong>builtins</strong>”]) 语句可以查看 <strong>builtins</strong> 所对应的 value。</font></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b=<span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c=<span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>g=&#123;<span class=\"string\">'a'</span>:<span class=\"number\">6</span>, <span class=\"string\">'b'</span>:<span class=\"number\">8</span>&#125; <span class=\"comment\">#定义一个字典</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t=&#123;<span class=\"string\">'b'</span>:<span class=\"number\">100</span>, <span class=\"string\">'c'</span>:<span class=\"number\">10</span>&#125; <span class=\"comment\">#定义一个字典</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(eval(<span class=\"string\">'a+b+c'</span>, g, t)) <span class=\"comment\">#定义一个字典 116</span></span><br><span class=\"line\"><span class=\"number\">116</span></span><br></pre></td></tr></table></figure><h2 id=\"exec和eval区别\"><a class=\"markdownIt-Anchor\" href=\"#exec和eval区别\"></a> exec()和eval()区别</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">exec(<span class=\"string\">\"a = 2\"</span>) <span class=\"comment\">#相当于直接执行 a=2</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">a = exec(<span class=\"string\">\"2+3\"</span>) <span class=\"comment\">#相当于直接执行 2+3，但是并没有返回值，a 应为 None</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"literal\">None</span></span><br><span class=\"line\">a = eval(<span class=\"string\">'2+3'</span>) <span class=\"comment\">#执行 2+3，并把结果返回给 a</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p>exec() 中最适合放置运行后没有结果的语句，而 eval() 中适合放置有结果返回的语句。</p><h2 id=\"eval-和-exec-函数的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#eval-和-exec-函数的应用场景\"></a> eval() 和 exec() 函数的应用场景</h2><p>客户端向服务端发送一段字符串代码，服务端无需关心具体的内容，直接跳过 eval() 或 exec() 来执行，这样的设计会使服务端与客户端的耦合度更低，系统更易扩展。<br><font color=\"red\">注意的是，在使用 eval() 或是 exec() 来处理请求代码时，函数 eval() 和 exec() 常常会被黑客利用，成为可以执行系统级命令的入口点，进而来攻击网站。解决方法是：通过设置其命名空间里的可执行函数，来限制 eval() 和 exec() 的执行范围。</font></p><p>第一个参数是字符串，而字符串的内容一定要是可执行的代码。在编写代码时，一般会使 repr() 数来生成动态的字符串，再传入到 eval() 或 exec() 函数内，实现动态执行代码的功能。</p><h1 id=\"函数式编程map-filter和reduce详解\"><a class=\"markdownIt-Anchor\" href=\"#函数式编程map-filter和reduce详解\"></a> 函数式编程（map()、filter()和reduce()）详解</h1><p>函数式编程的优点，主要在于其纯函数和不可变的特性使程序更加健壮，易于调试和测试；缺点主要在于限制多，难写。<br>注意，纯粹的函数式编程语言（比如 Scala），其编写的函数中是没有变量的，因此可以保证，只要输入是确定的，输出就是确定的；而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出。</p><p>Python 允许使用变量，所以它并不是一门纯函数式编程语言。Python 仅对函数式编程提供了部分支持，主要包括 map()、filter() 和 reduce() 这 3 个函数，它们通常都结合 lambda 匿名函数一起使用。接下来就对这 3 个函数的用法做逐一介绍。</p><h2 id=\"map函数\"><a class=\"markdownIt-Anchor\" href=\"#map函数\"></a> map()函数</h2><p>map()函数的基本语法格式如下：</p><blockquote><p>map(function, iterable)</p></blockquote><p>其中，function参数表示要传入一个函数，其可以是内置函数、自定义函数或者 lambda 匿名函数；iterable 表示一个或多个可迭代对象，可以是列表、字符串等。map()函数的功能是对可迭代对象中的每个元素，都调用指定的函数，并返回一个map对象。</p><blockquote><p>注意，该函数返回的是一个map对象，不能直接输出，可以通过for循环或者 list() 函数来显示。</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>listDemo1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>listDemo2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>new_list = map(<span class=\"keyword\">lambda</span> x,y: x + y, listDemo1,listDemo2)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(list(new_list))</span><br><span class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>]</span><br></pre></td></tr></table></figure><p><font color=\"red\">注意，由于 map() 函数是直接由用 C 语言写的，运行时不需要通过 Python 解释器间接调用，并且内部做了诸多优化，所以相比其他方法，此方法的运行效率最高。</font></p><h2 id=\"filter函数\"><a class=\"markdownIt-Anchor\" href=\"#filter函数\"></a> filter()函数</h2><p>filter()函数的基本语法格式如下：</p><blockquote><p>filter(function, iterable)</p></blockquote><p>此格式中，funcition参数表示要传入一个函数，iterable表示一个可迭代对象。filter()函数的功能是对 iterable中的每个元素，都使用 function函数判断，并返回 True 或者 False，最后将返回 True 的元素组成一个新的可遍历的集合。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>new_list = map(<span class=\"keyword\">lambda</span> x,y: x-y&gt;<span class=\"number\">0</span>,[<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>] )</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(list(new_list))</span><br><span class=\"line\">[<span class=\"literal\">True</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>]</span><br></pre></td></tr></table></figure><h2 id=\"reduce函数\"><a class=\"markdownIt-Anchor\" href=\"#reduce函数\"></a> reduce()函数</h2><p>reduce()函数通常用来对一个集合做一些累积操作，其基本语法格式为：</p><blockquote><p>reduce(function, iterable)</p></blockquote><p>其中，function规定必须是一个包含2个参数的函数；iterable 表示可迭代对象。注意，由于 reduce()函数在 Python 3.x中已经被移除，放入了 functools模块，因此在使用该函数之前，需先导入functools模块。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>listDemo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>product = functools.reduce(<span class=\"keyword\">lambda</span> x, y: x * y, listDemo)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(product) <span class=\"comment\"># 叠乘</span></span><br><span class=\"line\"><span class=\"number\">120</span></span><br></pre></td></tr></table></figure><h1 id=\"函数注解function-annotations\"><a class=\"markdownIt-Anchor\" href=\"#函数注解function-annotations\"></a> 函数注解（Function Annotations）</h1><p>函数注解语法 可以让你在定义函数的时候对参数和返回值添加注解：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foobar</span><span class=\"params\">(a: int, b: <span class=\"string\">\"it's b\"</span>, c: str = <span class=\"number\">5</span>)</span> -&gt; tuple:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a, b, c</span><br><span class=\"line\"><span class=\"comment\"># foobar.__annotations__获取参数注解</span></span><br></pre></td></tr></table></figure><ul><li>a: int 这种是注解参数</li><li>c: str = 5 是注解有默认值的参数</li><li>-&gt; tuple 是注解返回值。</li></ul><p>基于注解可以实现参数类型检查的装饰器</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    msg = (<span class=\"string\">'Expected type &#123;expected!r&#125; for argument &#123;argument&#125;, '</span></span><br><span class=\"line\">           <span class=\"string\">'but got type &#123;got!r&#125; with value &#123;value!r&#125;'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 获取函数定义的参数</span></span><br><span class=\"line\">    sig = inspect.signature(func)</span><br><span class=\"line\">    parameters = sig.parameters          <span class=\"comment\"># 参数有序字典</span></span><br><span class=\"line\">    arg_keys = tuple(parameters.keys())   <span class=\"comment\"># 参数名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @functools.wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        CheckItem = collections.namedtuple(<span class=\"string\">'CheckItem'</span>, (<span class=\"string\">'anno'</span>, <span class=\"string\">'arg_name'</span>, <span class=\"string\">'value'</span>))</span><br><span class=\"line\">        check_list = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># collect args   *args 传入的参数以及对应的函数参数注解</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, value <span class=\"keyword\">in</span> enumerate(args):</span><br><span class=\"line\">            arg_name = arg_keys[i]</span><br><span class=\"line\">            anno = parameters[arg_name].annotation</span><br><span class=\"line\">            check_list.append(CheckItem(anno, arg_name, value))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># collect kwargs  **kwargs 传入的参数以及对应的函数参数注解</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> arg_name, value <span class=\"keyword\">in</span> kwargs.items():</span><br><span class=\"line\">           anno = parameters[arg_name].annotation</span><br><span class=\"line\">           check_list.append(CheckItem(anno, arg_name, value))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check type</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> check_list:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(item.value, item.anno):</span><br><span class=\"line\">                error = msg.format(expected=item.anno, argument=item.arg_name,</span><br><span class=\"line\">                                   got=type(item.value), value=item.value)</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> TypeError(error)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"><span class=\"meta\">@check</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foobar</span><span class=\"params\">(a: int, b:str, c: float=<span class=\"number\">3.2</span>)</span> -&gt; tuple:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a, b, c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>foobar(<span class=\"number\">1</span>, <span class=\"string\">'b'</span>)</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">'b'</span>, <span class=\"number\">3.2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>foobar(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\">TypeError: Expected type &lt;class 'int'&gt; for argument a, but got type &lt;class 'str'&gt; with value 'a</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","more":"<!-- build time:Sun May 03 2020 17:49:41 GMT+0800 (GMT+08:00) --><h1 id=\"assert断言\"><a class=\"markdownIt-Anchor\" href=\"#assert断言\"></a> assert断言</h1><p>assert 语句的语法结构为：</p><blockquote><p>assert 表达式</p></blockquote><p>assert 语句的执行流程可以用 if 判断语句表示，如下所示：</p><blockquote><p>if 表达式==True:<br>程序继续执行<br>else:<br>程序报 AssertionError 错误</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#price 为原价，discount 为折扣力度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply_discount</span><span class=\"params\">(price, discount)</span>:</span></span><br><span class=\"line\">    updated_price = price * (<span class=\"number\">1</span> - discount)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">0</span> &lt;= updated_price &lt;= price, <span class=\"string\">'折扣价应在 0 和原价之间'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> updated_price</span><br><span class=\"line\"><span class=\"comment\"># 添加了一个 assert 语句，用来检查折后价格，这里要求新折扣价格必须大于等于 0、小于等于原来的价格，否则就抛出异常。</span></span><br></pre></td></tr></table></figure><p>assert 的加入可以有效预防程序漏洞，提高程序的健壮性。循环嵌套结构的代码，Python解释器执行的流程为：</p><ul><li>当外层循环条件为 True 时，则执行外层循环结构中的循环体；</li><li>外层循环体中包含了普通程序和内循环，当内层循环的循环条件为 True 时会执行此循环中的循环体，直到内层循环条件为 False，跳出内循环；</li><li>如果此时外层循环的条件仍为 True，则返回第 2 步，继续执行外层循环体，直到外层循环的循环条件为False；</li><li>当内层循环的循环条件为False，且外层循环的循环条件也为False，则整个嵌套循环才算执行完毕。</li></ul><h1 id=\"zip函数及其用法\"><a class=\"markdownIt-Anchor\" href=\"#zip函数及其用法\"></a> zip函数及其用法</h1><p>zip() 函数是 Python 内置函数之一，它可以将多个序列（列表、元组、字典、集合、字符串以及 range() 区间构成的列表）“压缩”成一个 zip 对象。所谓“压缩”，其实就是将这些序列中对应位置的元素重新组合，生成一个个新的元组。</p><blockquote><p>语法格式：zip(iterable, …)</p></blockquote><p>其中iterable,… 表示多个列表、元组、字典、集合、字符串，甚至还可以为range()区间。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_list = [<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_tuple = (<span class=\"number\">21</span>,<span class=\"number\">22</span>,<span class=\"number\">23</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print([x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> zip(my_list,my_tuple)])</span><br><span class=\"line\">[(<span class=\"number\">11</span>, <span class=\"number\">21</span>), (<span class=\"number\">12</span>, <span class=\"number\">22</span>), (<span class=\"number\">13</span>, <span class=\"number\">23</span>)]</span><br></pre></td></tr></table></figure><h1 id=\"reversed函数及用法\"><a class=\"markdownIt-Anchor\" href=\"#reversed函数及用法\"></a> reversed函数及用法</h1><p>对于给定的序列（包括列表、元组、字符串以及 range(n) 区间），该函数可以返回一个逆序序列的迭代器（用于遍历该逆序序列）reserved()函数的语法格式如下：</p><blockquote><p>reversed(seq)</p></blockquote><p>其中，seq可以是列表，元素，字符串以及range()生成的区间列表。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print([x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> reversed((<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>))])</span><br><span class=\"line\">[<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure><h1 id=\"sorted函数及用法\"><a class=\"markdownIt-Anchor\" href=\"#sorted函数及用法\"></a> sorted函数及用法</h1><p>sorted() 作为 Python 内置函数之一，其功能是对序列（列表、元组、字典、集合、还包括字符串）进行排序。sorted()函数的基本语法格式如下：</p><blockquote><p>list = sorted(iterable, key=None, reverse=False)</p></blockquote><p>其中，iterable表示指定的序列，key 参数可以自定义排序规则；reverse参数指定以升序（False，默认）还是降序（True）进行排序。sorted()函数会返回一个排好序的列表。</p><p><font color=\"red\">注意，key 参数和 reverse 参数是可选参数，即可以使用，也可以忽略。</font></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = &#123;<span class=\"number\">4</span>:<span class=\"number\">1</span>,\\</span><br><span class=\"line\"><span class=\"meta\">... </span>     <span class=\"number\">5</span>:<span class=\"number\">2</span>,\\</span><br><span class=\"line\"><span class=\"meta\">... </span>     <span class=\"number\">3</span>:<span class=\"number\">3</span>,\\</span><br><span class=\"line\"><span class=\"meta\">... </span>     <span class=\"number\">2</span>:<span class=\"number\">6</span>,\\</span><br><span class=\"line\"><span class=\"meta\">... </span>     <span class=\"number\">1</span>:<span class=\"number\">8</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(sorted(a.items()))</span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"number\">8</span>), (<span class=\"number\">2</span>, <span class=\"number\">6</span>), (<span class=\"number\">3</span>, <span class=\"number\">3</span>), (<span class=\"number\">4</span>, <span class=\"number\">1</span>), (<span class=\"number\">5</span>, <span class=\"number\">2</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(sorted(a.values()))</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"comment\"># 函数默认对序列中元素进行升序排序，通过手动将其reverse参数值改为True，可实现降序排序。</span></span><br></pre></td></tr></table></figure><p>sorted()函数时，还可传入一个 key参数，它可以接受一个函数，该函数的功能是指定sorted()函数按照什么标准进行排序，实例如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>chars = [<span class=\"string\">'sss'</span>, <span class=\"string\">'ss'</span>, <span class=\"string\">'sssss'</span>, <span class=\"string\">'s'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(sorted(chars))</span><br><span class=\"line\">[<span class=\"string\">'s'</span>, <span class=\"string\">'ss'</span>, <span class=\"string\">'sss'</span>, <span class=\"string\">'sssss'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(sorted(chars, key=<span class=\"keyword\">lambda</span> x:len(x)))</span><br><span class=\"line\">[<span class=\"string\">'s'</span>, <span class=\"string\">'ss'</span>, <span class=\"string\">'sss'</span>, <span class=\"string\">'sssss'</span>]</span><br></pre></td></tr></table></figure><h1 id=\"函数可变参数args及kwargs\"><a class=\"markdownIt-Anchor\" href=\"#函数可变参数args及kwargs\"></a> 函数可变参数*args及**kwargs</h1><p>Python函数可变参数*args及**kwargs，先给出标准答案：</p><ul><li><p>*args是arguments单词缩写，表示任意多个无名参数，是一个tuple，如 (1,2,3,‘a’,‘b’,‘c’)</p></li><li><p>**kwargs是keyword arguments单词缩写,表示关键字参数，是一个dict，如{‘a’:1,‘b’:2,‘c’:3}，*args参数必须在**kwargs前</p></li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(*args,**kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'args='</span>,args</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'kwargs='</span>,kwargs</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'*'</span>*<span class=\"number\">20</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#只传参数*args=(1,2,3)</span></span><br><span class=\"line\">    foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#只传参数**kwargs=dict(a=1,b=2,c=3)</span></span><br><span class=\"line\">    foo(a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#传入参数*args=(1,2,3)</span></span><br><span class=\"line\">    <span class=\"comment\">#传入参数**kwargs=dict(a=1,b=2,c=3)</span></span><br><span class=\"line\">    foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#传入参数*args=(1,'b','c')</span></span><br><span class=\"line\">    <span class=\"comment\">#传入参数**kwargs=dict(a=1,b='b',c='c')</span></span><br><span class=\"line\">    foo(<span class=\"number\">1</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,a=<span class=\"number\">1</span>,b=<span class=\"string\">'b'</span>,c=<span class=\"string\">'c'</span>)</span><br><span class=\"line\">输出：    </span><br><span class=\"line\">args= (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">kwargs= &#123;&#125;</span><br><span class=\"line\">********************</span><br><span class=\"line\">args= ()</span><br><span class=\"line\">kwargs= &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">3</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">********************</span><br><span class=\"line\">args= (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">kwargs= &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">3</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">********************</span><br><span class=\"line\">args= (<span class=\"number\">1</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>)</span><br><span class=\"line\">kwargs= &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'b'</span>&#125;</span><br><span class=\"line\">********************</span><br></pre></td></tr></table></figure><h2 id=\"逆向参数收集\"><a class=\"markdownIt-Anchor\" href=\"#逆向参数收集\"></a> 逆向参数收集</h2><p>在列表、元组前添加 *，在字典前添加 **。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(a)</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(b)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>vals_1 = [<span class=\"number\">10</span>,<span class=\"number\">20</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test(*vals_1)</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>vals_2 = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">10</span>, <span class=\"string\">'b'</span>:<span class=\"number\">20</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test(*vals_2)</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test(**vals_2)</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br></pre></td></tr></table></figure><h1 id=\"none空值及其用法\"><a class=\"markdownIt-Anchor\" href=\"#none空值及其用法\"></a> None(空值)及其用法</h1><p>有一个特殊的常量None（N 必须大写）。和False不同，它不表示0，也不表示空字符串，而表示没有值，也就是空值。</p><p>这里的空值并不代表空对象，即None和[]、“” 不同：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">None</span> <span class=\"keyword\">is</span> []</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">None</span> <span class=\"keyword\">is</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"literal\">None</span>)</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">NoneType</span>'&gt;</span></span><br></pre></td></tr></table></figure><p><font color=\"red\">None 是 NoneType 数据类型的唯一值（其他编程语言可能称这个值为 null、nil 或 undefined），也就是说，我们不能再创建其它 NoneType 类型的变量，但是可以将 None 赋值给任何变量。如果希望变量中存储的东西不与任何其它值混淆，就可以使用 None。</font></p><h1 id=\"partial偏函数及其用法\"><a class=\"markdownIt-Anchor\" href=\"#partial偏函数及其用法\"></a> partial偏函数及其用法</h1><p>简单的理解偏函数，它是对原始函数的二次封装，是将现有函数的部分参数预先绑定为指定值，从而得到一个新的函数，该函数就称为偏函数。相比原函数，偏函数具有较少的可变参数，从而降低了函数调用的难度。</p><p>定义偏函数，需使用 partial 关键字（位于 functools 模块中），其语法格式如下：</p><ul><li>偏函数名 = partial(func, *args, **kwargs)</li></ul><p>其中，func 指的是要封装的原函数，*args 和 **kwargs 分别用于接收无关键字实参和关键字实参。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mod</span><span class=\"params\">( n, m )</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>  <span class=\"keyword\">return</span> n % m</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mod_by_100 = partial( mod, <span class=\"number\">100</span> )</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(mod( <span class=\"number\">100</span>, <span class=\"number\">7</span> ))</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(mod_by_100( <span class=\"number\">7</span> ))</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure><h1 id=\"变量作用域全局变量和局部变量\"><a class=\"markdownIt-Anchor\" href=\"#变量作用域全局变量和局部变量\"></a> 变量作用域(全局变量和局部变量)</h1><p>作用域（Scope），就是变量的有效范围，就是变量可以在哪个范围以内使用。有些变量可以在整段代码的任意位置使用，有些变量只能在函数内部使用，有些变量只能在 for 循环内部使用。变量的作用域由变量的定义位置决定，在不同位置定义的变量，它的作用域是不一样的。本节我们只讲解两种变量，局部变量和全局变量。</p><h2 id=\"局部变量\"><a class=\"markdownIt-Anchor\" href=\"#局部变量\"></a> 局部变量</h2><p>在函数内部定义的变量，它的作用域也仅限于函数内部，出了函数就不能使用了，我们将这样的变量称为局部变量（Local Variable）。</p><p>要知道，当函数被执行时，Python 会为其分配一块临时的存储空间，所有在函数内部定义的变量，都会存储在这块空间中。而在函数执行完毕后，这块临时存储空间随即会被释放并回收，该空间中存储的变量自然也就无法再被使用。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    add = <span class=\"string\">\"http://c.biancheng.net/python/\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"函数内部 add =\"</span>,add)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>demo()</span><br><span class=\"line\">函数内部 add = http://c.biancheng.net/python/</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"函数外部 add =\"</span>,add)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">NameError: name <span class=\"string\">'add'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure><h2 id=\"全局变量\"><a class=\"markdownIt-Anchor\" href=\"#全局变量\"></a> 全局变量</h2><p>在函数内部定义变量，Python 还允许在所有函数的外部定义变量，这样的变量称为全局变量（Global Variable）。和局部变量不同，全局变量的默认作用域是整个程序，即全局变量既可以在各个函数的外部使用，也可以在各函数内部使用。</p><p>定义全局变量的方式有以下2种：</p><ul><li>在函数体外定义的变量，一定是全局变量，如：</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add = <span class=\"string\">\"http://c.biancheng.net/shell/\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">text</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"函数体内访问：\"</span>,add)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text()</span><br><span class=\"line\">函数体内访问： http://c.biancheng.net/shell/</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'函数体外访问：'</span>,add)</span><br><span class=\"line\">函数体外访问： http://c.biancheng.net/shell/</span><br></pre></td></tr></table></figure><ul><li>在函数体内定义全局变量。即使用 global关键字对变量进行修饰后，该变量就会变为全局变量</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">text</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">global</span> add</span><br><span class=\"line\"><span class=\"meta\">... </span>    add= <span class=\"string\">\"http://c.biancheng.net/java/\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"函数体内访问：\"</span>,add)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text()</span><br><span class=\"line\">函数体内访问： http://c.biancheng.net/java/</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(add)</span><br><span class=\"line\">http://c.biancheng.net/java/</span><br></pre></td></tr></table></figure><p><font color=\"red\">注意，在使用 global 关键字修饰变量名时，不能直接给变量赋初值，否则会引发语法错误。</font></p><h2 id=\"获取指定作用域范围中的变量\"><a class=\"markdownIt-Anchor\" href=\"#获取指定作用域范围中的变量\"></a> 获取指定作用域范围中的变量</h2><p><strong>1.globals()函数</strong></p><p>globals()函数为Python的内置函数，它可以返回一个包含全局范围内所有变量的字典，该字典中的每个键值对，键为变量名，值为该变量的值。globals()函数返回的字典中，会默认包含有很多变量。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>globals()[<span class=\"string\">'Pyname'</span>] = <span class=\"string\">\"Python入门教程\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(Pyname)</span><br><span class=\"line\">Python入门教程</span><br></pre></td></tr></table></figure><p><strong>2.locals()函数</strong></p><p>locals()函数也是Python内置函数之一，通过调用该函数，我们可以得到一个包含当前作用域内所有变量的字典。这里所谓的“当前作用域”指的是，在函数内部调用 locals() 函数，会获得包含所有局部变量的字典；而在全局范文内调用 locals() 函数，其功能和 globals() 函数相同。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Pyname = <span class=\"string\">\"Python教程\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Pyadd = <span class=\"string\">\"http://c.biancheng.net/python/\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">text</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"comment\">#局部变量</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    Shename = <span class=\"string\">\"shell教程\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    Sheadd= <span class=\"string\">\"http://c.biancheng.net/shell/\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"函数内部的 locals:\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(locals())</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text()</span><br><span class=\"line\">函数内部的 locals:</span><br><span class=\"line\">&#123;<span class=\"string\">'Sheadd'</span>: <span class=\"string\">'http://c.biancheng.net/shell/'</span>, <span class=\"string\">'Shename'</span>: <span class=\"string\">'shell教程'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"函数外部的 locals:\"</span>)</span><br><span class=\"line\">函数外部的 locals:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(locals())</span><br></pre></td></tr></table></figure><p><strong>3.vars(object)</strong></p><p>vars() 函数也是 Python 内置函数，其功能是返回一个指定 object 对象范围内所有变量组成的字典。如果不传入object 参数，vars() 和 locals() 的作用完全相同。</p><h1 id=\"同名的全局变量\"><a class=\"markdownIt-Anchor\" href=\"#同名的全局变量\"></a> 同名的全局变量</h1><p>解决方式：</p><p>方式1：在函数中要定义局部变量时不要与全局变量同名， 即在numCheck( )中定义的局部变量换个名。</p><p>方式2：进入函数时先定义与全局变量同名的局部变量，就不会报错了，但是这样就没有达到引用全局变量a之后再定义与全局变量同名的局部变量a 的目的，所以引入方式3。</p><p>方式3：这里涉及到全局变量和局部变量的区分，如果想使用全局变量a之后再使用同名的局部变量a，就应该是把方法和变量定义在类里。通过类的成员变量去引用全局变量。</p><h1 id=\"局部函数及用法包含nonlocal关键字\"><a class=\"markdownIt-Anchor\" href=\"#局部函数及用法包含nonlocal关键字\"></a> 局部函数及用法（包含nonlocal关键字）</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#全局函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outdef</span> <span class=\"params\">()</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">\"所在函数中定义的 name 变量\"</span></span><br><span class=\"line\">    <span class=\"comment\">#局部函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">indef</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> name</span><br><span class=\"line\">        print(name)</span><br><span class=\"line\">        <span class=\"comment\">#修改name变量的值</span></span><br><span class=\"line\">        name = <span class=\"string\">\"局部函数中定义的 name 变量\"</span></span><br><span class=\"line\">    indef()</span><br><span class=\"line\"><span class=\"comment\">#调用全局函数</span></span><br><span class=\"line\">outdef()</span><br></pre></td></tr></table></figure><p>由于这里的name变量也是局部变量，因此前面章节讲解的globals() 函数或者 globals关键字，并不适用于解决此问题。这里可以使用Python提供的 nonlocal关键字</p><h1 id=\"函数的高级用法\"><a class=\"markdownIt-Anchor\" href=\"#函数的高级用法\"></a> 函数的高级用法</h1><p>Python 函数还支持赋值、作为其他函数的参数以及作为其他函数的返回值。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_def</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"正在执行 my_def 函数\"</span>)</span><br><span class=\"line\">other = my_def</span><br><span class=\"line\">other()</span><br><span class=\"line\">正在执行 my_def 函数</span><br><span class=\"line\"><span class=\"comment\"># Python 还支持函数的返回值也为函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_def</span> <span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#局部函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">indef</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"调用局部函数\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">#调用局部函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> indef</span><br><span class=\"line\">other_def = my_def()</span><br><span class=\"line\"><span class=\"comment\">#调用局部的 indef() 函数</span></span><br><span class=\"line\">other_def()</span><br><span class=\"line\">调用局部函数</span><br></pre></td></tr></table></figure><h1 id=\"python的闭包\"><a class=\"markdownIt-Anchor\" href=\"#python的闭包\"></a> Python的闭包</h1><p>闭包，又称闭包函数或者闭合函数，其实和前面讲的嵌套函数类似，不同之处在于，闭包中外部函数返回的不是一个具体的值，而是一个函数。一般情况下，返回的函数会赋值给一个变量，这个变量可以在后面被继续执行调用。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#闭包函数，其中 exponent 称为自由变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nth_power</span><span class=\"params\">(exponent)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exponent_of</span><span class=\"params\">(base)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> base ** exponent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exponent_of <span class=\"comment\"># 返回值是 exponent_of 函数</span></span><br><span class=\"line\">square = nth_power(<span class=\"number\">2</span>) <span class=\"comment\"># 计算一个数的平方</span></span><br><span class=\"line\">cube = nth_power(<span class=\"number\">3</span>) <span class=\"comment\"># 计算一个数的立方</span></span><br><span class=\"line\">print(square(<span class=\"number\">2</span>))  <span class=\"comment\"># 计算 2 的平方</span></span><br><span class=\"line\">print(cube(<span class=\"number\">2</span>)) <span class=\"comment\"># 计算 2 的立方</span></span><br></pre></td></tr></table></figure><p><font color=\"red\">函数开头需要做一些额外工作，当需要多次调用该函数时，如果将那些额外工作的代码放在外部函数，就可以减少多次调用导致的不必要开销，提高程序的运行效率。</font></p><h2 id=\"闭包的__closure__属性\"><a class=\"markdownIt-Anchor\" href=\"#闭包的__closure__属性\"></a> 闭包的__closure__属性</h2><p>记录着自由变量的地址。当闭包被调用时，系统就会根据该地址找到对应的自由变量，完成整体的函数调用。类型是一个元组，这表明闭包可以支持多个自由变量的形式。</p><h1 id=\"lambda表达式匿名函数及其用法\"><a class=\"markdownIt-Anchor\" href=\"#lambda表达式匿名函数及其用法\"></a> lambda表达式(匿名函数)及其用法</h1><p>lambda 表达式，又称匿名函数，常用来表示内部仅包含 1 行表达式的函数。如果一个函数的函数体仅有 1 行表达式，则该函数就可以用 lambda 表达式来代替。lambda 表达式的语法格式如下：</p><blockquote><p>name = lambda [list] : 表达式</p></blockquote><p>其中，定义 lambda 表达式，必须使用 lambda 关键字；[list] 作为可选参数，等同于定义函数是指定的参数列表；value 为该表达式的名称。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add = <span class=\"keyword\">lambda</span> x,y: x + y</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(add(<span class=\"number\">3</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"number\">7</span></span><br></pre></td></tr></table></figure><p>lamba 表达式具有以下 2 个优势：</p><ul><li>对于单行函数，使用 lambda 表达式可以省去定义函数的过程，让代码更加简洁；</li><li>对于不需要多次复用的函数，使用 lambda 表达式可以在用完之后立即释放，提高程序执行的性能。</li></ul><h1 id=\"eval和exec函数\"><a class=\"markdownIt-Anchor\" href=\"#eval和exec函数\"></a> eval()和exec()函数</h1><p>eval() 和 exec() 函数的功能是相似的，都可以执行一个字符串形式的 Python 代码（代码以字符串的形式提供），相当于一个 Python 的解释器。二者不同之处在于，eval() 执行完要返回结果，而 exec() 执行完不返回结果。<br>eval() 函数的语法格式为：</p><blockquote><p>eval(source, globals=None, locals=None, /)</p></blockquote><p>而 exec() 函数的语法格式如下：</p><blockquote><p>exec(source, globals=None, locals=None, /)</p></blockquote><p>二者的语法格式除了函数名，其他都相同，其中各个参数的具体含义如下：</p><ul><li>expression：这个参数是一个字符串，代表要执行的语句 。该语句受后面两个字典类型参数 globals 和 locals 的限制，只有在 globals 字典和 locals 字典作用域内的函数和变量才能被执行。</li><li>globals：这个参数管控的是一个全局的命名空间，即 expression 可以使用全局命名空间中的函数。如果只是提供了 globals 参数，而没有提供自定义的 <strong>builtins</strong>，则系统会将当前环境中的 * <strong>builtins</strong> 复制到自己提供的 globals 中，然后才会进行计算；如果连 globals 这个参数都没有被提供，则使用 Python 的全局命名空间。</li><li>locals：这个参数管控的是一个局部的命名空间，和 globals 类似，当它和 globals 中有重复或冲突时，以 locals 的为准。如果 locals 没有被提供，则默认为 globals。</li></ul><p><font color=\"red\">注意，<strong>builtins</strong> 是 Python 的内建模块，平时使用的 int、str、abs 都在这个模块中。通过<br>print(dic[“<strong>builtins</strong>”]) 语句可以查看 <strong>builtins</strong> 所对应的 value。</font></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b=<span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c=<span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>g=&#123;<span class=\"string\">'a'</span>:<span class=\"number\">6</span>, <span class=\"string\">'b'</span>:<span class=\"number\">8</span>&#125; <span class=\"comment\">#定义一个字典</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t=&#123;<span class=\"string\">'b'</span>:<span class=\"number\">100</span>, <span class=\"string\">'c'</span>:<span class=\"number\">10</span>&#125; <span class=\"comment\">#定义一个字典</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(eval(<span class=\"string\">'a+b+c'</span>, g, t)) <span class=\"comment\">#定义一个字典 116</span></span><br><span class=\"line\"><span class=\"number\">116</span></span><br></pre></td></tr></table></figure><h2 id=\"exec和eval区别\"><a class=\"markdownIt-Anchor\" href=\"#exec和eval区别\"></a> exec()和eval()区别</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">exec(<span class=\"string\">\"a = 2\"</span>) <span class=\"comment\">#相当于直接执行 a=2</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">a = exec(<span class=\"string\">\"2+3\"</span>) <span class=\"comment\">#相当于直接执行 2+3，但是并没有返回值，a 应为 None</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"literal\">None</span></span><br><span class=\"line\">a = eval(<span class=\"string\">'2+3'</span>) <span class=\"comment\">#执行 2+3，并把结果返回给 a</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p>exec() 中最适合放置运行后没有结果的语句，而 eval() 中适合放置有结果返回的语句。</p><h2 id=\"eval-和-exec-函数的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#eval-和-exec-函数的应用场景\"></a> eval() 和 exec() 函数的应用场景</h2><p>客户端向服务端发送一段字符串代码，服务端无需关心具体的内容，直接跳过 eval() 或 exec() 来执行，这样的设计会使服务端与客户端的耦合度更低，系统更易扩展。<br><font color=\"red\">注意的是，在使用 eval() 或是 exec() 来处理请求代码时，函数 eval() 和 exec() 常常会被黑客利用，成为可以执行系统级命令的入口点，进而来攻击网站。解决方法是：通过设置其命名空间里的可执行函数，来限制 eval() 和 exec() 的执行范围。</font></p><p>第一个参数是字符串，而字符串的内容一定要是可执行的代码。在编写代码时，一般会使 repr() 数来生成动态的字符串，再传入到 eval() 或 exec() 函数内，实现动态执行代码的功能。</p><h1 id=\"函数式编程map-filter和reduce详解\"><a class=\"markdownIt-Anchor\" href=\"#函数式编程map-filter和reduce详解\"></a> 函数式编程（map()、filter()和reduce()）详解</h1><p>函数式编程的优点，主要在于其纯函数和不可变的特性使程序更加健壮，易于调试和测试；缺点主要在于限制多，难写。<br>注意，纯粹的函数式编程语言（比如 Scala），其编写的函数中是没有变量的，因此可以保证，只要输入是确定的，输出就是确定的；而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出。</p><p>Python 允许使用变量，所以它并不是一门纯函数式编程语言。Python 仅对函数式编程提供了部分支持，主要包括 map()、filter() 和 reduce() 这 3 个函数，它们通常都结合 lambda 匿名函数一起使用。接下来就对这 3 个函数的用法做逐一介绍。</p><h2 id=\"map函数\"><a class=\"markdownIt-Anchor\" href=\"#map函数\"></a> map()函数</h2><p>map()函数的基本语法格式如下：</p><blockquote><p>map(function, iterable)</p></blockquote><p>其中，function参数表示要传入一个函数，其可以是内置函数、自定义函数或者 lambda 匿名函数；iterable 表示一个或多个可迭代对象，可以是列表、字符串等。map()函数的功能是对可迭代对象中的每个元素，都调用指定的函数，并返回一个map对象。</p><blockquote><p>注意，该函数返回的是一个map对象，不能直接输出，可以通过for循环或者 list() 函数来显示。</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>listDemo1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>listDemo2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>new_list = map(<span class=\"keyword\">lambda</span> x,y: x + y, listDemo1,listDemo2)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(list(new_list))</span><br><span class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>]</span><br></pre></td></tr></table></figure><p><font color=\"red\">注意，由于 map() 函数是直接由用 C 语言写的，运行时不需要通过 Python 解释器间接调用，并且内部做了诸多优化，所以相比其他方法，此方法的运行效率最高。</font></p><h2 id=\"filter函数\"><a class=\"markdownIt-Anchor\" href=\"#filter函数\"></a> filter()函数</h2><p>filter()函数的基本语法格式如下：</p><blockquote><p>filter(function, iterable)</p></blockquote><p>此格式中，funcition参数表示要传入一个函数，iterable表示一个可迭代对象。filter()函数的功能是对 iterable中的每个元素，都使用 function函数判断，并返回 True 或者 False，最后将返回 True 的元素组成一个新的可遍历的集合。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>new_list = map(<span class=\"keyword\">lambda</span> x,y: x-y&gt;<span class=\"number\">0</span>,[<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>] )</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(list(new_list))</span><br><span class=\"line\">[<span class=\"literal\">True</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>]</span><br></pre></td></tr></table></figure><h2 id=\"reduce函数\"><a class=\"markdownIt-Anchor\" href=\"#reduce函数\"></a> reduce()函数</h2><p>reduce()函数通常用来对一个集合做一些累积操作，其基本语法格式为：</p><blockquote><p>reduce(function, iterable)</p></blockquote><p>其中，function规定必须是一个包含2个参数的函数；iterable 表示可迭代对象。注意，由于 reduce()函数在 Python 3.x中已经被移除，放入了 functools模块，因此在使用该函数之前，需先导入functools模块。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>listDemo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>product = functools.reduce(<span class=\"keyword\">lambda</span> x, y: x * y, listDemo)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(product) <span class=\"comment\"># 叠乘</span></span><br><span class=\"line\"><span class=\"number\">120</span></span><br></pre></td></tr></table></figure><h1 id=\"函数注解function-annotations\"><a class=\"markdownIt-Anchor\" href=\"#函数注解function-annotations\"></a> 函数注解（Function Annotations）</h1><p>函数注解语法 可以让你在定义函数的时候对参数和返回值添加注解：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foobar</span><span class=\"params\">(a: int, b: <span class=\"string\">\"it's b\"</span>, c: str = <span class=\"number\">5</span>)</span> -&gt; tuple:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a, b, c</span><br><span class=\"line\"><span class=\"comment\"># foobar.__annotations__获取参数注解</span></span><br></pre></td></tr></table></figure><ul><li>a: int 这种是注解参数</li><li>c: str = 5 是注解有默认值的参数</li><li>-&gt; tuple 是注解返回值。</li></ul><p>基于注解可以实现参数类型检查的装饰器</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    msg = (<span class=\"string\">'Expected type &#123;expected!r&#125; for argument &#123;argument&#125;, '</span></span><br><span class=\"line\">           <span class=\"string\">'but got type &#123;got!r&#125; with value &#123;value!r&#125;'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 获取函数定义的参数</span></span><br><span class=\"line\">    sig = inspect.signature(func)</span><br><span class=\"line\">    parameters = sig.parameters          <span class=\"comment\"># 参数有序字典</span></span><br><span class=\"line\">    arg_keys = tuple(parameters.keys())   <span class=\"comment\"># 参数名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @functools.wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        CheckItem = collections.namedtuple(<span class=\"string\">'CheckItem'</span>, (<span class=\"string\">'anno'</span>, <span class=\"string\">'arg_name'</span>, <span class=\"string\">'value'</span>))</span><br><span class=\"line\">        check_list = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># collect args   *args 传入的参数以及对应的函数参数注解</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, value <span class=\"keyword\">in</span> enumerate(args):</span><br><span class=\"line\">            arg_name = arg_keys[i]</span><br><span class=\"line\">            anno = parameters[arg_name].annotation</span><br><span class=\"line\">            check_list.append(CheckItem(anno, arg_name, value))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># collect kwargs  **kwargs 传入的参数以及对应的函数参数注解</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> arg_name, value <span class=\"keyword\">in</span> kwargs.items():</span><br><span class=\"line\">           anno = parameters[arg_name].annotation</span><br><span class=\"line\">           check_list.append(CheckItem(anno, arg_name, value))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check type</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> check_list:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(item.value, item.anno):</span><br><span class=\"line\">                error = msg.format(expected=item.anno, argument=item.arg_name,</span><br><span class=\"line\">                                   got=type(item.value), value=item.value)</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> TypeError(error)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"><span class=\"meta\">@check</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foobar</span><span class=\"params\">(a: int, b:str, c: float=<span class=\"number\">3.2</span>)</span> -&gt; tuple:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a, b, c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>foobar(<span class=\"number\">1</span>, <span class=\"string\">'b'</span>)</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">'b'</span>, <span class=\"number\">3.2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>foobar(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\">TypeError: Expected type &lt;class 'int'&gt; for argument a, but got type &lt;class 'str'&gt; with value 'a</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"},{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"}]}