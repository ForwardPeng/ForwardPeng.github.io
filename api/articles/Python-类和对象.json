{"title":"Python-类和对象","slug":"Python-类和对象","date":"2020-04-28T04:15:50.000Z","updated":"2020-04-28T12:00:48.953Z","comments":true,"path":"api/articles/Python-类和对象.json","excerpt":null,"covers":null,"content":"<!-- build time:Tue Apr 28 2020 20:01:14 GMT+0800 (GMT+08:00) --><h1 id=\"python描述符详解\"><a class=\"markdownIt-Anchor\" href=\"#python描述符详解\"></a> Python描述符详解</h1><p>述符就是一个类，只不过它定义了另一个类中属性的访问方式。换句话说，一个类可以将属性管理全权委托给描述符类。</p><blockquote><p>描述符是Python中复杂属性访问的基础，它在内部被用于实现property、方法、类方法、静态方法和super类型。</p></blockquote><p>描述符协议：</p><ul><li><strong>set</strong>(self, obj, type=None)：在设置属性时将调用这一方法（本节后续用 setter 表示）；</li><li><strong>get</strong>(self, obj, value)：在读取属性时将调用这一方法（本节后续用 getter 表示）；</li><li><strong>delete</strong>(self, obj)：对属性调用 del 时将调用这一方法。</li></ul><p>在每次查找属性时，描述符协议中的方法都由类对象的特殊方法 <strong>getattribute</strong>()调用（注意不要和__getattr__() 弄混）。也就是说，每次使用类对象.属性（或者 getattr(类对象，属性值)）的调用方式时，都会隐式地调用 <strong>getattribute</strong>()，它会按照下列顺序查找该属性：</p><ul><li>验证该属性是否为类实例对象的数据描述符；</li><li>如果不是，就查看该属性是否能在类实例对象的 <strong>dict</strong> 中找到；</li><li>最后，查看该属性是否为类实例对象的非数据描述符。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">revealAccess</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, initval = None, name = <span class=\"string\">'var'</span>)</span>:</span></span><br><span class=\"line\">        self.val = initval</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, obj, objtype)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Retrieving\"</span>,self.name)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.val</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, obj, val)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"updating\"</span>,self.name)</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myClass</span>:</span></span><br><span class=\"line\">    x = revealAccess(<span class=\"number\">10</span>,<span class=\"string\">'var \"x\"'</span>)</span><br><span class=\"line\">    y = <span class=\"number\">5</span></span><br><span class=\"line\">m = myClass()</span><br><span class=\"line\">print(m.x)</span><br><span class=\"line\">m.x = <span class=\"number\">20</span></span><br><span class=\"line\">print(m.x)</span><br><span class=\"line\">print(m.y)</span><br><span class=\"line\"></span><br><span class=\"line\">Retrieving var <span class=\"string\">\"x\"</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\">updating var <span class=\"string\">\"x\"</span></span><br><span class=\"line\">Retrieving var <span class=\"string\">\"x\"</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p>如果一个类的某个属性有数据描述符，那么每次查找这个属性时，都会调用描述符的__get__()方法，并返回它的值；同样，每次在对该属性赋值时，也会调用__set__()方法。</p><blockquote><p>除了使用描述符类自定义类属性被调用时做的操作外，还可以使用 property()函数或者@property装饰器</p></blockquote><h2 id=\"property函数定义属性\"><a class=\"markdownIt-Anchor\" href=\"#property函数定义属性\"></a> property()函数：定义属性</h2><p>Python 中提供了 property() 函数，可以实现在不破坏类封装原则的前提下，让开发者依旧使用“类对象.属性”的方式操作类中的属性。property()函数的基本使用格式如下：</p><blockquote><p>属性名=property(fget=None, fset=None, fdel=None, doc=None)</p></blockquote><p>其中，fget 参数用于指定获取该属性值的类方法，fset 参数用于指定设置该属性值的方法，fdel 参数用于指定删除该属性值的方法，最后的 doc 是一个文档字符串，用于说明此函数的作用。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLanguage</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,n)</span>:</span></span><br><span class=\"line\">        self.__name = n</span><br><span class=\"line\">    <span class=\"comment\">#设置 name 属性值的函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setname</span><span class=\"params\">(self,n)</span>:</span></span><br><span class=\"line\">        self.__name = n</span><br><span class=\"line\">    <span class=\"comment\">#访问nema属性值的函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getname</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__name</span><br><span class=\"line\">    <span class=\"comment\">#删除name属性值的函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delname</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.__name=<span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">    <span class=\"comment\">#为name 属性配置 property() 函数</span></span><br><span class=\"line\">    name = property(getname, setname, delname, <span class=\"string\">'指明出处'</span>)</span><br><span class=\"line\"><span class=\"comment\">#调取说明文档的 2 种方式</span></span><br><span class=\"line\"><span class=\"comment\">#print(CLanguage.name.__doc__)</span></span><br><span class=\"line\">help(CLanguage.name)</span><br><span class=\"line\">clang = CLanguage(<span class=\"string\">\"C语言中文网\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#调用 getname() 方法</span></span><br><span class=\"line\">print(clang.name)</span><br><span class=\"line\"><span class=\"comment\">#调用 setname() 方法</span></span><br><span class=\"line\">clang.name=<span class=\"string\">\"Python教程\"</span></span><br><span class=\"line\">print(clang.name)</span><br><span class=\"line\"><span class=\"comment\">#调用 delname() 方法</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> clang.name</span><br><span class=\"line\">print(clang.name)</span><br></pre></td></tr></table></figure><p><font color=\"red\">由于getname()方法中需要返回 name 属性，如果使用 self.name的话，其本身又被调用 getname()，这将会先入无限死循环。为了避免这种情况的出现，程序中的name属性必须设置为私有属性，即使用__name（前面有2个下划线）。</font></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = property(getname)    <span class=\"comment\"># name 属性可读，不可写，也不能删除</span></span><br><span class=\"line\">name = property(getname, setname,delname)    <span class=\"comment\">#name属性可读、可写、也可删除，就是没有说明文档</span></span><br></pre></td></tr></table></figure><h1 id=\"property装饰器\"><a class=\"markdownIt-Anchor\" href=\"#property装饰器\"></a> @property装饰器</h1><p>保护类的封装特性，又要让开发者可以使用“对象.属性”的方式操作操作类属性，除了使用 property() 函数，Python 还提供了 @property 装饰器。通过 @property 装饰器，可以直接通过方法名来访问方法，不需要在方法名后添加一对“（）”小括号。语法格式：</p><blockquote><p>@property<br>def 方法名(self)<br>代码块</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,area)</span>:</span></span><br><span class=\"line\">        self.__area = area</span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">area</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__area</span><br><span class=\"line\">rect = Rect(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"comment\">#直接通过方法名来访问 area 方法</span></span><br><span class=\"line\">print(<span class=\"string\">\"矩形的面积是：\"</span>,rect.area)</span><br></pre></td></tr></table></figure><p>使用＠property 修饰了area()方法，这样就使得该方法变成了 area 属性的 getter 方法。需要注意的是，如果类中只包含该方法，那么area属性将是一个只读属性。添加setter方法，需要用到setter装饰器，语法格式：</p><blockquote><p>@方法名.setter<br>def 方法名(self, value):<br>代码块</p></blockquote><p>删除deleter装饰器指定属性，语法格式为：</p><blockquote><p>@方法名.deleter<br>def 方法名(self):<br>代码块</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@area.setter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">area</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">    self.__area = value</span><br><span class=\"line\"><span class=\"meta\">@area.deleter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">area</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.__area = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure><h1 id=\"封装\"><a class=\"markdownIt-Anchor\" href=\"#封装\"></a> 封装</h1><p>Python并没有提供public、private这些修饰符。为了实现类的封装，Python采取了下面的方法：</p><ul><li>默认情况下，Python 类中的变量和方法都是公有（public）的，它们的名称前都没有下划线（_）；</li><li>如果类中的变量和函数，其名称以双下划线“__”开头，则该变量（函数）为私有变量（私有函数），其属性等同于 private。</li><li>定义以单下划线“_”开头的类属性或者类方法（例如 _name、_display(self)），这种类属性和类方法通常被视为私有属性和私有方法，虽然它们也能通过类对象正常访问，但这是一种约定俗称的用法</li></ul><blockquote><p>Python 类中还有以双下划线开头和结尾的类方法（例如类的构造函数__init__(self)），这些都是 Python 内部定义的，用于 Python 内部调用。我们自己定义类属性或者类方法时，不要使用这种格式。</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLanguage</span> :</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setname</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(name) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'名称长度必须大于3！'</span>)</span><br><span class=\"line\">        self.__name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getname</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__name</span><br><span class=\"line\">    <span class=\"comment\">#为 name 配置 setter 和 getter 方法</span></span><br><span class=\"line\">    name = property(getname, setname)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setadd</span><span class=\"params\">(self, add)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> add.startswith(<span class=\"string\">\"http://\"</span>):</span><br><span class=\"line\">            self.__add = add</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'地址必须以 http:// 开头'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getadd</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__add</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">#为 add 配置 setter 和 getter 方法</span></span><br><span class=\"line\">    add = property(getadd, setadd)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#定义个私有方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(self.__name,self.__add)</span><br><span class=\"line\"></span><br><span class=\"line\">clang = CLanguage()</span><br><span class=\"line\">clang.name = <span class=\"string\">\"个人博客\"</span></span><br><span class=\"line\">clang.add = <span class=\"string\">\"http://forwardpeng.club\"</span></span><br><span class=\"line\">print(clang.name)</span><br><span class=\"line\">print(clang.add)</span><br></pre></td></tr></table></figure><p>CLanguage 将 name 和 add 属性都隐藏了起来，但同时也提供了可操作它们的“窗口”，也就是各自的 setter 和 getter 方法，这些方法都是公有（public）的。</p><p>不仅如此，以add属性的 setadd() 方法为例，通过在该方法内部添加控制逻辑，即通过调用 startswith()方法，控制用户输入的地址必须以“http://”开头，否则程序将会执行 raise 语句抛出 ValueError 异常。</p><blockquote><p>raise 这里可简单理解成，如果用户输入不规范，程序将会报错。</p></blockquote><p><font color=\"red\">以双下划线开头命名的类属性或类方法，Python 在底层实现时，将它们的名称都偷偷改成了 “_类名__属性（方法）名” 的格式。私有的类属性（例如 __name 和 __add），其底层的名称也改成了“_类名__属性名”的这种格式。可以通过修改 clang 对象的私有属性</font></p><h1 id=\"继承机制及其使用\"><a class=\"markdownIt-Anchor\" href=\"#继承机制及其使用\"></a> 继承机制及其使用</h1><p>Python 类的封装、继承、多态 3 大特性，前面章节已经详细介绍了 Python 类的封装，本节继续讲解 Python 类的继承机制。</p><p>继承机制经常用于创建和现有类功能类似的新类，又或是新类只需要在现有类基础上添加一些成员（属性和方法），但又不想直接将现有类代码复制给新类。也就是说，通过使用继承这种机制，可以轻松实现类的重复使用。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw</span><span class=\"params\">(self,content)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"画\"</span>,content)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Form</span><span class=\"params\">(Shape)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">area</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#....</span></span><br><span class=\"line\">        print(<span class=\"string\">\"此图形的面积为...\"</span>)</span><br></pre></td></tr></table></figure><p>class From(Shape) 就表示 From 继承 Shape。Python中，实现继承的类称为子类，被继承的类称为父类（也可称为基类、超类）。因此在上面这个样例中，From 是子类，Shape 是父类。</p><p>子类继承父类时，只需在定义子类时，将父类（可以是多个）放在子类之后的圆括号里即可。语法格式如下：</p><blockquote><p>class 类名(父类1, 父类2, …)：<br>#类定义部分</p></blockquote><p><font color=\"red\">如果该类没有显式指定继承自哪个类，则默认继承 object 类（object 类是 Python 中所有类的父类，即要么是直接父类，要么是间接父类）。另外，Python 的继承是多继承机制（和 C++ 一样），即一个子类可以同时拥有多个直接父类。</font></p><p>继承是相对子类来说的，即子类继承自父类；而派生是相对于父类来说的，即父类派生出子类。子类拥有父类所有的属性和方法，即便该属性或方法是私有（private）的</p><h2 id=\"多继承\"><a class=\"markdownIt-Anchor\" href=\"#多继承\"></a> 多继承</h2><p>使用多继承经常需要面临的问题是，多个父类中包含同名的类方法。对于这种情况，Python 的处置措施是：根据子类继承多个父类时这些父类的前后次序决定，即排在前面父类中的类方法会覆盖排在后面父类中的同名类方法。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.name = People</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"People类\"</span>,self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.name = Animal</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Animal类\"</span>,self.name)</span><br><span class=\"line\"><span class=\"comment\">#People中的 name 属性和 say() 会遮蔽 Animal 类中的</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(People, Animal)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">zhangsan = Person()</span><br><span class=\"line\">zhangsan.name = <span class=\"string\">\"张三\"</span></span><br><span class=\"line\">zhangsan.say()</span><br><span class=\"line\">OutPut：People类 张三</span><br></pre></td></tr></table></figure><h1 id=\"父类方法重写\"><a class=\"markdownIt-Anchor\" href=\"#父类方法重写\"></a> 父类方法重写</h1><p>类继承了父类，那么子类就拥有了父类所有的类属性和类方法。通常情况下，子类会在此基础上，扩展一些新的类属性和类方法。</p><blockquote><p>重写，有时又称覆盖，是一个意思，指的是对类中已有方法的内部实现进行修改。</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#鸟有翅膀</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isWing</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"鸟有翅膀\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">#鸟会飞</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fly</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"鸟会飞\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ostrich</span><span class=\"params\">(Bird)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 重写Bird类的fly()方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fly</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"鸵鸟不会飞\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建Ostrich对象</span></span><br><span class=\"line\">ostrich = Ostrich()</span><br><span class=\"line\"><span class=\"comment\">#调用 Ostrich 类中重写的 fly() 类方法</span></span><br><span class=\"line\">ostrich.fly()</span><br><span class=\"line\">结果：鸵鸟不会飞</span><br></pre></td></tr></table></figure><h2 id=\"如何调用被重写的方法\"><a class=\"markdownIt-Anchor\" href=\"#如何调用被重写的方法\"></a> 如何调用被重写的方法</h2><p>通过类名调用实例方法的这种方式，又被称为未绑定方法。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Ostrich对象</span></span><br><span class=\"line\">ostrich = Ostrich()</span><br><span class=\"line\"><span class=\"comment\">#调用 Bird 类中的 fly() 方法</span></span><br><span class=\"line\">Bird.fly(ostrich)</span><br><span class=\"line\">鸟会飞</span><br></pre></td></tr></table></figure><h1 id=\"使用python继承机制子类化内置类型\"><a class=\"markdownIt-Anchor\" href=\"#使用python继承机制子类化内置类型\"></a> 使用Python继承机制(子类化内置类型)</h1><p>内置类型子类化，其实就是自定义一个新类，使其继承有类似行为的内置类，通过重定义这个新类实现指定的功能。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">newDictError</span><span class=\"params\">(ValueError)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"如果向newDict 添加重复值，则引发此异常\"\"\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">newDict</span><span class=\"params\">(dict)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"不接受重复值的字典\"\"\"</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setitem__</span><span class=\"params\">(self,key,value)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> value <span class=\"keyword\">in</span> self.values():</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((key <span class=\"keyword\">in</span> self <span class=\"keyword\">and</span> self[key]!=value) <span class=\"keyword\">or</span> (key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self)):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> newDictError(<span class=\"string\">\"这个值已经存在，并对应不同的键\"</span>)</span><br><span class=\"line\">    super().__setitem__(key,value)</span><br><span class=\"line\">demoDict = newDict()</span><br><span class=\"line\">demoDict[<span class=\"string\">'key'</span>]=<span class=\"string\">'value'</span></span><br><span class=\"line\">demoDict[<span class=\"string\">'other_key'</span>]=<span class=\"string\">'value2'</span></span><br><span class=\"line\">print(demoDict)</span><br><span class=\"line\">demoDict[<span class=\"string\">'other_key'</span>]=<span class=\"string\">'value'</span></span><br><span class=\"line\">print(demoDict)</span><br></pre></td></tr></table></figure><p>newDict是Python中 dict 类型的子类，所以其大部分行为都和dict内置类相同，唯一不同之处在于，newDict不允许字典中多个键对应相同的值。如果用户试图添加具有相同值的新元素，则会引发 newDictError 异常，并给出提示信息。</p><h1 id=\"super函数调用父类构造方法\"><a class=\"markdownIt-Anchor\" href=\"#super函数调用父类构造方法\"></a> super()函数：调用父类构造方法</h1><p>Python 中子类会继承父类所有的类属性和类方法。严格来说，类的构造方法其实就是实例方法，因此毫无疑问，父类的构造方法，子类同样会继承。在子类中的构造方法中，调用父类构造方法的方式有 2 种，分别是：</p><ul><li>类可以看做一个独立空间，在类的外部调用其中的实例方法，可以向调用普通函数那样，只不过需要额外备注类名（此方式又称为未绑定方法）；</li><li>使用 super() 函数。但如果涉及多继承，该函数只能调用第一个直接父类的构造方法。</li></ul><blockquote><p>也就是说，涉及到多继承时，在子类构造函数中，调用第一个父类构造方法的方式有以上 2 种，而调用其它父类构造方法的方式只能使用未绑定方法。</p></blockquote><p>语法格式如下：</p><blockquote><p>super().<strong>init</strong>(self,…)</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"我是人，名字为：\"</span>,self.name)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,food)</span>:</span></span><br><span class=\"line\">        self.food = food</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"我是动物,我吃\"</span>,self.food)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(People, Animal)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#自定义构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,food)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#调用 People 类的构造方法</span></span><br><span class=\"line\">        super().__init__(name)</span><br><span class=\"line\">        <span class=\"comment\">#super(Person,self).__init__(name) #执行效果和上一行相同</span></span><br><span class=\"line\">        <span class=\"comment\">#People.__init__(self,name)#使用未绑定方法调用 People 类构造方法</span></span><br><span class=\"line\">        <span class=\"comment\">#调用其它父类的构造方法，需手动给 self 传值</span></span><br><span class=\"line\">        Animal.__init__(self,food)    </span><br><span class=\"line\">per = Person(<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"熟食\"</span>)</span><br><span class=\"line\">per.say()</span><br><span class=\"line\">per.display()</span><br><span class=\"line\"><span class=\"comment\"># 运行结果：</span></span><br><span class=\"line\">    我是人，名字为： zhangsan</span><br><span class=\"line\">    我是动物,我吃 熟食</span><br></pre></td></tr></table></figure><p>Person类自定义的构造方法中，调用People类构造方法，可以使用super() 函数，也可以使用未绑定方法。但是调用Animal类的构造方法，只能使用未绑定方法。</p><h1 id=\"super使用注意事项包含新式类和旧式类的区别\"><a class=\"markdownIt-Anchor\" href=\"#super使用注意事项包含新式类和旧式类的区别\"></a> super()使用注意事项（包含新式类和旧式类的区别）</h1><p>Python 2.x 版本中，为了向后兼容保留了旧式类。该版本中的新式类必须显式继承 object 或者其他新式类：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">newStyleClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">newStyleClass</span><span class=\"params\">(newStyleClass)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><p>Python3.x中，显式声明某个类继承自object似乎是冗余的。但如果考虑跨版本兼容，那么就必须将 object 作为所有基类的祖先，因为如果不这么做的话，这些类将被解释为旧式类，最终会导致难以诊断的问题。</p><h1 id=\"super使用注意事项\"><a class=\"markdownIt-Anchor\" href=\"#super使用注意事项\"></a> super()使用注意事项</h1><p>由于基类不会在__init__() 中被隐式地调用，需要程序员显式调用它们。这种情况下，当程序中包含多重继承的类层次结构时，使用super是非常危险的，往往会在类的初始化过程中出现问题。</p><h2 id=\"混用super与显式类调用\"><a class=\"markdownIt-Anchor\" href=\"#混用super与显式类调用\"></a> 混用super与显式类调用</h2><p>C类使用了 <strong>init</strong>() 方法调用它的基类，会造成B类被调用了2次：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"A\"</span>,end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"B\"</span>,end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(A,B)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"C\"</span>,end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">        A.__init__(self)</span><br><span class=\"line\">        B.__init__(self)</span><br><span class=\"line\">print(<span class=\"string\">\"MRO:\"</span>,[x.__name__ <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> C.__mro__])</span><br><span class=\"line\">C()</span><br><span class=\"line\">运行结果为：</span><br><span class=\"line\">MRO: [<span class=\"string\">'C'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'object'</span>]</span><br><span class=\"line\">C A B B</span><br></pre></td></tr></table></figure><p>C的实例调用A.<strong>init</strong>(self)，使得super(A,self).<strong>init</strong>() 调用了B.<strong>init</strong>()方法。换句话说，super应该被用到整个类的层次结构中。</p><h2 id=\"不同种类的参数\"><a class=\"markdownIt-Anchor\" href=\"#不同种类的参数\"></a> 不同种类的参数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">commonBase</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,*args,**kwargs)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"commonBase\"</span>)</span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">base1</span><span class=\"params\">(commonBase)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,*args,**kwargs)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"base1\"</span>)</span><br><span class=\"line\">        super().__init__(*args,**kwargs)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">base2</span><span class=\"params\">(commonBase)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,*args,**kwargs)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"base2\"</span>)</span><br><span class=\"line\">        super().__init__(*args,**kwargs)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myClass</span><span class=\"params\">(base1,base2)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,arg)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"my base\"</span>)</span><br><span class=\"line\">        super().__init__(arg)</span><br><span class=\"line\">myClass(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure><p>使用*args和**kwargs包装的参数和关键字参数，但是由于任何参数都可以传入，所有构造函数都可以接受任何类型的参数，这会导致代码变得脆弱。另一种解决方法是在 MyClass 中显式地使用特定类的 <strong>init</strong>() 调用，但这无疑会导致第一种错误。</p><h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2><ul><li>尽可能避免使用多继承，可以使用一些设计模式来替代它；</li><li>super的使用必须一致，即在类的层次结构中，要么全部使用super，要么全不用。混用super和传统调用是一种混乱的写法；</li><li>如果代码需要兼容 Python 2.x，在 Python 3.x中应该显式地继承自 object。在 Python 2.x 中，没有指定任何祖先地类都被认定为旧式类。</li><li>调用父类时应提前查看类的层次结构，也就是使用类的__mro__属性或者mro()方法查看有关类的MRO。</li></ul><h1 id=\"slots限制类实例动态添加属性和方法\"><a class=\"markdownIt-Anchor\" href=\"#slots限制类实例动态添加属性和方法\"></a> <strong>slots</strong>:限制类实例动态添加属性和方法</h1><p>Python 提供了 <strong>slots</strong> 属性，通过它可以避免用户频繁的给实例对象动态地添加属性或方法。再次声明，<strong>slots</strong> 只能限制为实例对象动态添加属性和方法，而无法限制动态地为类添加属性和方法。</p><p>__slots__属性值其实就是一个元组，只有其中指定的元素，才可以作为动态添加的属性或者方法的名称。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLanguage</span>:</span></span><br><span class=\"line\">    __slots__ = (<span class=\"string\">'name'</span>,<span class=\"string\">'add'</span>,<span class=\"string\">'info'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>对于动态添加的方法，__slots__限制的是其方法名，并不限制参数的个数。只对当前所在的类起限制作用，如果为子类也设置有 <strong>slots</strong> 属性，那么子类实例对象允许动态添加的属性和方法，是子类中 <strong>slots</strong> 属性和父类 <strong>slots</strong> 属性的和。</p></blockquote><h1 id=\"type函数动态创建类\"><a class=\"markdownIt-Anchor\" href=\"#type函数动态创建类\"></a> type()函数：动态创建类</h1><p>type() 函数属于 Python 内置函数，通常用来查看某个变量的具体类型。其实，type() 函数还有一个更高级的用法，即创建一个自定义类型（也就是创建一个类）。type() 函数的语法格式有 2 种，分别如下：</p><ul><li>type(obj)</li><li>type(name, bases, dict)</li></ul><p>以上这 2 种语法格式，各参数的含义及功能分别是：</p><ul><li>第一种语法格式用来查看某个变量（类对象）的具体类型，obj 表示某个变量或者类对象。</li><li>第二种语法格式用来创建类，其中 name 表示类的名称；bases 表示一个元组，其中存储的是该类的父类；dict 表示一个字典，用于表示类内定义的属性或者方法。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"我要学 Python！\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#使用 type() 函数创建类</span></span><br><span class=\"line\">CLanguage = type(<span class=\"string\">\"CLanguage\"</span>,(object,),dict(say = say, name = <span class=\"string\">\"个人博客\"</span>))</span><br><span class=\"line\"><span class=\"comment\">#创建一个 CLanguage 实例对象</span></span><br><span class=\"line\">clangs = CLanguage()</span><br><span class=\"line\"><span class=\"comment\">#调用 say() 方法和 name 属性</span></span><br><span class=\"line\">clangs.say()</span><br><span class=\"line\">print(clangs.name)</span><br></pre></td></tr></table></figure><blockquote><p>Python 元组语法规定，当 (object,) 元组中只有一个元素时，最后的逗号（,）不能省略。</p></blockquote><h1 id=\"metaclass元类\"><a class=\"markdownIt-Anchor\" href=\"#metaclass元类\"></a> MetaClass元类</h1><p>使用元类的主要目的就是为了实现在创建类时，能够动态地改变类中定义的属性或者方法。把一个类设计成MetaClass 元类，其必须符合以下条件：</p><ul><li>必须显式继承自type类；</li><li>类中需要定义并实现__new__()方法，该方法一定要返回该类的一个实例对象，因为在使用元类创建类时，该__new__()方法会自动被执行，用来修改新建的类。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#定义一个元类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstMetaClass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># cls代表动态修改的类</span></span><br><span class=\"line\">    <span class=\"comment\"># name代表动态修改的类名</span></span><br><span class=\"line\">    <span class=\"comment\"># bases代表被动态修改的类的所有父类</span></span><br><span class=\"line\">    <span class=\"comment\"># attr代表被动态修改的类的所有属性、方法组成的字典</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, name, bases, attrs)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 动态为该类添加一个name属性</span></span><br><span class=\"line\">        attrs[<span class=\"string\">'name'</span>] = <span class=\"string\">\"个人博客\"</span></span><br><span class=\"line\">        attrs[<span class=\"string\">'say'</span>] = <span class=\"keyword\">lambda</span> self: print(<span class=\"string\">\"调用say()实例方法\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> super().__new__(cls,name,bases,attrs)</span><br><span class=\"line\"><span class=\"comment\">#定义类时，指定元类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLanguage</span><span class=\"params\">(object,metaclass=FirstMetaClass)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><h1 id=\"python多态及用法\"><a class=\"markdownIt-Anchor\" href=\"#python多态及用法\"></a> Python多态及用法</h1><p>Python是弱类型语言，其最明显的特征是在使用变量时，无需为其指定具体的数据类型。这会导致一种情况，即同一变量可能会被先后赋值不同的类对象，类的多态特性，还要满足以下 2 个前提条件：</p><ul><li>继承：多态一定是发生在子类和父类之间；</li><li>重写：子类重写了父类的方法。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhoSay</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self,who)</span>:</span></span><br><span class=\"line\">        who.say()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLanguage</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"调用的是 Clanguage 类的say方法\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPython</span><span class=\"params\">(CLanguage)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"调用的是 CPython 类的say方法\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLinux</span><span class=\"params\">(CLanguage)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"调用的是 CLinux 类的say方法\"</span>)</span><br><span class=\"line\">a = WhoSay()</span><br><span class=\"line\"><span class=\"comment\">#调用 CLanguage 类的 say() 方法</span></span><br><span class=\"line\">a.say(CLanguage())</span><br><span class=\"line\"><span class=\"comment\">#调用 CPython 类的 say() 方法</span></span><br><span class=\"line\">a.say(CPython())</span><br><span class=\"line\"><span class=\"comment\">#调用 CLinux 类的 say() 方法</span></span><br><span class=\"line\">a.say(CLinux())</span><br></pre></td></tr></table></figure><p>通过给WhoSay类中的say()函数添加一个who参数，其内部利用传入的who调用 say() 方法。这意味着，当调用 WhoSay 类中的 say() 方法时，我们传给 who 参数的是哪个类的实例对象，它就会调用那个类中的 say()方法。</p><h1 id=\"枚举类定义及使用\"><a class=\"markdownIt-Anchor\" href=\"#枚举类定义及使用\"></a> 枚举类定义及使用</h1><p>实例：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Color</span><span class=\"params\">(Enum)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 为序列值指定value值</span></span><br><span class=\"line\">    red = <span class=\"number\">1</span></span><br><span class=\"line\">    green = <span class=\"number\">2</span></span><br><span class=\"line\">    blue = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure><p>Color 枚举类中，red、green、blue 都是该类的成员（可以理解为是类变量）。注意，枚举类的每个成员都由 2 部分组成，分别为 name 和 value，其中 name 属性值为该枚举值的变量名（如 red），value 代表该枚举值的序号（序号通常从 1 开始）。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 访问枚举类成员</span></span><br><span class=\"line\">print(Color.red)</span><br><span class=\"line\">print(Color[<span class=\"string\">'red'</span>])</span><br><span class=\"line\">print(Color(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\">#调取枚举成员中的 value 和 name</span></span><br><span class=\"line\">print(Color.red.value)</span><br><span class=\"line\">print(Color.red.name)</span><br></pre></td></tr></table></figure><p>枚举类成员之间可以用 == 或者 is 进行比较是否相等，但各个成员的值，不能在类的外部做任何修改。Python枚举类中各个成员必须保证 name 互不相同，但value可以相同。可以借助@unique装饰器，这样当枚举类中出现相同值的成员时，程序会报 ValueError错误。实例如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Color</span><span class=\"params\">(Enum)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 为序列值指定value值</span></span><br><span class=\"line\">    red = <span class=\"number\">1</span></span><br><span class=\"line\">    green = <span class=\"number\">1</span></span><br><span class=\"line\">    blue = <span class=\"number\">3</span></span><br><span class=\"line\">print(Color[<span class=\"string\">'green'</span>])</span><br><span class=\"line\">Output Color：red</span><br><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum,unique</span><br><span class=\"line\"><span class=\"comment\">#添加 unique 装饰器</span></span><br><span class=\"line\"><span class=\"meta\">@unique</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Color</span><span class=\"params\">(Enum)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 为序列值指定value值</span></span><br><span class=\"line\">    red = <span class=\"number\">1</span></span><br><span class=\"line\">    green = <span class=\"number\">1</span></span><br><span class=\"line\">    blue = <span class=\"number\">3</span></span><br><span class=\"line\">print(Color[<span class=\"string\">'green'</span>])</span><br><span class=\"line\">ValueError错误</span><br></pre></td></tr></table></figure><p>除了通过继承 Enum 类的方法创建枚举类，还可以使用Enum()函数创建枚举类。可接受2个参数，第一个用于指定枚举类的类名，第二个参数用于指定枚举类中的多个成员。</p><!-- rebuild by neat -->","more":"<!-- build time:Tue Apr 28 2020 20:01:14 GMT+0800 (GMT+08:00) --><h1 id=\"python描述符详解\"><a class=\"markdownIt-Anchor\" href=\"#python描述符详解\"></a> Python描述符详解</h1><p>述符就是一个类，只不过它定义了另一个类中属性的访问方式。换句话说，一个类可以将属性管理全权委托给描述符类。</p><blockquote><p>描述符是Python中复杂属性访问的基础，它在内部被用于实现property、方法、类方法、静态方法和super类型。</p></blockquote><p>描述符协议：</p><ul><li><strong>set</strong>(self, obj, type=None)：在设置属性时将调用这一方法（本节后续用 setter 表示）；</li><li><strong>get</strong>(self, obj, value)：在读取属性时将调用这一方法（本节后续用 getter 表示）；</li><li><strong>delete</strong>(self, obj)：对属性调用 del 时将调用这一方法。</li></ul><p>在每次查找属性时，描述符协议中的方法都由类对象的特殊方法 <strong>getattribute</strong>()调用（注意不要和__getattr__() 弄混）。也就是说，每次使用类对象.属性（或者 getattr(类对象，属性值)）的调用方式时，都会隐式地调用 <strong>getattribute</strong>()，它会按照下列顺序查找该属性：</p><ul><li>验证该属性是否为类实例对象的数据描述符；</li><li>如果不是，就查看该属性是否能在类实例对象的 <strong>dict</strong> 中找到；</li><li>最后，查看该属性是否为类实例对象的非数据描述符。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">revealAccess</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, initval = None, name = <span class=\"string\">'var'</span>)</span>:</span></span><br><span class=\"line\">        self.val = initval</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, obj, objtype)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Retrieving\"</span>,self.name)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.val</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__set__</span><span class=\"params\">(self, obj, val)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"updating\"</span>,self.name)</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myClass</span>:</span></span><br><span class=\"line\">    x = revealAccess(<span class=\"number\">10</span>,<span class=\"string\">'var \"x\"'</span>)</span><br><span class=\"line\">    y = <span class=\"number\">5</span></span><br><span class=\"line\">m = myClass()</span><br><span class=\"line\">print(m.x)</span><br><span class=\"line\">m.x = <span class=\"number\">20</span></span><br><span class=\"line\">print(m.x)</span><br><span class=\"line\">print(m.y)</span><br><span class=\"line\"></span><br><span class=\"line\">Retrieving var <span class=\"string\">\"x\"</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\">updating var <span class=\"string\">\"x\"</span></span><br><span class=\"line\">Retrieving var <span class=\"string\">\"x\"</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p>如果一个类的某个属性有数据描述符，那么每次查找这个属性时，都会调用描述符的__get__()方法，并返回它的值；同样，每次在对该属性赋值时，也会调用__set__()方法。</p><blockquote><p>除了使用描述符类自定义类属性被调用时做的操作外，还可以使用 property()函数或者@property装饰器</p></blockquote><h2 id=\"property函数定义属性\"><a class=\"markdownIt-Anchor\" href=\"#property函数定义属性\"></a> property()函数：定义属性</h2><p>Python 中提供了 property() 函数，可以实现在不破坏类封装原则的前提下，让开发者依旧使用“类对象.属性”的方式操作类中的属性。property()函数的基本使用格式如下：</p><blockquote><p>属性名=property(fget=None, fset=None, fdel=None, doc=None)</p></blockquote><p>其中，fget 参数用于指定获取该属性值的类方法，fset 参数用于指定设置该属性值的方法，fdel 参数用于指定删除该属性值的方法，最后的 doc 是一个文档字符串，用于说明此函数的作用。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLanguage</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,n)</span>:</span></span><br><span class=\"line\">        self.__name = n</span><br><span class=\"line\">    <span class=\"comment\">#设置 name 属性值的函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setname</span><span class=\"params\">(self,n)</span>:</span></span><br><span class=\"line\">        self.__name = n</span><br><span class=\"line\">    <span class=\"comment\">#访问nema属性值的函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getname</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__name</span><br><span class=\"line\">    <span class=\"comment\">#删除name属性值的函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delname</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.__name=<span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">    <span class=\"comment\">#为name 属性配置 property() 函数</span></span><br><span class=\"line\">    name = property(getname, setname, delname, <span class=\"string\">'指明出处'</span>)</span><br><span class=\"line\"><span class=\"comment\">#调取说明文档的 2 种方式</span></span><br><span class=\"line\"><span class=\"comment\">#print(CLanguage.name.__doc__)</span></span><br><span class=\"line\">help(CLanguage.name)</span><br><span class=\"line\">clang = CLanguage(<span class=\"string\">\"C语言中文网\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#调用 getname() 方法</span></span><br><span class=\"line\">print(clang.name)</span><br><span class=\"line\"><span class=\"comment\">#调用 setname() 方法</span></span><br><span class=\"line\">clang.name=<span class=\"string\">\"Python教程\"</span></span><br><span class=\"line\">print(clang.name)</span><br><span class=\"line\"><span class=\"comment\">#调用 delname() 方法</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> clang.name</span><br><span class=\"line\">print(clang.name)</span><br></pre></td></tr></table></figure><p><font color=\"red\">由于getname()方法中需要返回 name 属性，如果使用 self.name的话，其本身又被调用 getname()，这将会先入无限死循环。为了避免这种情况的出现，程序中的name属性必须设置为私有属性，即使用__name（前面有2个下划线）。</font></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = property(getname)    <span class=\"comment\"># name 属性可读，不可写，也不能删除</span></span><br><span class=\"line\">name = property(getname, setname,delname)    <span class=\"comment\">#name属性可读、可写、也可删除，就是没有说明文档</span></span><br></pre></td></tr></table></figure><h1 id=\"property装饰器\"><a class=\"markdownIt-Anchor\" href=\"#property装饰器\"></a> @property装饰器</h1><p>保护类的封装特性，又要让开发者可以使用“对象.属性”的方式操作操作类属性，除了使用 property() 函数，Python 还提供了 @property 装饰器。通过 @property 装饰器，可以直接通过方法名来访问方法，不需要在方法名后添加一对“（）”小括号。语法格式：</p><blockquote><p>@property<br>def 方法名(self)<br>代码块</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,area)</span>:</span></span><br><span class=\"line\">        self.__area = area</span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">area</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__area</span><br><span class=\"line\">rect = Rect(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"comment\">#直接通过方法名来访问 area 方法</span></span><br><span class=\"line\">print(<span class=\"string\">\"矩形的面积是：\"</span>,rect.area)</span><br></pre></td></tr></table></figure><p>使用＠property 修饰了area()方法，这样就使得该方法变成了 area 属性的 getter 方法。需要注意的是，如果类中只包含该方法，那么area属性将是一个只读属性。添加setter方法，需要用到setter装饰器，语法格式：</p><blockquote><p>@方法名.setter<br>def 方法名(self, value):<br>代码块</p></blockquote><p>删除deleter装饰器指定属性，语法格式为：</p><blockquote><p>@方法名.deleter<br>def 方法名(self):<br>代码块</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@area.setter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">area</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">    self.__area = value</span><br><span class=\"line\"><span class=\"meta\">@area.deleter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">area</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.__area = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure><h1 id=\"封装\"><a class=\"markdownIt-Anchor\" href=\"#封装\"></a> 封装</h1><p>Python并没有提供public、private这些修饰符。为了实现类的封装，Python采取了下面的方法：</p><ul><li>默认情况下，Python 类中的变量和方法都是公有（public）的，它们的名称前都没有下划线（_）；</li><li>如果类中的变量和函数，其名称以双下划线“__”开头，则该变量（函数）为私有变量（私有函数），其属性等同于 private。</li><li>定义以单下划线“_”开头的类属性或者类方法（例如 _name、_display(self)），这种类属性和类方法通常被视为私有属性和私有方法，虽然它们也能通过类对象正常访问，但这是一种约定俗称的用法</li></ul><blockquote><p>Python 类中还有以双下划线开头和结尾的类方法（例如类的构造函数__init__(self)），这些都是 Python 内部定义的，用于 Python 内部调用。我们自己定义类属性或者类方法时，不要使用这种格式。</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLanguage</span> :</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setname</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(name) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'名称长度必须大于3！'</span>)</span><br><span class=\"line\">        self.__name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getname</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__name</span><br><span class=\"line\">    <span class=\"comment\">#为 name 配置 setter 和 getter 方法</span></span><br><span class=\"line\">    name = property(getname, setname)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setadd</span><span class=\"params\">(self, add)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> add.startswith(<span class=\"string\">\"http://\"</span>):</span><br><span class=\"line\">            self.__add = add</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'地址必须以 http:// 开头'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getadd</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__add</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">#为 add 配置 setter 和 getter 方法</span></span><br><span class=\"line\">    add = property(getadd, setadd)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#定义个私有方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(self.__name,self.__add)</span><br><span class=\"line\"></span><br><span class=\"line\">clang = CLanguage()</span><br><span class=\"line\">clang.name = <span class=\"string\">\"个人博客\"</span></span><br><span class=\"line\">clang.add = <span class=\"string\">\"http://forwardpeng.club\"</span></span><br><span class=\"line\">print(clang.name)</span><br><span class=\"line\">print(clang.add)</span><br></pre></td></tr></table></figure><p>CLanguage 将 name 和 add 属性都隐藏了起来，但同时也提供了可操作它们的“窗口”，也就是各自的 setter 和 getter 方法，这些方法都是公有（public）的。</p><p>不仅如此，以add属性的 setadd() 方法为例，通过在该方法内部添加控制逻辑，即通过调用 startswith()方法，控制用户输入的地址必须以“http://”开头，否则程序将会执行 raise 语句抛出 ValueError 异常。</p><blockquote><p>raise 这里可简单理解成，如果用户输入不规范，程序将会报错。</p></blockquote><p><font color=\"red\">以双下划线开头命名的类属性或类方法，Python 在底层实现时，将它们的名称都偷偷改成了 “_类名__属性（方法）名” 的格式。私有的类属性（例如 __name 和 __add），其底层的名称也改成了“_类名__属性名”的这种格式。可以通过修改 clang 对象的私有属性</font></p><h1 id=\"继承机制及其使用\"><a class=\"markdownIt-Anchor\" href=\"#继承机制及其使用\"></a> 继承机制及其使用</h1><p>Python 类的封装、继承、多态 3 大特性，前面章节已经详细介绍了 Python 类的封装，本节继续讲解 Python 类的继承机制。</p><p>继承机制经常用于创建和现有类功能类似的新类，又或是新类只需要在现有类基础上添加一些成员（属性和方法），但又不想直接将现有类代码复制给新类。也就是说，通过使用继承这种机制，可以轻松实现类的重复使用。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw</span><span class=\"params\">(self,content)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"画\"</span>,content)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Form</span><span class=\"params\">(Shape)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">area</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#....</span></span><br><span class=\"line\">        print(<span class=\"string\">\"此图形的面积为...\"</span>)</span><br></pre></td></tr></table></figure><p>class From(Shape) 就表示 From 继承 Shape。Python中，实现继承的类称为子类，被继承的类称为父类（也可称为基类、超类）。因此在上面这个样例中，From 是子类，Shape 是父类。</p><p>子类继承父类时，只需在定义子类时，将父类（可以是多个）放在子类之后的圆括号里即可。语法格式如下：</p><blockquote><p>class 类名(父类1, 父类2, …)：<br>#类定义部分</p></blockquote><p><font color=\"red\">如果该类没有显式指定继承自哪个类，则默认继承 object 类（object 类是 Python 中所有类的父类，即要么是直接父类，要么是间接父类）。另外，Python 的继承是多继承机制（和 C++ 一样），即一个子类可以同时拥有多个直接父类。</font></p><p>继承是相对子类来说的，即子类继承自父类；而派生是相对于父类来说的，即父类派生出子类。子类拥有父类所有的属性和方法，即便该属性或方法是私有（private）的</p><h2 id=\"多继承\"><a class=\"markdownIt-Anchor\" href=\"#多继承\"></a> 多继承</h2><p>使用多继承经常需要面临的问题是，多个父类中包含同名的类方法。对于这种情况，Python 的处置措施是：根据子类继承多个父类时这些父类的前后次序决定，即排在前面父类中的类方法会覆盖排在后面父类中的同名类方法。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.name = People</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"People类\"</span>,self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.name = Animal</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Animal类\"</span>,self.name)</span><br><span class=\"line\"><span class=\"comment\">#People中的 name 属性和 say() 会遮蔽 Animal 类中的</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(People, Animal)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">zhangsan = Person()</span><br><span class=\"line\">zhangsan.name = <span class=\"string\">\"张三\"</span></span><br><span class=\"line\">zhangsan.say()</span><br><span class=\"line\">OutPut：People类 张三</span><br></pre></td></tr></table></figure><h1 id=\"父类方法重写\"><a class=\"markdownIt-Anchor\" href=\"#父类方法重写\"></a> 父类方法重写</h1><p>类继承了父类，那么子类就拥有了父类所有的类属性和类方法。通常情况下，子类会在此基础上，扩展一些新的类属性和类方法。</p><blockquote><p>重写，有时又称覆盖，是一个意思，指的是对类中已有方法的内部实现进行修改。</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#鸟有翅膀</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isWing</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"鸟有翅膀\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">#鸟会飞</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fly</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"鸟会飞\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ostrich</span><span class=\"params\">(Bird)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 重写Bird类的fly()方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fly</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"鸵鸟不会飞\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建Ostrich对象</span></span><br><span class=\"line\">ostrich = Ostrich()</span><br><span class=\"line\"><span class=\"comment\">#调用 Ostrich 类中重写的 fly() 类方法</span></span><br><span class=\"line\">ostrich.fly()</span><br><span class=\"line\">结果：鸵鸟不会飞</span><br></pre></td></tr></table></figure><h2 id=\"如何调用被重写的方法\"><a class=\"markdownIt-Anchor\" href=\"#如何调用被重写的方法\"></a> 如何调用被重写的方法</h2><p>通过类名调用实例方法的这种方式，又被称为未绑定方法。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Ostrich对象</span></span><br><span class=\"line\">ostrich = Ostrich()</span><br><span class=\"line\"><span class=\"comment\">#调用 Bird 类中的 fly() 方法</span></span><br><span class=\"line\">Bird.fly(ostrich)</span><br><span class=\"line\">鸟会飞</span><br></pre></td></tr></table></figure><h1 id=\"使用python继承机制子类化内置类型\"><a class=\"markdownIt-Anchor\" href=\"#使用python继承机制子类化内置类型\"></a> 使用Python继承机制(子类化内置类型)</h1><p>内置类型子类化，其实就是自定义一个新类，使其继承有类似行为的内置类，通过重定义这个新类实现指定的功能。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">newDictError</span><span class=\"params\">(ValueError)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"如果向newDict 添加重复值，则引发此异常\"\"\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">newDict</span><span class=\"params\">(dict)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"不接受重复值的字典\"\"\"</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setitem__</span><span class=\"params\">(self,key,value)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> value <span class=\"keyword\">in</span> self.values():</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((key <span class=\"keyword\">in</span> self <span class=\"keyword\">and</span> self[key]!=value) <span class=\"keyword\">or</span> (key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self)):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> newDictError(<span class=\"string\">\"这个值已经存在，并对应不同的键\"</span>)</span><br><span class=\"line\">    super().__setitem__(key,value)</span><br><span class=\"line\">demoDict = newDict()</span><br><span class=\"line\">demoDict[<span class=\"string\">'key'</span>]=<span class=\"string\">'value'</span></span><br><span class=\"line\">demoDict[<span class=\"string\">'other_key'</span>]=<span class=\"string\">'value2'</span></span><br><span class=\"line\">print(demoDict)</span><br><span class=\"line\">demoDict[<span class=\"string\">'other_key'</span>]=<span class=\"string\">'value'</span></span><br><span class=\"line\">print(demoDict)</span><br></pre></td></tr></table></figure><p>newDict是Python中 dict 类型的子类，所以其大部分行为都和dict内置类相同，唯一不同之处在于，newDict不允许字典中多个键对应相同的值。如果用户试图添加具有相同值的新元素，则会引发 newDictError 异常，并给出提示信息。</p><h1 id=\"super函数调用父类构造方法\"><a class=\"markdownIt-Anchor\" href=\"#super函数调用父类构造方法\"></a> super()函数：调用父类构造方法</h1><p>Python 中子类会继承父类所有的类属性和类方法。严格来说，类的构造方法其实就是实例方法，因此毫无疑问，父类的构造方法，子类同样会继承。在子类中的构造方法中，调用父类构造方法的方式有 2 种，分别是：</p><ul><li>类可以看做一个独立空间，在类的外部调用其中的实例方法，可以向调用普通函数那样，只不过需要额外备注类名（此方式又称为未绑定方法）；</li><li>使用 super() 函数。但如果涉及多继承，该函数只能调用第一个直接父类的构造方法。</li></ul><blockquote><p>也就是说，涉及到多继承时，在子类构造函数中，调用第一个父类构造方法的方式有以上 2 种，而调用其它父类构造方法的方式只能使用未绑定方法。</p></blockquote><p>语法格式如下：</p><blockquote><p>super().<strong>init</strong>(self,…)</p></blockquote><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"我是人，名字为：\"</span>,self.name)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,food)</span>:</span></span><br><span class=\"line\">        self.food = food</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"我是动物,我吃\"</span>,self.food)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(People, Animal)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#自定义构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,food)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#调用 People 类的构造方法</span></span><br><span class=\"line\">        super().__init__(name)</span><br><span class=\"line\">        <span class=\"comment\">#super(Person,self).__init__(name) #执行效果和上一行相同</span></span><br><span class=\"line\">        <span class=\"comment\">#People.__init__(self,name)#使用未绑定方法调用 People 类构造方法</span></span><br><span class=\"line\">        <span class=\"comment\">#调用其它父类的构造方法，需手动给 self 传值</span></span><br><span class=\"line\">        Animal.__init__(self,food)    </span><br><span class=\"line\">per = Person(<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"熟食\"</span>)</span><br><span class=\"line\">per.say()</span><br><span class=\"line\">per.display()</span><br><span class=\"line\"><span class=\"comment\"># 运行结果：</span></span><br><span class=\"line\">    我是人，名字为： zhangsan</span><br><span class=\"line\">    我是动物,我吃 熟食</span><br></pre></td></tr></table></figure><p>Person类自定义的构造方法中，调用People类构造方法，可以使用super() 函数，也可以使用未绑定方法。但是调用Animal类的构造方法，只能使用未绑定方法。</p><h1 id=\"super使用注意事项包含新式类和旧式类的区别\"><a class=\"markdownIt-Anchor\" href=\"#super使用注意事项包含新式类和旧式类的区别\"></a> super()使用注意事项（包含新式类和旧式类的区别）</h1><p>Python 2.x 版本中，为了向后兼容保留了旧式类。该版本中的新式类必须显式继承 object 或者其他新式类：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">newStyleClass</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">newStyleClass</span><span class=\"params\">(newStyleClass)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><p>Python3.x中，显式声明某个类继承自object似乎是冗余的。但如果考虑跨版本兼容，那么就必须将 object 作为所有基类的祖先，因为如果不这么做的话，这些类将被解释为旧式类，最终会导致难以诊断的问题。</p><h1 id=\"super使用注意事项\"><a class=\"markdownIt-Anchor\" href=\"#super使用注意事项\"></a> super()使用注意事项</h1><p>由于基类不会在__init__() 中被隐式地调用，需要程序员显式调用它们。这种情况下，当程序中包含多重继承的类层次结构时，使用super是非常危险的，往往会在类的初始化过程中出现问题。</p><h2 id=\"混用super与显式类调用\"><a class=\"markdownIt-Anchor\" href=\"#混用super与显式类调用\"></a> 混用super与显式类调用</h2><p>C类使用了 <strong>init</strong>() 方法调用它的基类，会造成B类被调用了2次：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"A\"</span>,end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"B\"</span>,end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(A,B)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"C\"</span>,end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">        A.__init__(self)</span><br><span class=\"line\">        B.__init__(self)</span><br><span class=\"line\">print(<span class=\"string\">\"MRO:\"</span>,[x.__name__ <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> C.__mro__])</span><br><span class=\"line\">C()</span><br><span class=\"line\">运行结果为：</span><br><span class=\"line\">MRO: [<span class=\"string\">'C'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'object'</span>]</span><br><span class=\"line\">C A B B</span><br></pre></td></tr></table></figure><p>C的实例调用A.<strong>init</strong>(self)，使得super(A,self).<strong>init</strong>() 调用了B.<strong>init</strong>()方法。换句话说，super应该被用到整个类的层次结构中。</p><h2 id=\"不同种类的参数\"><a class=\"markdownIt-Anchor\" href=\"#不同种类的参数\"></a> 不同种类的参数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">commonBase</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,*args,**kwargs)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"commonBase\"</span>)</span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">base1</span><span class=\"params\">(commonBase)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,*args,**kwargs)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"base1\"</span>)</span><br><span class=\"line\">        super().__init__(*args,**kwargs)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">base2</span><span class=\"params\">(commonBase)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,*args,**kwargs)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"base2\"</span>)</span><br><span class=\"line\">        super().__init__(*args,**kwargs)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myClass</span><span class=\"params\">(base1,base2)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,arg)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"my base\"</span>)</span><br><span class=\"line\">        super().__init__(arg)</span><br><span class=\"line\">myClass(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure><p>使用*args和**kwargs包装的参数和关键字参数，但是由于任何参数都可以传入，所有构造函数都可以接受任何类型的参数，这会导致代码变得脆弱。另一种解决方法是在 MyClass 中显式地使用特定类的 <strong>init</strong>() 调用，但这无疑会导致第一种错误。</p><h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2><ul><li>尽可能避免使用多继承，可以使用一些设计模式来替代它；</li><li>super的使用必须一致，即在类的层次结构中，要么全部使用super，要么全不用。混用super和传统调用是一种混乱的写法；</li><li>如果代码需要兼容 Python 2.x，在 Python 3.x中应该显式地继承自 object。在 Python 2.x 中，没有指定任何祖先地类都被认定为旧式类。</li><li>调用父类时应提前查看类的层次结构，也就是使用类的__mro__属性或者mro()方法查看有关类的MRO。</li></ul><h1 id=\"slots限制类实例动态添加属性和方法\"><a class=\"markdownIt-Anchor\" href=\"#slots限制类实例动态添加属性和方法\"></a> <strong>slots</strong>:限制类实例动态添加属性和方法</h1><p>Python 提供了 <strong>slots</strong> 属性，通过它可以避免用户频繁的给实例对象动态地添加属性或方法。再次声明，<strong>slots</strong> 只能限制为实例对象动态添加属性和方法，而无法限制动态地为类添加属性和方法。</p><p>__slots__属性值其实就是一个元组，只有其中指定的元素，才可以作为动态添加的属性或者方法的名称。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLanguage</span>:</span></span><br><span class=\"line\">    __slots__ = (<span class=\"string\">'name'</span>,<span class=\"string\">'add'</span>,<span class=\"string\">'info'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>对于动态添加的方法，__slots__限制的是其方法名，并不限制参数的个数。只对当前所在的类起限制作用，如果为子类也设置有 <strong>slots</strong> 属性，那么子类实例对象允许动态添加的属性和方法，是子类中 <strong>slots</strong> 属性和父类 <strong>slots</strong> 属性的和。</p></blockquote><h1 id=\"type函数动态创建类\"><a class=\"markdownIt-Anchor\" href=\"#type函数动态创建类\"></a> type()函数：动态创建类</h1><p>type() 函数属于 Python 内置函数，通常用来查看某个变量的具体类型。其实，type() 函数还有一个更高级的用法，即创建一个自定义类型（也就是创建一个类）。type() 函数的语法格式有 2 种，分别如下：</p><ul><li>type(obj)</li><li>type(name, bases, dict)</li></ul><p>以上这 2 种语法格式，各参数的含义及功能分别是：</p><ul><li>第一种语法格式用来查看某个变量（类对象）的具体类型，obj 表示某个变量或者类对象。</li><li>第二种语法格式用来创建类，其中 name 表示类的名称；bases 表示一个元组，其中存储的是该类的父类；dict 表示一个字典，用于表示类内定义的属性或者方法。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"我要学 Python！\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#使用 type() 函数创建类</span></span><br><span class=\"line\">CLanguage = type(<span class=\"string\">\"CLanguage\"</span>,(object,),dict(say = say, name = <span class=\"string\">\"个人博客\"</span>))</span><br><span class=\"line\"><span class=\"comment\">#创建一个 CLanguage 实例对象</span></span><br><span class=\"line\">clangs = CLanguage()</span><br><span class=\"line\"><span class=\"comment\">#调用 say() 方法和 name 属性</span></span><br><span class=\"line\">clangs.say()</span><br><span class=\"line\">print(clangs.name)</span><br></pre></td></tr></table></figure><blockquote><p>Python 元组语法规定，当 (object,) 元组中只有一个元素时，最后的逗号（,）不能省略。</p></blockquote><h1 id=\"metaclass元类\"><a class=\"markdownIt-Anchor\" href=\"#metaclass元类\"></a> MetaClass元类</h1><p>使用元类的主要目的就是为了实现在创建类时，能够动态地改变类中定义的属性或者方法。把一个类设计成MetaClass 元类，其必须符合以下条件：</p><ul><li>必须显式继承自type类；</li><li>类中需要定义并实现__new__()方法，该方法一定要返回该类的一个实例对象，因为在使用元类创建类时，该__new__()方法会自动被执行，用来修改新建的类。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#定义一个元类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstMetaClass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># cls代表动态修改的类</span></span><br><span class=\"line\">    <span class=\"comment\"># name代表动态修改的类名</span></span><br><span class=\"line\">    <span class=\"comment\"># bases代表被动态修改的类的所有父类</span></span><br><span class=\"line\">    <span class=\"comment\"># attr代表被动态修改的类的所有属性、方法组成的字典</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, name, bases, attrs)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 动态为该类添加一个name属性</span></span><br><span class=\"line\">        attrs[<span class=\"string\">'name'</span>] = <span class=\"string\">\"个人博客\"</span></span><br><span class=\"line\">        attrs[<span class=\"string\">'say'</span>] = <span class=\"keyword\">lambda</span> self: print(<span class=\"string\">\"调用say()实例方法\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> super().__new__(cls,name,bases,attrs)</span><br><span class=\"line\"><span class=\"comment\">#定义类时，指定元类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLanguage</span><span class=\"params\">(object,metaclass=FirstMetaClass)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><h1 id=\"python多态及用法\"><a class=\"markdownIt-Anchor\" href=\"#python多态及用法\"></a> Python多态及用法</h1><p>Python是弱类型语言，其最明显的特征是在使用变量时，无需为其指定具体的数据类型。这会导致一种情况，即同一变量可能会被先后赋值不同的类对象，类的多态特性，还要满足以下 2 个前提条件：</p><ul><li>继承：多态一定是发生在子类和父类之间；</li><li>重写：子类重写了父类的方法。</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhoSay</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self,who)</span>:</span></span><br><span class=\"line\">        who.say()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLanguage</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"调用的是 Clanguage 类的say方法\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPython</span><span class=\"params\">(CLanguage)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"调用的是 CPython 类的say方法\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CLinux</span><span class=\"params\">(CLanguage)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"调用的是 CLinux 类的say方法\"</span>)</span><br><span class=\"line\">a = WhoSay()</span><br><span class=\"line\"><span class=\"comment\">#调用 CLanguage 类的 say() 方法</span></span><br><span class=\"line\">a.say(CLanguage())</span><br><span class=\"line\"><span class=\"comment\">#调用 CPython 类的 say() 方法</span></span><br><span class=\"line\">a.say(CPython())</span><br><span class=\"line\"><span class=\"comment\">#调用 CLinux 类的 say() 方法</span></span><br><span class=\"line\">a.say(CLinux())</span><br></pre></td></tr></table></figure><p>通过给WhoSay类中的say()函数添加一个who参数，其内部利用传入的who调用 say() 方法。这意味着，当调用 WhoSay 类中的 say() 方法时，我们传给 who 参数的是哪个类的实例对象，它就会调用那个类中的 say()方法。</p><h1 id=\"枚举类定义及使用\"><a class=\"markdownIt-Anchor\" href=\"#枚举类定义及使用\"></a> 枚举类定义及使用</h1><p>实例：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Color</span><span class=\"params\">(Enum)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 为序列值指定value值</span></span><br><span class=\"line\">    red = <span class=\"number\">1</span></span><br><span class=\"line\">    green = <span class=\"number\">2</span></span><br><span class=\"line\">    blue = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure><p>Color 枚举类中，red、green、blue 都是该类的成员（可以理解为是类变量）。注意，枚举类的每个成员都由 2 部分组成，分别为 name 和 value，其中 name 属性值为该枚举值的变量名（如 red），value 代表该枚举值的序号（序号通常从 1 开始）。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 访问枚举类成员</span></span><br><span class=\"line\">print(Color.red)</span><br><span class=\"line\">print(Color[<span class=\"string\">'red'</span>])</span><br><span class=\"line\">print(Color(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\">#调取枚举成员中的 value 和 name</span></span><br><span class=\"line\">print(Color.red.value)</span><br><span class=\"line\">print(Color.red.name)</span><br></pre></td></tr></table></figure><p>枚举类成员之间可以用 == 或者 is 进行比较是否相等，但各个成员的值，不能在类的外部做任何修改。Python枚举类中各个成员必须保证 name 互不相同，但value可以相同。可以借助@unique装饰器，这样当枚举类中出现相同值的成员时，程序会报 ValueError错误。实例如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Color</span><span class=\"params\">(Enum)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 为序列值指定value值</span></span><br><span class=\"line\">    red = <span class=\"number\">1</span></span><br><span class=\"line\">    green = <span class=\"number\">1</span></span><br><span class=\"line\">    blue = <span class=\"number\">3</span></span><br><span class=\"line\">print(Color[<span class=\"string\">'green'</span>])</span><br><span class=\"line\">Output Color：red</span><br><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum,unique</span><br><span class=\"line\"><span class=\"comment\">#添加 unique 装饰器</span></span><br><span class=\"line\"><span class=\"meta\">@unique</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Color</span><span class=\"params\">(Enum)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 为序列值指定value值</span></span><br><span class=\"line\">    red = <span class=\"number\">1</span></span><br><span class=\"line\">    green = <span class=\"number\">1</span></span><br><span class=\"line\">    blue = <span class=\"number\">3</span></span><br><span class=\"line\">print(Color[<span class=\"string\">'green'</span>])</span><br><span class=\"line\">ValueError错误</span><br></pre></td></tr></table></figure><p>除了通过继承 Enum 类的方法创建枚举类，还可以使用Enum()函数创建枚举类。可接受2个参数，第一个用于指定枚举类的类名，第二个参数用于指定枚举类中的多个成员。</p><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"},{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"}]}