{"title":"SQL-数据类型","slug":"SQL-数据类型","date":"2020-04-20T07:33:48.000Z","updated":"2020-04-21T10:47:08.216Z","comments":true,"path":"api/articles/SQL-数据类型.json","excerpt":null,"covers":null,"content":"<!-- build time:Fri Apr 24 2020 20:20:42 GMT+0800 (GMT+08:00) --><h1 id=\"数据类型简介\"><a class=\"markdownIt-Anchor\" href=\"#数据类型简介\"></a> 数据类型简介</h1><p>数据库中的每个列都应该有适当的数据类型，用于限制或允许该列中存储的数据。大概可以分为5种，分别是整数类型、浮点数类型和定点数类型、日期和时间类型、字符串类型、二进制类型等。</p><h2 id=\"数值类型\"><a class=\"markdownIt-Anchor\" href=\"#数值类型\"></a> 数值类型</h2><p>整数类型包括 TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT，浮点数类型包括 FLOAT 和 DOUBLE，定点数类型为 DECIMAL。</p><h2 id=\"日期时间类型\"><a class=\"markdownIt-Anchor\" href=\"#日期时间类型\"></a> 日期/时间类型</h2><p>包括YEAR、TIME、DATE、DATETIME和TIMESTAMP。</p><h2 id=\"字符串类型\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型\"></a> 字符串类型</h2><p>包括CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET等。</p><h2 id=\"二进制类型\"><a class=\"markdownIt-Anchor\" href=\"#二进制类型\"></a> 二进制类型</h2><h1 id=\"整数类型int-tinyint-smallint-mediumint-bigint\"><a class=\"markdownIt-Anchor\" href=\"#整数类型int-tinyint-smallint-mediumint-bigint\"></a> 整数类型(INT、TINYINT、SMALLINT、MEDIUMINT、BIGINT)</h1><p>整数类型其属性字段可添加AUTO-INCREMENT自增约束条件。</p><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>TINYINT</td><td>很小的整数(-128〜127)</td><td>1个字节</td></tr><tr><td>SMALLINT</td><td>小的整数(-32768〜32767)</td><td>2个字节</td></tr><tr><td>MEDIUMINT</td><td>中等大小的整数(\t-8388608〜8388607)</td><td>3个字节</td></tr><tr><td>INT(INTEGHR)</td><td>普通大小的整数(-2147483648〜2147483647)</td><td>4个字节</td></tr><tr><td>BIGINT</td><td>大整数(-9223372036854775808〜9223372036854775807)</td><td>8个字节</td></tr></tbody></table><p><font color=\"red\">注意：不同的整数类型有不同的取值范围，并且需要不同的存储空间，因此应根据实际需要选择最合适的类型，这样有利于提高查询的效率和节省存储空间。</font></p><h1 id=\"小数类型\"><a class=\"markdownIt-Anchor\" href=\"#小数类型\"></a> 小数类型</h1><p>使用浮点数和定点数来表示小数，浮点类型有两种，分别是单精度浮点数（FLOAT）和双精度浮点数（DOUBLE）；定点类型只有一种，就是 DECIMAL。</p><p>浮点类型和定点类型都可以用(M, D)来表示，其中M称为精度，表示总共的位数，取值范围M(1<sub>255)；D称为标度，表示小数的位数(1</sub>30，&lt;= M - 2)。<br>小数类型及其存储需求如下：</p><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th><th>有符号的取值范围</th><th>无符号取值范围</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4个字节</td><td>-3.402823466E+38～-1.175494351E-38</td><td>0 和 -1.175494351E-38～-3.402823466E+38。</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td><td>-1.7976931348623157E+308～-2.2250738585072014E-308</td><td>0 和 -2.2250738585072014E-308～-1.7976931348623157E+308</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td><td>NULL</td><td>NULL</td></tr></tbody></table><p><font color=\"red\">定点数以字符串形式存储，在对精度要求比较高的时候（如货币、科学数据），使用 DECIMAL 的类型比较好，另外两个浮点数进行减法和比较运算时也容易出问题，所以在使用浮点数时需要注意，并尽量避免做浮点数比较。</font></p><h1 id=\"日期和时间类型dtaetime-timestamp-date-time-year\"><a class=\"markdownIt-Anchor\" href=\"#日期和时间类型dtaetime-timestamp-date-time-year\"></a> 日期和时间类型(DTAETIME、TIMESTAMP、DATE、TIME、YEAR)</h1><p>日期与时间类型：</p><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901-2155</td><td>1个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01~9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table><h2 id=\"year类型\"><a class=\"markdownIt-Anchor\" href=\"#year类型\"></a> YEAR类型</h2><p>YEAR 类型是一个单字节类型，用于表示年，在存储时只需要 1 个字节。可以使用各种格式指定 YEAR，如下所示：</p><ul><li>以 4 位字符串或者 4 位数字格式表示的 YEAR，范围为 ‘1901’～’2155’。输入格式为 ‘YYYY’ 或者 YYYY，例如，输入 ‘2010’ 或 2010，插入数据库的值均为 2010。</li><li>以 2 位字符串格式表示的 YEAR，范围为 ‘00’ 到 ‘99’。‘00’～’69’ 和 ‘70’～’99’ 范围的值分别被转换为 2000～2069 和 1970～1999 范围的 YEAR 值。‘0’ 与 ‘00’ 的作用相同。插入超过取值范围的值将被转换为 2000。</li><li>以 2 位数字表示的 YEAR，范围为 1～99。1～99 和 70～99 范围的值分别被转换为 2001～2069 和 1970～1999 范围的 YEAR 值。注意，在这里0值将被转换为0000，而不是2000</li></ul><p><font color=\"red\">两位整数范围与两位字符串范围稍有不同。例如，插入 3000 年，读者可能会使用数字格式的 0 表示 YEAR，实际上，插入数据库的值为 0000，而不是所希望的 3000。只有使用字符串格式的 ‘0’ 或 ‘00’，才可以被正确解释为 3000</font></p><h2 id=\"time类型\"><a class=\"markdownIt-Anchor\" href=\"#time类型\"></a> TIME类型</h2><p>TIME 类型用于只需要时间信息的值，在存储时需要 3 个字节。格式为 HH:MM:SS。HH表示小时，MM表示分钟，SS表示秒。</p><ul><li>‘D HH：MM：SS’ 格式的字符串。还可以使用这些“非严格”的语法：‘HH：MM：SS’、‘HH：MM’、‘D HH’ 或 ‘SS’。这里的 D 表示日，可以取 0～34 之间的值。在插入数据库时，D 被转换为小时保存，格式为 “D*24+HH”。</li><li>‘HHMMSS’ 格式、没有间隔符的字符串或者 HHMMSS 格式的数值，假定是有意义的时间。例如，‘101112’ 被理解为’10：11：12’，但是 ‘106112’ 是不合法的（它有一个没有意义的分钟部分），在存储时将变为 00：00：00。</li></ul><p><font color=\"red\">注意：如果没有冒号，MySQL 解释值时，假定最右边的两位表示秒。TIME值中如果使用冒号则肯定被看作当天的时间，</font></p><h2 id=\"date类型\"><a class=\"markdownIt-Anchor\" href=\"#date类型\"></a> DATE类型</h2><p>DATE 类型用于仅需要日期值时，没有时间部分，在存储时需要 3 个字节。日期格式为 ‘YYYY-MM-DD’，其中 YYYY 表示年，MM 表示月，DD 表示日。在给 DATE 类型的字段赋值时，可以使用字符串类型或者数字类型的数据插入，只要符合 DATE 的日期格式即可</p><ul><li>以 ‘YYYY-MM-DD’ 或者 ‘YYYYMMDD’ 字符中格式表示的日期，取值范围为 ‘1000-01-01’～’9999-12-3’。例如，输入 ‘2015-12-31’ 或者 ‘20151231’，插入数据库的日期为2015-12-31</li><li>以 ‘YY-MM-DD’ 或者 ‘YYMMDD’ 字符串格式表示日期，在这里YY表示两位的年值。MySQL 解释两位年值的规则：‘00～69’ 范围的年值转换为 ‘2000<sub>2069’，'70</sub>99’ 范围的年值转换为 ‘1970～1999’。例如，输入 ‘15-12-31’，插入数据库的日期为 2015-12-31；输入 ‘991231’，插入数据库的日期为 1999-12-31。</li><li>以 YYMMDD 数字格式表示的日期，与前面相似，00~69 范围的年值转换为 2000～2069，80～99 范围的年值转换为 1980～1999。例如，输入 151231，插入数据库的日期为 2015-12-31，输入 991231，插入数据库的日期为 1999-12-31。</li><li>使用 CURRENT_DATE 或者 NOW()，插入当前系统日期。</li></ul><h2 id=\"datetime类型\"><a class=\"markdownIt-Anchor\" href=\"#datetime类型\"></a> DATETIME类型</h2><p>DATETIME 类型用于需要同时包含日期和时间信息的值，在存储时需要 8 个字节。日期格式为 ‘YYYY-MM-DD HH：MM：SS’，其中 YYYY 表示年，MM 表示月，DD 表示日，HH 表示小时，MM 表示分钟，SS 表示秒。可以使用字符串类型或者数字类型的数据插入，只要符合 DATETIME 的日期格式即可，如下所示:</p><ul><li>以 ‘YYYY-MM-DD HH：MM：SS’ 或者 ‘YYYYMMDDHHMMSS’ 字符串格式表示的日期，取值范围为 ‘1000-01-01 00：00：00’～’9999-12-3 23：59：59’。例如，输入 ‘2014-12-31 05：05：05’ 或者 '20141231050505’，插入数据库的 DATETIME 值都为 2014-12-31 05：05：05。</li><li>以 ‘YY-MM-DD HH：MM：SS’ 或者 ‘YYMMDDHHMMSS’ 字符串格式表示的日期，在这里 YY 表示两位的年值。</li><li>以 YYYYMMDDHHMMSS 或者 YYMMDDHHMMSS 数字格式表示的日期和时间。</li></ul><h2 id=\"timestamp类型\"><a class=\"markdownIt-Anchor\" href=\"#timestamp类型\"></a> TIMESTAMP类型</h2><p>TIMESTAMP 的显示格式与 DATETIME 相同，显示宽度固定在 19 个字符，日期格式为 YYYY-MM-DD HH：MM：SS，在存储时需要 4 个字节。但是 TIMESTAMP 列的取值范围小于 DATETIME 的取值范围，为 '1970-01-01 00：00：01’UTC～’2038-01-19 03：14：07’UTC。在插入数据时，要保证在合法的取值范围内。</p><ul><li>DATETIME 在存储日期数据时，按实际输入的格式存储，即输入什么就存储什么，与时区无关；</li><li>TIMESTAMP 值的存储是以 UTC（世界标准时间）格式保存的，存储时对当前时区进行转换，检索时再转换回当前时区。即查询时，根据当前时区的不同，显示的时间值是不同的。</li></ul><h1 id=\"字符串类型char-varchar-text-enum-set\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型char-varchar-text-enum-set\"></a> 字符串类型(CHAR、VARCHAR、TEXT、ENUM、SET)</h1><p>字符串类型用来存储字符串数据，还可以存储图片和声音的二进制数据。字符串可以区分或者不区分大小写的串比较，还可以进行正则表达式的匹配查找</p><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;=M&lt;=255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table><h2 id=\"char-和-varchar类型\"><a class=\"markdownIt-Anchor\" href=\"#char-和-varchar类型\"></a> CHAR 和 VARCHAR类型</h2><p>CHAR(M)为固定长度字符串，在定义时指定字符串列长。当保存时，在右侧填充空格以达到指定的长度。M 表示列的长度，范围是 0～255个字符。</p><table><thead><tr><th>插入值</th><th>CHAR(4)</th><th>存储需求</th><th>VARCHAR(4)</th><th>存储需求</th></tr></thead><tbody><tr><td>‘’</td><td>’ ’</td><td>4字节</td><td>‘’</td><td>1字节</td></tr><tr><td>‘ab’</td><td>‘ab’</td><td>4字节</td><td>‘ab’</td><td>3字节</td></tr><tr><td>‘abc’</td><td>‘abc’</td><td>4字节</td><td>‘abc’</td><td>4字节</td></tr><tr><td>‘abcd’</td><td>‘abcd’</td><td>4字节</td><td>‘abcd’</td><td>5字节</td></tr><tr><td>‘abcdef’</td><td>‘avcd’</td><td>4字节</td><td>‘abcd’</td><td>5字节</td></tr></tbody></table><h2 id=\"text类型\"><a class=\"markdownIt-Anchor\" href=\"#text类型\"></a> TEXT类型</h2><p>TEXT 列保存非二进制字符串，如文章内容、评论等。当保存或查询 TEXT 列的值时，不删除尾部空格。TEXT 类型分为 4 种：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。不同的 TEXT 类型的存储空间和数据长度不同。</p><ul><li>TINYTEXT 表示长度为255（28-1）字符的TEXT列。</li><li>TEXT 表示长度为 65535（216-1）字符的TEXT列。</li><li>MEDIUMTEXT 表示长度为 16777215（224-1）字符的 TEXT 列。</li><li>LONGTEXT 表示长度为 4294967295 或 4GB（232-1）字符的 TEXT 列。</li></ul><h2 id=\"enum类型\"><a class=\"markdownIt-Anchor\" href=\"#enum类型\"></a> ENUM类型</h2><p>ENUM 是一个字符串对象，值为表创建时列规定中枚举的一列值。其语法格式如下：</p><blockquote><p>&lt;字段名&gt; ENUM( ‘值1’, ‘值1’, …, ‘值n’ )</p></blockquote><p>ENUM值在内部用整数表示，每个枚举值均有一个索引值；列表值所允许的成员值从1开始编号，MySQL存储的就是这个索引编号，枚举最多可以有65535 个元素。NUM值依照列索引顺序排列，并且空字符串排在非空字符串前，NULL值排在其他所有枚举值前</p><h2 id=\"set类型\"><a class=\"markdownIt-Anchor\" href=\"#set类型\"></a> SET类型</h2><p>SET 是一个字符串的对象，可以有零或多个值，SET 列最多可以有 64 个成员，值为表创建时规定的一列值。指定包括多个 SET 成员的 SET 列值时，各成员之间用逗号,隔开，语法格式如下：</p><blockquote><p>SET( ‘值1’, ‘值2’, …, ‘值n’ )</p></blockquote><p>SET值在内部用整数表示，列表中每个值都有一个索引编号。当创建表时，SET成员值的尾部空格将自动删除。但与ENUM类型不同的是，ENUM 类型的字段只能从定义的列值中选择一个值插入，而SET类型的列可从定义的列值中选择多个字符的联合。</p><h2 id=\"二进制类型bit-binary-varbinary-blob\"><a class=\"markdownIt-Anchor\" href=\"#二进制类型bit-binary-varbinary-blob\"></a> 二进制类型(BIT、BINARY、VARBINARY、BLOB)</h2><p>支持两类字符型数据：文本字符串和二进制字符串。MySQL中的二进制字符串有 BIT、BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB。</p><h3 id=\"bit类型\"><a class=\"markdownIt-Anchor\" href=\"#bit类型\"></a> BIT类型</h3><p>位字段类型。M 表示每个值的位数，范围为 1～64。如果 M 被省略，默认值为 1。如果为 BIT(M) 列分配的值的长度小于 M 位，在值的左边用 0 填充。例如，为 BIT(6) 列分配一个值 b’101’，其效果与分配 b’000101’ 相同。</p><p>BIT 数据类型用来保存位字段值，例如以二进制的形式保存数据 13，13 的二进制形式为1101，在这里需要位数至少为4位的BIT类型，即可以定义列类型为BIT(4)。大于二进制1111的数据是不能插入BIT(4)类型的字段中的</p><h3 id=\"binary和varbinary类型\"><a class=\"markdownIt-Anchor\" href=\"#binary和varbinary类型\"></a> BINARY和VARBINARY类型</h3><p>BINARY 和 VARBINARY 类型类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字节字符串。使用的语法格式如下：</p><blockquote><p>列名称 BINARY(M) 或者 VARBINARY(M)</p></blockquote><p>BINARY类型的长度是固定的，指定长度后，不足最大长度的，将在它们右边填充“\\0”补齐，以达到指定长度。例如，指定列数据类型为BINARY(3)，当插入 a 时，存储的内容实际为 “\\a0\\0”，当插入ab时，实际存储的内容为“ab\\0”，无论存储的内容是否达到指定的长度，存储空间均为指定的值M。</p><h3 id=\"blob类型\"><a class=\"markdownIt-Anchor\" href=\"#blob类型\"></a> BLOB类型</h3><p>BLOB 是一个二进制的对象，用来存储可变数量的数据。BLOB 类型分为 4 种：TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB，它们可容纳值的最大长度不同，如下表所示</p><table><thead><tr><th>数据类型</th><th>存储范围</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>最大长度为255 (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^8-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>)字节</td></tr><tr><td>BLOB</td><td>最大长度为65535 (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{16}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>)字节</td></tr><tr><td>MEDIUMBLOB</td><td>最大长度为16777215 (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>24</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{24}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>)字节</td></tr><tr><td>LONGBLOB</td><td>最大长度为4294967295或4GB (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{31}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>)字节</td></tr></tbody></table><p><font color=\"red\">BLOB 列存储的是二进制字符串（字节字符串），TEXT 列存储的是非进制字符串（字符字符串）。BLOB 列是字符集，并且排序和比较基于列值字节的数值；TEXT 列有一个字符集，并且根据字符集对值进行排序和比较。</font></p><!-- rebuild by neat -->","more":"<!-- build time:Fri Apr 24 2020 20:20:42 GMT+0800 (GMT+08:00) --><h1 id=\"数据类型简介\"><a class=\"markdownIt-Anchor\" href=\"#数据类型简介\"></a> 数据类型简介</h1><p>数据库中的每个列都应该有适当的数据类型，用于限制或允许该列中存储的数据。大概可以分为5种，分别是整数类型、浮点数类型和定点数类型、日期和时间类型、字符串类型、二进制类型等。</p><h2 id=\"数值类型\"><a class=\"markdownIt-Anchor\" href=\"#数值类型\"></a> 数值类型</h2><p>整数类型包括 TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT，浮点数类型包括 FLOAT 和 DOUBLE，定点数类型为 DECIMAL。</p><h2 id=\"日期时间类型\"><a class=\"markdownIt-Anchor\" href=\"#日期时间类型\"></a> 日期/时间类型</h2><p>包括YEAR、TIME、DATE、DATETIME和TIMESTAMP。</p><h2 id=\"字符串类型\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型\"></a> 字符串类型</h2><p>包括CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET等。</p><h2 id=\"二进制类型\"><a class=\"markdownIt-Anchor\" href=\"#二进制类型\"></a> 二进制类型</h2><h1 id=\"整数类型int-tinyint-smallint-mediumint-bigint\"><a class=\"markdownIt-Anchor\" href=\"#整数类型int-tinyint-smallint-mediumint-bigint\"></a> 整数类型(INT、TINYINT、SMALLINT、MEDIUMINT、BIGINT)</h1><p>整数类型其属性字段可添加AUTO-INCREMENT自增约束条件。</p><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>TINYINT</td><td>很小的整数(-128〜127)</td><td>1个字节</td></tr><tr><td>SMALLINT</td><td>小的整数(-32768〜32767)</td><td>2个字节</td></tr><tr><td>MEDIUMINT</td><td>中等大小的整数(\t-8388608〜8388607)</td><td>3个字节</td></tr><tr><td>INT(INTEGHR)</td><td>普通大小的整数(-2147483648〜2147483647)</td><td>4个字节</td></tr><tr><td>BIGINT</td><td>大整数(-9223372036854775808〜9223372036854775807)</td><td>8个字节</td></tr></tbody></table><p><font color=\"red\">注意：不同的整数类型有不同的取值范围，并且需要不同的存储空间，因此应根据实际需要选择最合适的类型，这样有利于提高查询的效率和节省存储空间。</font></p><h1 id=\"小数类型\"><a class=\"markdownIt-Anchor\" href=\"#小数类型\"></a> 小数类型</h1><p>使用浮点数和定点数来表示小数，浮点类型有两种，分别是单精度浮点数（FLOAT）和双精度浮点数（DOUBLE）；定点类型只有一种，就是 DECIMAL。</p><p>浮点类型和定点类型都可以用(M, D)来表示，其中M称为精度，表示总共的位数，取值范围M(1<sub>255)；D称为标度，表示小数的位数(1</sub>30，&lt;= M - 2)。<br>小数类型及其存储需求如下：</p><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th><th>有符号的取值范围</th><th>无符号取值范围</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4个字节</td><td>-3.402823466E+38～-1.175494351E-38</td><td>0 和 -1.175494351E-38～-3.402823466E+38。</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td><td>-1.7976931348623157E+308～-2.2250738585072014E-308</td><td>0 和 -2.2250738585072014E-308～-1.7976931348623157E+308</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td><td>NULL</td><td>NULL</td></tr></tbody></table><p><font color=\"red\">定点数以字符串形式存储，在对精度要求比较高的时候（如货币、科学数据），使用 DECIMAL 的类型比较好，另外两个浮点数进行减法和比较运算时也容易出问题，所以在使用浮点数时需要注意，并尽量避免做浮点数比较。</font></p><h1 id=\"日期和时间类型dtaetime-timestamp-date-time-year\"><a class=\"markdownIt-Anchor\" href=\"#日期和时间类型dtaetime-timestamp-date-time-year\"></a> 日期和时间类型(DTAETIME、TIMESTAMP、DATE、TIME、YEAR)</h1><p>日期与时间类型：</p><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901-2155</td><td>1个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01~9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table><h2 id=\"year类型\"><a class=\"markdownIt-Anchor\" href=\"#year类型\"></a> YEAR类型</h2><p>YEAR 类型是一个单字节类型，用于表示年，在存储时只需要 1 个字节。可以使用各种格式指定 YEAR，如下所示：</p><ul><li>以 4 位字符串或者 4 位数字格式表示的 YEAR，范围为 ‘1901’～’2155’。输入格式为 ‘YYYY’ 或者 YYYY，例如，输入 ‘2010’ 或 2010，插入数据库的值均为 2010。</li><li>以 2 位字符串格式表示的 YEAR，范围为 ‘00’ 到 ‘99’。‘00’～’69’ 和 ‘70’～’99’ 范围的值分别被转换为 2000～2069 和 1970～1999 范围的 YEAR 值。‘0’ 与 ‘00’ 的作用相同。插入超过取值范围的值将被转换为 2000。</li><li>以 2 位数字表示的 YEAR，范围为 1～99。1～99 和 70～99 范围的值分别被转换为 2001～2069 和 1970～1999 范围的 YEAR 值。注意，在这里0值将被转换为0000，而不是2000</li></ul><p><font color=\"red\">两位整数范围与两位字符串范围稍有不同。例如，插入 3000 年，读者可能会使用数字格式的 0 表示 YEAR，实际上，插入数据库的值为 0000，而不是所希望的 3000。只有使用字符串格式的 ‘0’ 或 ‘00’，才可以被正确解释为 3000</font></p><h2 id=\"time类型\"><a class=\"markdownIt-Anchor\" href=\"#time类型\"></a> TIME类型</h2><p>TIME 类型用于只需要时间信息的值，在存储时需要 3 个字节。格式为 HH:MM:SS。HH表示小时，MM表示分钟，SS表示秒。</p><ul><li>‘D HH：MM：SS’ 格式的字符串。还可以使用这些“非严格”的语法：‘HH：MM：SS’、‘HH：MM’、‘D HH’ 或 ‘SS’。这里的 D 表示日，可以取 0～34 之间的值。在插入数据库时，D 被转换为小时保存，格式为 “D*24+HH”。</li><li>‘HHMMSS’ 格式、没有间隔符的字符串或者 HHMMSS 格式的数值，假定是有意义的时间。例如，‘101112’ 被理解为’10：11：12’，但是 ‘106112’ 是不合法的（它有一个没有意义的分钟部分），在存储时将变为 00：00：00。</li></ul><p><font color=\"red\">注意：如果没有冒号，MySQL 解释值时，假定最右边的两位表示秒。TIME值中如果使用冒号则肯定被看作当天的时间，</font></p><h2 id=\"date类型\"><a class=\"markdownIt-Anchor\" href=\"#date类型\"></a> DATE类型</h2><p>DATE 类型用于仅需要日期值时，没有时间部分，在存储时需要 3 个字节。日期格式为 ‘YYYY-MM-DD’，其中 YYYY 表示年，MM 表示月，DD 表示日。在给 DATE 类型的字段赋值时，可以使用字符串类型或者数字类型的数据插入，只要符合 DATE 的日期格式即可</p><ul><li>以 ‘YYYY-MM-DD’ 或者 ‘YYYYMMDD’ 字符中格式表示的日期，取值范围为 ‘1000-01-01’～’9999-12-3’。例如，输入 ‘2015-12-31’ 或者 ‘20151231’，插入数据库的日期为2015-12-31</li><li>以 ‘YY-MM-DD’ 或者 ‘YYMMDD’ 字符串格式表示日期，在这里YY表示两位的年值。MySQL 解释两位年值的规则：‘00～69’ 范围的年值转换为 ‘2000<sub>2069’，'70</sub>99’ 范围的年值转换为 ‘1970～1999’。例如，输入 ‘15-12-31’，插入数据库的日期为 2015-12-31；输入 ‘991231’，插入数据库的日期为 1999-12-31。</li><li>以 YYMMDD 数字格式表示的日期，与前面相似，00~69 范围的年值转换为 2000～2069，80～99 范围的年值转换为 1980～1999。例如，输入 151231，插入数据库的日期为 2015-12-31，输入 991231，插入数据库的日期为 1999-12-31。</li><li>使用 CURRENT_DATE 或者 NOW()，插入当前系统日期。</li></ul><h2 id=\"datetime类型\"><a class=\"markdownIt-Anchor\" href=\"#datetime类型\"></a> DATETIME类型</h2><p>DATETIME 类型用于需要同时包含日期和时间信息的值，在存储时需要 8 个字节。日期格式为 ‘YYYY-MM-DD HH：MM：SS’，其中 YYYY 表示年，MM 表示月，DD 表示日，HH 表示小时，MM 表示分钟，SS 表示秒。可以使用字符串类型或者数字类型的数据插入，只要符合 DATETIME 的日期格式即可，如下所示:</p><ul><li>以 ‘YYYY-MM-DD HH：MM：SS’ 或者 ‘YYYYMMDDHHMMSS’ 字符串格式表示的日期，取值范围为 ‘1000-01-01 00：00：00’～’9999-12-3 23：59：59’。例如，输入 ‘2014-12-31 05：05：05’ 或者 '20141231050505’，插入数据库的 DATETIME 值都为 2014-12-31 05：05：05。</li><li>以 ‘YY-MM-DD HH：MM：SS’ 或者 ‘YYMMDDHHMMSS’ 字符串格式表示的日期，在这里 YY 表示两位的年值。</li><li>以 YYYYMMDDHHMMSS 或者 YYMMDDHHMMSS 数字格式表示的日期和时间。</li></ul><h2 id=\"timestamp类型\"><a class=\"markdownIt-Anchor\" href=\"#timestamp类型\"></a> TIMESTAMP类型</h2><p>TIMESTAMP 的显示格式与 DATETIME 相同，显示宽度固定在 19 个字符，日期格式为 YYYY-MM-DD HH：MM：SS，在存储时需要 4 个字节。但是 TIMESTAMP 列的取值范围小于 DATETIME 的取值范围，为 '1970-01-01 00：00：01’UTC～’2038-01-19 03：14：07’UTC。在插入数据时，要保证在合法的取值范围内。</p><ul><li>DATETIME 在存储日期数据时，按实际输入的格式存储，即输入什么就存储什么，与时区无关；</li><li>TIMESTAMP 值的存储是以 UTC（世界标准时间）格式保存的，存储时对当前时区进行转换，检索时再转换回当前时区。即查询时，根据当前时区的不同，显示的时间值是不同的。</li></ul><h1 id=\"字符串类型char-varchar-text-enum-set\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型char-varchar-text-enum-set\"></a> 字符串类型(CHAR、VARCHAR、TEXT、ENUM、SET)</h1><p>字符串类型用来存储字符串数据，还可以存储图片和声音的二进制数据。字符串可以区分或者不区分大小写的串比较，还可以进行正则表达式的匹配查找</p><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;=M&lt;=255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table><h2 id=\"char-和-varchar类型\"><a class=\"markdownIt-Anchor\" href=\"#char-和-varchar类型\"></a> CHAR 和 VARCHAR类型</h2><p>CHAR(M)为固定长度字符串，在定义时指定字符串列长。当保存时，在右侧填充空格以达到指定的长度。M 表示列的长度，范围是 0～255个字符。</p><table><thead><tr><th>插入值</th><th>CHAR(4)</th><th>存储需求</th><th>VARCHAR(4)</th><th>存储需求</th></tr></thead><tbody><tr><td>‘’</td><td>’ ’</td><td>4字节</td><td>‘’</td><td>1字节</td></tr><tr><td>‘ab’</td><td>‘ab’</td><td>4字节</td><td>‘ab’</td><td>3字节</td></tr><tr><td>‘abc’</td><td>‘abc’</td><td>4字节</td><td>‘abc’</td><td>4字节</td></tr><tr><td>‘abcd’</td><td>‘abcd’</td><td>4字节</td><td>‘abcd’</td><td>5字节</td></tr><tr><td>‘abcdef’</td><td>‘avcd’</td><td>4字节</td><td>‘abcd’</td><td>5字节</td></tr></tbody></table><h2 id=\"text类型\"><a class=\"markdownIt-Anchor\" href=\"#text类型\"></a> TEXT类型</h2><p>TEXT 列保存非二进制字符串，如文章内容、评论等。当保存或查询 TEXT 列的值时，不删除尾部空格。TEXT 类型分为 4 种：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。不同的 TEXT 类型的存储空间和数据长度不同。</p><ul><li>TINYTEXT 表示长度为255（28-1）字符的TEXT列。</li><li>TEXT 表示长度为 65535（216-1）字符的TEXT列。</li><li>MEDIUMTEXT 表示长度为 16777215（224-1）字符的 TEXT 列。</li><li>LONGTEXT 表示长度为 4294967295 或 4GB（232-1）字符的 TEXT 列。</li></ul><h2 id=\"enum类型\"><a class=\"markdownIt-Anchor\" href=\"#enum类型\"></a> ENUM类型</h2><p>ENUM 是一个字符串对象，值为表创建时列规定中枚举的一列值。其语法格式如下：</p><blockquote><p>&lt;字段名&gt; ENUM( ‘值1’, ‘值1’, …, ‘值n’ )</p></blockquote><p>ENUM值在内部用整数表示，每个枚举值均有一个索引值；列表值所允许的成员值从1开始编号，MySQL存储的就是这个索引编号，枚举最多可以有65535 个元素。NUM值依照列索引顺序排列，并且空字符串排在非空字符串前，NULL值排在其他所有枚举值前</p><h2 id=\"set类型\"><a class=\"markdownIt-Anchor\" href=\"#set类型\"></a> SET类型</h2><p>SET 是一个字符串的对象，可以有零或多个值，SET 列最多可以有 64 个成员，值为表创建时规定的一列值。指定包括多个 SET 成员的 SET 列值时，各成员之间用逗号,隔开，语法格式如下：</p><blockquote><p>SET( ‘值1’, ‘值2’, …, ‘值n’ )</p></blockquote><p>SET值在内部用整数表示，列表中每个值都有一个索引编号。当创建表时，SET成员值的尾部空格将自动删除。但与ENUM类型不同的是，ENUM 类型的字段只能从定义的列值中选择一个值插入，而SET类型的列可从定义的列值中选择多个字符的联合。</p><h2 id=\"二进制类型bit-binary-varbinary-blob\"><a class=\"markdownIt-Anchor\" href=\"#二进制类型bit-binary-varbinary-blob\"></a> 二进制类型(BIT、BINARY、VARBINARY、BLOB)</h2><p>支持两类字符型数据：文本字符串和二进制字符串。MySQL中的二进制字符串有 BIT、BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB。</p><h3 id=\"bit类型\"><a class=\"markdownIt-Anchor\" href=\"#bit类型\"></a> BIT类型</h3><p>位字段类型。M 表示每个值的位数，范围为 1～64。如果 M 被省略，默认值为 1。如果为 BIT(M) 列分配的值的长度小于 M 位，在值的左边用 0 填充。例如，为 BIT(6) 列分配一个值 b’101’，其效果与分配 b’000101’ 相同。</p><p>BIT 数据类型用来保存位字段值，例如以二进制的形式保存数据 13，13 的二进制形式为1101，在这里需要位数至少为4位的BIT类型，即可以定义列类型为BIT(4)。大于二进制1111的数据是不能插入BIT(4)类型的字段中的</p><h3 id=\"binary和varbinary类型\"><a class=\"markdownIt-Anchor\" href=\"#binary和varbinary类型\"></a> BINARY和VARBINARY类型</h3><p>BINARY 和 VARBINARY 类型类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字节字符串。使用的语法格式如下：</p><blockquote><p>列名称 BINARY(M) 或者 VARBINARY(M)</p></blockquote><p>BINARY类型的长度是固定的，指定长度后，不足最大长度的，将在它们右边填充“\\0”补齐，以达到指定长度。例如，指定列数据类型为BINARY(3)，当插入 a 时，存储的内容实际为 “\\a0\\0”，当插入ab时，实际存储的内容为“ab\\0”，无论存储的内容是否达到指定的长度，存储空间均为指定的值M。</p><h3 id=\"blob类型\"><a class=\"markdownIt-Anchor\" href=\"#blob类型\"></a> BLOB类型</h3><p>BLOB 是一个二进制的对象，用来存储可变数量的数据。BLOB 类型分为 4 种：TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB，它们可容纳值的最大长度不同，如下表所示</p><table><thead><tr><th>数据类型</th><th>存储范围</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>最大长度为255 (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^8-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>)字节</td></tr><tr><td>BLOB</td><td>最大长度为65535 (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{16}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>)字节</td></tr><tr><td>MEDIUMBLOB</td><td>最大长度为16777215 (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>24</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{24}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>)字节</td></tr><tr><td>LONGBLOB</td><td>最大长度为4294967295或4GB (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{31}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>)字节</td></tr></tbody></table><p><font color=\"red\">BLOB 列存储的是二进制字符串（字节字符串），TEXT 列存储的是非进制字符串（字符字符串）。BLOB 列是字符集，并且排序和比较基于列值字节的数值；TEXT 列有一个字符集，并且根据字符集对值进行排序和比较。</font></p><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"},{"name":"数据库","path":"api/categories/数据库.json"}],"tags":[{"name":"SQL","path":"api/tags/SQL.json"},{"name":"数据库","path":"api/tags/数据库.json"}]}