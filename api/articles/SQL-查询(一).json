{"title":"SQL-查询(一)","slug":"SQL-查询(一)","date":"2020-04-18T09:49:11.000Z","updated":"2020-04-21T10:46:32.384Z","comments":true,"path":"api/articles/SQL-查询(一).json","excerpt":null,"covers":null,"content":"<!-- build time:Tue Apr 21 2020 21:50:16 GMT+0800 (GMT+08:00) --><h1 id=\"查询数据表\"><a class=\"markdownIt-Anchor\" href=\"#查询数据表\"></a> 查询数据表</h1><p>SELECT 语句来查询数据。查询数据是指从数据库中根据需求，使用不同的查询方式来获取不同的数据，是使用频率最高、最重要的操作。</p><blockquote><p>语法格式如下：<br><code>SELECT {* | &lt;字段列名&gt;} [ FROM &lt;表 1&gt;, &lt;表 2&gt;… [WHERE &lt;表达式&gt; [GROUP BY &lt;group by definition&gt; [HAVING &lt;expression&gt; [{&lt;operator&gt; &lt;expression&gt;}…]] [ORDER BY &lt;order by definition&gt;] [LIMIT[&lt;offset&gt;,] &lt;row count&gt;] ]</code></p></blockquote><p>其中，各条子句说明如下：</p><ul><li>{*|&lt;字段列名&gt;}包含星号通配符的字段列表，表示所要查询字段的名称。</li><li>&lt;表1&gt;，&lt;表2&gt;…，表1和表2表示查询数据的来源，可以是单个或多个。</li><li><strong>WHERE</strong>&lt;表达式&gt;是可选项，如果选择该项，将限定查询数据必须满足该查询条件。</li><li><strong>GROUP BY</strong>&lt;字段&gt;，该子句告诉数据库如何显示查询出来的数据，并按照指定的字段分组。</li><li><strong>ORDER BY</strong>&lt; 字段 &gt;]，按什么样的顺序显示查询出来的数据，可以进行的排序有升序（ASC）和降序（DESC），默认情况下是升序。</li><li><strong><code>[LIMIT[&lt;offset&gt;，]&lt;row count&gt;]</code></strong>，该子句告诉 MySQL 每次显示查询出来的数据条数。</li></ul><h2 id=\"查询表中所有字段\"><a class=\"markdownIt-Anchor\" href=\"#查询表中所有字段\"></a> 查询表中所有字段</h2><p><strong>1.</strong> 使用&quot;*&quot;查询表的所有字段</p><blockquote><p>语法格式如下：SELECT * FROM 表名;</p></blockquote><p><strong>2.</strong> 列出表的所有字段<br><strong>SELECT</strong>关键字后面的字段名为需要查找的字段，可以使用 DESC 命令查看表的结构。</p><h2 id=\"查询表中指定的字段\"><a class=\"markdownIt-Anchor\" href=\"#查询表中指定的字段\"></a> 查询表中指定的字段</h2><p>查询表中的某一个字段的语法格式为：</p><blockquote><p>SELECT &lt; 列名 &gt; FROM &lt; 表名 &gt;;</p></blockquote><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT name FROM tb_students_info;</span><br><span class=\"line\">+<span class=\"comment\">--------+</span></span><br><span class=\"line\">| name   |</span><br><span class=\"line\">+<span class=\"comment\">--------+</span></span><br><span class=\"line\">| Dany   |</span><br><span class=\"line\">| Thomas |</span><br><span class=\"line\">| Tom    |</span><br><span class=\"line\">+<span class=\"comment\">--------+</span></span><br><span class=\"line\">10 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"去重过滤重复数据\"><a class=\"markdownIt-Anchor\" href=\"#去重过滤重复数据\"></a> 去重(过滤重复数据)</h1><p>使用<strong>DISTINCT</strong>关键字指示 数据库消除重复的记录值。</p><blockquote><p>语法格式为：SELECT DISTINCT &lt;字段名&gt; FROM &lt;表名&gt;;</p></blockquote><h1 id=\"设置别名\"><a class=\"markdownIt-Anchor\" href=\"#设置别名\"></a> 设置别名</h1><h2 id=\"为表指定别名\"><a class=\"markdownIt-Anchor\" href=\"#为表指定别名\"></a> 为表指定别名</h2><p>当数据表名很长或者执行一些特殊查询的时候，为了方便操作，可以为表指定一个别名，</p><blockquote><p>语法格式为：&lt;表名&gt; [AS] &lt;别名&gt;</p></blockquote><p>使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT stu.name,stu.height FROM tb_students_info AS stu;</span><br><span class=\"line\">+<span class=\"comment\">--------+--------+</span></span><br><span class=\"line\">| name   | height |</span><br><span class=\"line\">+<span class=\"comment\">--------+--------+</span></span><br><span class=\"line\">| Dany   |    160 |</span><br><span class=\"line\">| Green  |    158 |</span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.04</span> sec)</span><br></pre></td></tr></table></figure><h2 id=\"为字段指定别名\"><a class=\"markdownIt-Anchor\" href=\"#为字段指定别名\"></a> 为字段指定别名</h2><p>每个 SELECT 后面指定输出的字段。有时为了显示结果更加直观，可以为字段指定一个别名。</p><blockquote><p>基本语法格式：&lt;字段名&gt; [AS] &lt;别名&gt;</p></blockquote><p>使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT name AS student_name, age AS student_age FROM tb_students_info;</span><br><span class=\"line\">+<span class=\"comment\">--------------+-------------+</span></span><br><span class=\"line\">| student_name | student_age |</span><br><span class=\"line\">+<span class=\"comment\">--------------+-------------+</span></span><br><span class=\"line\">| Dany         |          25 |</span><br><span class=\"line\">| Green        |          23 |</span><br></pre></td></tr></table></figure><h1 id=\"限制查询结果的记录条数\"><a class=\"markdownIt-Anchor\" href=\"#限制查询结果的记录条数\"></a> 限制查询结果的记录条数</h1><p><strong>SELECT</strong>语句时往往返回的是所有匹配的行，有些时候我们仅需要返回第一行或者前几行，这时候就需要用到数据库<strong>LIMT</strong>子句</p><blockquote><p>基本的语法格式：<code>&lt;LIMIT&gt; [&lt;位置偏移量&gt;,] &lt;行数&gt;</code></p></blockquote><p><strong>LIMIT</strong>接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from tb_students_info limit 1, 2;</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">| id | name | dept_id | age  | sex  | height | login_date          |</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">|  2 | jun  |       2 |   12 | F    |    222 | 1000-01-01 00:00:01 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"对查询结果进行排序\"><a class=\"markdownIt-Anchor\" href=\"#对查询结果进行排序\"></a> 对查询结果进行排序</h1><p>ORDER BY 子句主要用来将结果集中的数据按照一定的顺序进行排序。</p><blockquote><p>语法格式：ORDER BY {&lt;列名&gt; | &lt;表达式&gt; | &lt;位置&gt;} [ASC|DESC]</p></blockquote><p>语法说明如下：</p><ul><li><strong>列名</strong>：指定用于排序的列。可以指定多个列，列名之间用逗号分隔。</li><li><strong>表达式</strong>：指定用于排序的表达式。</li><li><strong>位置</strong>：指定用于排序的列在SELECT语句结果集中的位置，通常是正整数。</li><li><strong>ASC|DESC</strong>：关键字 ASC 表示按升序分组，关键字 DESC 表示按降序分组，其中 ASC 为默认值。这两个关键字必须位于对应的列名、表达式、列的位置之后。</li></ul><p>使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from tb_students_info ORDER by age;</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">| id | name | dept_id | age  | sex  | height | login_date          |</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">|  2 | jun  |       2 |   12 | F    |    222 | 1000-01-01 00:00:01 |</span><br><span class=\"line\">|  1 | peng |       2 |   25 | F    |    222 | 1000-01-01 00:00:00 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span>,height <span class=\"keyword\">FROM</span> tb_student_info <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> height <span class=\"keyword\">DESC</span>,<span class=\"keyword\">name</span> <span class=\"keyword\">ASC</span>;</span><br><span class=\"line\">+<span class=\"comment\">--------+--------+</span></span><br><span class=\"line\">| name   | height |</span><br><span class=\"line\">+<span class=\"comment\">--------+--------+</span></span><br><span class=\"line\">| Henry  |    185 |</span><br><span class=\"line\">| Thomas |    178 |</span><br></pre></td></tr></table></figure><p>注意：DESC 关键字只对前面的列进行降序排列，在这里只对 height 排序，而并没有对 name 进行排序，因此，height 按降序排序，而 name 仍按升序排序，如果要对多列进行降序排序，必须要在每一列的后面加 DESC 关键字。</p><h1 id=\"条件查询\"><a class=\"markdownIt-Anchor\" href=\"#条件查询\"></a> 条件查询</h1><p>使用 WHERE 子句来指定查询条件，从 FROM 子句的中间结果中选取适当的数据行，达到数据过滤的效果。</p><blockquote><p>语法格式：WHERE &lt;查询条件&gt; {&lt;判定运算1&gt;，&lt;判定运算2&gt;，…}</p></blockquote><p>运算的语法分类如下：</p><ul><li>&lt;表达式1&gt;{=|&lt;|&lt;=|&gt;|&gt;=|&lt;=&gt;|&lt;&gt;|！=}&lt;表达式2&gt;</li><li>&lt;表达式1&gt;[NOT]LIKE&lt;表达式2&gt;</li><li>&lt;表达式1&gt;[NOT][REGEXP|RLIKE]&lt;表达式2&gt;</li><li>&lt;表达式1&gt;[NOT]BETWEEN&lt;表达式2&gt;AND&lt;表达式3&gt;</li><li>&lt;表达式1&gt;IS[NOT]NULL</li></ul><h2 id=\"单一条件的查询语句\"><a class=\"markdownIt-Anchor\" href=\"#单一条件的查询语句\"></a> 单一条件的查询语句</h2><p>语句采用简单的相等过滤，使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name, age</span><br><span class=\"line\">    -&gt; from tb_students_info</span><br><span class=\"line\">    -&gt; where age&lt;=25;</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| name | age  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| peng |   25 |</span><br><span class=\"line\">| jun  |   12 |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id=\"多条件的查询语句\"><a class=\"markdownIt-Anchor\" href=\"#多条件的查询语句\"></a> 多条件的查询语句</h2><p>SQL在<strong>WHERE</strong>子句中使用<strong>AND</strong>操作符限定只有满足所有查询条件的记录才会被返回。使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from tb_students_info</span><br><span class=\"line\">    -&gt; where age&lt;35 and height &gt;170;</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">| id | name | dept_id | age  | sex  | height | login_date          |</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">|  1 | peng |       2 |   25 | F    |    222 | 1000-01-01 00:00:00 |</span><br><span class=\"line\">|  2 | jun  |       2 |   12 | F    |    222 | 1000-01-01 00:00:01 |</span><br><span class=\"line\">|  4 | Feng |       2 |   32 | F    |    175 | 1000-01-01 00:00:01 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id=\"使用like的模糊查询\"><a class=\"markdownIt-Anchor\" href=\"#使用like的模糊查询\"></a> 使用<strong>LIKE</strong>的模糊查询</h2><blockquote><p>字符串匹配语法格式：&lt;表达式1&gt; [NOT] LIKE &lt;表达式2&gt;</p></blockquote><p>相互间进行匹配运算的对象可以是CHAR、VARCHAR、TEXT、DATETIME 等数据类型。运算返回的结果是 TRUE 或 FALSE。通配符如下：</p><p><strong>1.百分号(%)</strong></p><p>百分号可以表示任何字符串，并且该字符串可以出现任意次。使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT name FROM tb_students_info</span><br><span class=\"line\">    -&gt; WHERE name LIKE '%e%';</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">| name  |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">| Green |</span><br><span class=\"line\">| Henry |</span><br><span class=\"line\">| Jane  |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"comment\"># 查找所有包含“e”字母的学生姓名</span></span><br></pre></td></tr></table></figure><ul><li>sql默认不区分大小写，除非更换字符集的校对规则</li><li>百分号不匹配空值</li><li>百分号可以代表搜索模式中给定位置的 0 个、1 个或多个字符。</li><li>尾空格可能会干扰通配符的匹配，一般可以在搜索模式的最后附加一个百分号。</li></ul><p><strong>2.下划线(_)</strong><br>下画线只匹配单个字符，而不是多个字符，也不是 0 个字符。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT name FROM tb_students_info</span><br><span class=\"line\">    -&gt; WHERE name LIKE '____y';</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">| name  |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">| Henry |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"comment\"># 查找所有以字母“y”结尾，且“y”前面只有 4 个字母</span></span><br></pre></td></tr></table></figure><h2 id=\"日期字段作为条件的查询语句\"><a class=\"markdownIt-Anchor\" href=\"#日期字段作为条件的查询语句\"></a> 日期字段作为条件的查询语句</h2><p>以日期字段作为条件，可以使用比较运算符设置查询条件，也可以使用 BETWEEN AND 运算符查询某个范围内的值。使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM tb_students_info</span><br><span class=\"line\">    -&gt; WHERE login_date&lt;'2016-01-01';</span><br><span class=\"line\">+<span class=\"comment\">----+-------+---------+------+------+--------+------------+</span></span><br><span class=\"line\">| id | name  | dept_id | age  | sex  | height | login_date |</span><br><span class=\"line\">+<span class=\"comment\">----+-------+---------+------+------+--------+------------+</span></span><br><span class=\"line\">|  1 | Dany  |       1 |   25 | F    |    160 | 2015-09-10 |</span><br><span class=\"line\">|  3 | Henry |       2 |   23 | M    |    185 | 2015-05-31 |</span><br></pre></td></tr></table></figure><h1 id=\"内连接查询inner-join\"><a class=\"markdownIt-Anchor\" href=\"#内连接查询inner-join\"></a> 内连接查询(INNER JOIN)</h1><p>利用条件表达式来消除交叉连接的某些数据行。关键字 INNER JOIN 连接两张表，并使用 ON 子句来设置连接条件。如果没有任何条件，INNER JOIN 和 CROSS JOIN 在语法上是等同的。</p><blockquote><p>语法格式：SELECT &lt;列名1，列名2 …&gt;<br>FROM &lt;表名1&gt; INNER JOIN &lt;表名2&gt; [ ON子句]</p></blockquote><p>语法说明如下：</p><ul><li>&lt;列名1，列名2…&gt;：需要检索的列名。</li><li>&lt;表名1&gt;&lt;表名2&gt;：进行内连接的两张表的表名。</li></ul><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT id,name,age,dept_name</span><br><span class=\"line\">    -&gt; FROM tb_students_info,tb_departments</span><br><span class=\"line\">    -&gt; WHERE tb_students_info.dept_id=tb_departments.dept_id;</span><br><span class=\"line\">+<span class=\"comment\">----+--------+------+-----------+</span></span><br><span class=\"line\">| id | name   | age  | dept_name |</span><br><span class=\"line\">+<span class=\"comment\">----+--------+------+-----------+</span></span><br><span class=\"line\">|  1 | Dany   |   25 | Computer  |</span><br><span class=\"line\">|  2 | Green  |   23 | Chinese   |</span><br><span class=\"line\">|  3 | Henry  |   23 | Math</span><br></pre></td></tr></table></figure><p>SELECT后面指定的列分别属于两个不同的表，id、name、age在表tb_students_info中，dept_name在表tb_departments。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT id,name,age,dept_name</span><br><span class=\"line\">    -&gt; FROM tb_students_info INNER JOIN tb_departments</span><br><span class=\"line\">    -&gt; WHERE tb_students_info.dept_id=tb_departments.dept_id;</span><br><span class=\"line\">+<span class=\"comment\">----+--------+------+-----------+</span></span><br><span class=\"line\">| id | name   | age  | dept_name |</span><br><span class=\"line\">+<span class=\"comment\">----+--------+------+-----------+</span></span><br><span class=\"line\">|  1 | Dany   |   25 | Computer  |</span><br><span class=\"line\">|  2 | Green  |   23 | Chinese   |</span><br><span class=\"line\">|  3 | Henry  |   23 | Math      |</span><br><span class=\"line\"><span class=\"comment\"># 使用INNER JOIN语法进行内连接查询</span></span><br></pre></td></tr></table></figure><h1 id=\"外连接查询leftright-join\"><a class=\"markdownIt-Anchor\" href=\"#外连接查询leftright-join\"></a> 外连接查询(LEFT/RIGHT JOIN)</h1><p>外连接更加注重两张表之间的关系。按照连接表的顺序，可以分为左外连接和右外连接。左外连接又称为左连接，在 FROM 子句中使用关键字 LEFT OUTER JOIN 或者 LEFT JOIN，用于接收该关键字左表（基表）的所有行，并用这些行与该关键字右表（参考表）中的行进行匹配，即匹配左表中的每一行及右表中符合条件的行。</p><p>除了匹配的行之外，还包括左表中有但在右表中不匹配的行，对于这样的行，从右表中选择的列的值被设置为 NULL，即左外连接的结果集中的 NULL 值表示右表中没有找到与左表相符的记录。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT name,dept_name</span><br><span class=\"line\">    -&gt; FROM tb_students_info s</span><br><span class=\"line\">    -&gt; LEFT OUTER JOIN tb_departments d</span><br><span class=\"line\">    -&gt; ON s.dept_id=d.idept_id;</span><br><span class=\"line\">+<span class=\"comment\">------+-----------+</span></span><br><span class=\"line\">| name | dept_name |</span><br><span class=\"line\">+<span class=\"comment\">------+-----------+</span></span><br><span class=\"line\">| peng | Chinese   |</span><br><span class=\"line\">| jun  | Chinese   |</span><br><span class=\"line\">| Gui  | Computer  |</span><br><span class=\"line\">| Feng | Chinese   |</span><br><span class=\"line\">| Qi   | NULL      |</span><br><span class=\"line\">+<span class=\"comment\">------+-----------+</span></span><br><span class=\"line\">5 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"comment\"># 学生Qi在tb_departments表中取出的值为 NULL。</span></span><br></pre></td></tr></table></figure><p>右外连接又称为右连接，在 FROM 子句中使用 RIGHT OUTER JOIN 或者 RIGHT JOIN。与左外连接相反，右外连接以右表为基表，连接方法和左外连接相同。在右外连接的结果集中，除了匹配的行外，还包括右表中有但在左表中不匹配的行，对于这样的行，从左表中选择的值被设置为 NULL。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; Select name,dept_name from tb_students_info s right outer join tb_departments d on s.dept_id=d.idept_id;</span><br><span class=\"line\">+<span class=\"comment\">------+-----------+</span></span><br><span class=\"line\">| name | dept_name |</span><br><span class=\"line\">+<span class=\"comment\">------+-----------+</span></span><br><span class=\"line\">| peng | Chinese   |</span><br><span class=\"line\">| jun  | Chinese   |</span><br><span class=\"line\">| Gui  | Computer  |</span><br><span class=\"line\">| Feng | Chinese   |</span><br><span class=\"line\">| NULL | Math      |</span><br><span class=\"line\">| NULL | Economy   |</span><br><span class=\"line\">| NULL | History   |</span><br><span class=\"line\">+<span class=\"comment\">------+-----------+</span></span><br><span class=\"line\">7 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"comment\"># 从 tb_students_info 表中取出的值为 NULL。</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","more":"<!-- build time:Tue Apr 21 2020 21:50:16 GMT+0800 (GMT+08:00) --><h1 id=\"查询数据表\"><a class=\"markdownIt-Anchor\" href=\"#查询数据表\"></a> 查询数据表</h1><p>SELECT 语句来查询数据。查询数据是指从数据库中根据需求，使用不同的查询方式来获取不同的数据，是使用频率最高、最重要的操作。</p><blockquote><p>语法格式如下：<br><code>SELECT {* | &lt;字段列名&gt;} [ FROM &lt;表 1&gt;, &lt;表 2&gt;… [WHERE &lt;表达式&gt; [GROUP BY &lt;group by definition&gt; [HAVING &lt;expression&gt; [{&lt;operator&gt; &lt;expression&gt;}…]] [ORDER BY &lt;order by definition&gt;] [LIMIT[&lt;offset&gt;,] &lt;row count&gt;] ]</code></p></blockquote><p>其中，各条子句说明如下：</p><ul><li>{*|&lt;字段列名&gt;}包含星号通配符的字段列表，表示所要查询字段的名称。</li><li>&lt;表1&gt;，&lt;表2&gt;…，表1和表2表示查询数据的来源，可以是单个或多个。</li><li><strong>WHERE</strong>&lt;表达式&gt;是可选项，如果选择该项，将限定查询数据必须满足该查询条件。</li><li><strong>GROUP BY</strong>&lt;字段&gt;，该子句告诉数据库如何显示查询出来的数据，并按照指定的字段分组。</li><li><strong>ORDER BY</strong>&lt; 字段 &gt;]，按什么样的顺序显示查询出来的数据，可以进行的排序有升序（ASC）和降序（DESC），默认情况下是升序。</li><li><strong><code>[LIMIT[&lt;offset&gt;，]&lt;row count&gt;]</code></strong>，该子句告诉 MySQL 每次显示查询出来的数据条数。</li></ul><h2 id=\"查询表中所有字段\"><a class=\"markdownIt-Anchor\" href=\"#查询表中所有字段\"></a> 查询表中所有字段</h2><p><strong>1.</strong> 使用&quot;*&quot;查询表的所有字段</p><blockquote><p>语法格式如下：SELECT * FROM 表名;</p></blockquote><p><strong>2.</strong> 列出表的所有字段<br><strong>SELECT</strong>关键字后面的字段名为需要查找的字段，可以使用 DESC 命令查看表的结构。</p><h2 id=\"查询表中指定的字段\"><a class=\"markdownIt-Anchor\" href=\"#查询表中指定的字段\"></a> 查询表中指定的字段</h2><p>查询表中的某一个字段的语法格式为：</p><blockquote><p>SELECT &lt; 列名 &gt; FROM &lt; 表名 &gt;;</p></blockquote><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT name FROM tb_students_info;</span><br><span class=\"line\">+<span class=\"comment\">--------+</span></span><br><span class=\"line\">| name   |</span><br><span class=\"line\">+<span class=\"comment\">--------+</span></span><br><span class=\"line\">| Dany   |</span><br><span class=\"line\">| Thomas |</span><br><span class=\"line\">| Tom    |</span><br><span class=\"line\">+<span class=\"comment\">--------+</span></span><br><span class=\"line\">10 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"去重过滤重复数据\"><a class=\"markdownIt-Anchor\" href=\"#去重过滤重复数据\"></a> 去重(过滤重复数据)</h1><p>使用<strong>DISTINCT</strong>关键字指示 数据库消除重复的记录值。</p><blockquote><p>语法格式为：SELECT DISTINCT &lt;字段名&gt; FROM &lt;表名&gt;;</p></blockquote><h1 id=\"设置别名\"><a class=\"markdownIt-Anchor\" href=\"#设置别名\"></a> 设置别名</h1><h2 id=\"为表指定别名\"><a class=\"markdownIt-Anchor\" href=\"#为表指定别名\"></a> 为表指定别名</h2><p>当数据表名很长或者执行一些特殊查询的时候，为了方便操作，可以为表指定一个别名，</p><blockquote><p>语法格式为：&lt;表名&gt; [AS] &lt;别名&gt;</p></blockquote><p>使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT stu.name,stu.height FROM tb_students_info AS stu;</span><br><span class=\"line\">+<span class=\"comment\">--------+--------+</span></span><br><span class=\"line\">| name   | height |</span><br><span class=\"line\">+<span class=\"comment\">--------+--------+</span></span><br><span class=\"line\">| Dany   |    160 |</span><br><span class=\"line\">| Green  |    158 |</span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.04</span> sec)</span><br></pre></td></tr></table></figure><h2 id=\"为字段指定别名\"><a class=\"markdownIt-Anchor\" href=\"#为字段指定别名\"></a> 为字段指定别名</h2><p>每个 SELECT 后面指定输出的字段。有时为了显示结果更加直观，可以为字段指定一个别名。</p><blockquote><p>基本语法格式：&lt;字段名&gt; [AS] &lt;别名&gt;</p></blockquote><p>使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT name AS student_name, age AS student_age FROM tb_students_info;</span><br><span class=\"line\">+<span class=\"comment\">--------------+-------------+</span></span><br><span class=\"line\">| student_name | student_age |</span><br><span class=\"line\">+<span class=\"comment\">--------------+-------------+</span></span><br><span class=\"line\">| Dany         |          25 |</span><br><span class=\"line\">| Green        |          23 |</span><br></pre></td></tr></table></figure><h1 id=\"限制查询结果的记录条数\"><a class=\"markdownIt-Anchor\" href=\"#限制查询结果的记录条数\"></a> 限制查询结果的记录条数</h1><p><strong>SELECT</strong>语句时往往返回的是所有匹配的行，有些时候我们仅需要返回第一行或者前几行，这时候就需要用到数据库<strong>LIMT</strong>子句</p><blockquote><p>基本的语法格式：<code>&lt;LIMIT&gt; [&lt;位置偏移量&gt;,] &lt;行数&gt;</code></p></blockquote><p><strong>LIMIT</strong>接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from tb_students_info limit 1, 2;</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">| id | name | dept_id | age  | sex  | height | login_date          |</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">|  2 | jun  |       2 |   12 | F    |    222 | 1000-01-01 00:00:01 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"对查询结果进行排序\"><a class=\"markdownIt-Anchor\" href=\"#对查询结果进行排序\"></a> 对查询结果进行排序</h1><p>ORDER BY 子句主要用来将结果集中的数据按照一定的顺序进行排序。</p><blockquote><p>语法格式：ORDER BY {&lt;列名&gt; | &lt;表达式&gt; | &lt;位置&gt;} [ASC|DESC]</p></blockquote><p>语法说明如下：</p><ul><li><strong>列名</strong>：指定用于排序的列。可以指定多个列，列名之间用逗号分隔。</li><li><strong>表达式</strong>：指定用于排序的表达式。</li><li><strong>位置</strong>：指定用于排序的列在SELECT语句结果集中的位置，通常是正整数。</li><li><strong>ASC|DESC</strong>：关键字 ASC 表示按升序分组，关键字 DESC 表示按降序分组，其中 ASC 为默认值。这两个关键字必须位于对应的列名、表达式、列的位置之后。</li></ul><p>使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from tb_students_info ORDER by age;</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">| id | name | dept_id | age  | sex  | height | login_date          |</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">|  2 | jun  |       2 |   12 | F    |    222 | 1000-01-01 00:00:01 |</span><br><span class=\"line\">|  1 | peng |       2 |   25 | F    |    222 | 1000-01-01 00:00:00 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span>,height <span class=\"keyword\">FROM</span> tb_student_info <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> height <span class=\"keyword\">DESC</span>,<span class=\"keyword\">name</span> <span class=\"keyword\">ASC</span>;</span><br><span class=\"line\">+<span class=\"comment\">--------+--------+</span></span><br><span class=\"line\">| name   | height |</span><br><span class=\"line\">+<span class=\"comment\">--------+--------+</span></span><br><span class=\"line\">| Henry  |    185 |</span><br><span class=\"line\">| Thomas |    178 |</span><br></pre></td></tr></table></figure><p>注意：DESC 关键字只对前面的列进行降序排列，在这里只对 height 排序，而并没有对 name 进行排序，因此，height 按降序排序，而 name 仍按升序排序，如果要对多列进行降序排序，必须要在每一列的后面加 DESC 关键字。</p><h1 id=\"条件查询\"><a class=\"markdownIt-Anchor\" href=\"#条件查询\"></a> 条件查询</h1><p>使用 WHERE 子句来指定查询条件，从 FROM 子句的中间结果中选取适当的数据行，达到数据过滤的效果。</p><blockquote><p>语法格式：WHERE &lt;查询条件&gt; {&lt;判定运算1&gt;，&lt;判定运算2&gt;，…}</p></blockquote><p>运算的语法分类如下：</p><ul><li>&lt;表达式1&gt;{=|&lt;|&lt;=|&gt;|&gt;=|&lt;=&gt;|&lt;&gt;|！=}&lt;表达式2&gt;</li><li>&lt;表达式1&gt;[NOT]LIKE&lt;表达式2&gt;</li><li>&lt;表达式1&gt;[NOT][REGEXP|RLIKE]&lt;表达式2&gt;</li><li>&lt;表达式1&gt;[NOT]BETWEEN&lt;表达式2&gt;AND&lt;表达式3&gt;</li><li>&lt;表达式1&gt;IS[NOT]NULL</li></ul><h2 id=\"单一条件的查询语句\"><a class=\"markdownIt-Anchor\" href=\"#单一条件的查询语句\"></a> 单一条件的查询语句</h2><p>语句采用简单的相等过滤，使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name, age</span><br><span class=\"line\">    -&gt; from tb_students_info</span><br><span class=\"line\">    -&gt; where age&lt;=25;</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| name | age  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| peng |   25 |</span><br><span class=\"line\">| jun  |   12 |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id=\"多条件的查询语句\"><a class=\"markdownIt-Anchor\" href=\"#多条件的查询语句\"></a> 多条件的查询语句</h2><p>SQL在<strong>WHERE</strong>子句中使用<strong>AND</strong>操作符限定只有满足所有查询条件的记录才会被返回。使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from tb_students_info</span><br><span class=\"line\">    -&gt; where age&lt;35 and height &gt;170;</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">| id | name | dept_id | age  | sex  | height | login_date          |</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">|  1 | peng |       2 |   25 | F    |    222 | 1000-01-01 00:00:00 |</span><br><span class=\"line\">|  2 | jun  |       2 |   12 | F    |    222 | 1000-01-01 00:00:01 |</span><br><span class=\"line\">|  4 | Feng |       2 |   32 | F    |    175 | 1000-01-01 00:00:01 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+---------+------+------+--------+---------------------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id=\"使用like的模糊查询\"><a class=\"markdownIt-Anchor\" href=\"#使用like的模糊查询\"></a> 使用<strong>LIKE</strong>的模糊查询</h2><blockquote><p>字符串匹配语法格式：&lt;表达式1&gt; [NOT] LIKE &lt;表达式2&gt;</p></blockquote><p>相互间进行匹配运算的对象可以是CHAR、VARCHAR、TEXT、DATETIME 等数据类型。运算返回的结果是 TRUE 或 FALSE。通配符如下：</p><p><strong>1.百分号(%)</strong></p><p>百分号可以表示任何字符串，并且该字符串可以出现任意次。使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT name FROM tb_students_info</span><br><span class=\"line\">    -&gt; WHERE name LIKE '%e%';</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">| name  |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">| Green |</span><br><span class=\"line\">| Henry |</span><br><span class=\"line\">| Jane  |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"comment\"># 查找所有包含“e”字母的学生姓名</span></span><br></pre></td></tr></table></figure><ul><li>sql默认不区分大小写，除非更换字符集的校对规则</li><li>百分号不匹配空值</li><li>百分号可以代表搜索模式中给定位置的 0 个、1 个或多个字符。</li><li>尾空格可能会干扰通配符的匹配，一般可以在搜索模式的最后附加一个百分号。</li></ul><p><strong>2.下划线(_)</strong><br>下画线只匹配单个字符，而不是多个字符，也不是 0 个字符。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT name FROM tb_students_info</span><br><span class=\"line\">    -&gt; WHERE name LIKE '____y';</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">| name  |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">| Henry |</span><br><span class=\"line\">+<span class=\"comment\">-------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"comment\"># 查找所有以字母“y”结尾，且“y”前面只有 4 个字母</span></span><br></pre></td></tr></table></figure><h2 id=\"日期字段作为条件的查询语句\"><a class=\"markdownIt-Anchor\" href=\"#日期字段作为条件的查询语句\"></a> 日期字段作为条件的查询语句</h2><p>以日期字段作为条件，可以使用比较运算符设置查询条件，也可以使用 BETWEEN AND 运算符查询某个范围内的值。使用示例如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM tb_students_info</span><br><span class=\"line\">    -&gt; WHERE login_date&lt;'2016-01-01';</span><br><span class=\"line\">+<span class=\"comment\">----+-------+---------+------+------+--------+------------+</span></span><br><span class=\"line\">| id | name  | dept_id | age  | sex  | height | login_date |</span><br><span class=\"line\">+<span class=\"comment\">----+-------+---------+------+------+--------+------------+</span></span><br><span class=\"line\">|  1 | Dany  |       1 |   25 | F    |    160 | 2015-09-10 |</span><br><span class=\"line\">|  3 | Henry |       2 |   23 | M    |    185 | 2015-05-31 |</span><br></pre></td></tr></table></figure><h1 id=\"内连接查询inner-join\"><a class=\"markdownIt-Anchor\" href=\"#内连接查询inner-join\"></a> 内连接查询(INNER JOIN)</h1><p>利用条件表达式来消除交叉连接的某些数据行。关键字 INNER JOIN 连接两张表，并使用 ON 子句来设置连接条件。如果没有任何条件，INNER JOIN 和 CROSS JOIN 在语法上是等同的。</p><blockquote><p>语法格式：SELECT &lt;列名1，列名2 …&gt;<br>FROM &lt;表名1&gt; INNER JOIN &lt;表名2&gt; [ ON子句]</p></blockquote><p>语法说明如下：</p><ul><li>&lt;列名1，列名2…&gt;：需要检索的列名。</li><li>&lt;表名1&gt;&lt;表名2&gt;：进行内连接的两张表的表名。</li></ul><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT id,name,age,dept_name</span><br><span class=\"line\">    -&gt; FROM tb_students_info,tb_departments</span><br><span class=\"line\">    -&gt; WHERE tb_students_info.dept_id=tb_departments.dept_id;</span><br><span class=\"line\">+<span class=\"comment\">----+--------+------+-----------+</span></span><br><span class=\"line\">| id | name   | age  | dept_name |</span><br><span class=\"line\">+<span class=\"comment\">----+--------+------+-----------+</span></span><br><span class=\"line\">|  1 | Dany   |   25 | Computer  |</span><br><span class=\"line\">|  2 | Green  |   23 | Chinese   |</span><br><span class=\"line\">|  3 | Henry  |   23 | Math</span><br></pre></td></tr></table></figure><p>SELECT后面指定的列分别属于两个不同的表，id、name、age在表tb_students_info中，dept_name在表tb_departments。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT id,name,age,dept_name</span><br><span class=\"line\">    -&gt; FROM tb_students_info INNER JOIN tb_departments</span><br><span class=\"line\">    -&gt; WHERE tb_students_info.dept_id=tb_departments.dept_id;</span><br><span class=\"line\">+<span class=\"comment\">----+--------+------+-----------+</span></span><br><span class=\"line\">| id | name   | age  | dept_name |</span><br><span class=\"line\">+<span class=\"comment\">----+--------+------+-----------+</span></span><br><span class=\"line\">|  1 | Dany   |   25 | Computer  |</span><br><span class=\"line\">|  2 | Green  |   23 | Chinese   |</span><br><span class=\"line\">|  3 | Henry  |   23 | Math      |</span><br><span class=\"line\"><span class=\"comment\"># 使用INNER JOIN语法进行内连接查询</span></span><br></pre></td></tr></table></figure><h1 id=\"外连接查询leftright-join\"><a class=\"markdownIt-Anchor\" href=\"#外连接查询leftright-join\"></a> 外连接查询(LEFT/RIGHT JOIN)</h1><p>外连接更加注重两张表之间的关系。按照连接表的顺序，可以分为左外连接和右外连接。左外连接又称为左连接，在 FROM 子句中使用关键字 LEFT OUTER JOIN 或者 LEFT JOIN，用于接收该关键字左表（基表）的所有行，并用这些行与该关键字右表（参考表）中的行进行匹配，即匹配左表中的每一行及右表中符合条件的行。</p><p>除了匹配的行之外，还包括左表中有但在右表中不匹配的行，对于这样的行，从右表中选择的列的值被设置为 NULL，即左外连接的结果集中的 NULL 值表示右表中没有找到与左表相符的记录。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT name,dept_name</span><br><span class=\"line\">    -&gt; FROM tb_students_info s</span><br><span class=\"line\">    -&gt; LEFT OUTER JOIN tb_departments d</span><br><span class=\"line\">    -&gt; ON s.dept_id=d.idept_id;</span><br><span class=\"line\">+<span class=\"comment\">------+-----------+</span></span><br><span class=\"line\">| name | dept_name |</span><br><span class=\"line\">+<span class=\"comment\">------+-----------+</span></span><br><span class=\"line\">| peng | Chinese   |</span><br><span class=\"line\">| jun  | Chinese   |</span><br><span class=\"line\">| Gui  | Computer  |</span><br><span class=\"line\">| Feng | Chinese   |</span><br><span class=\"line\">| Qi   | NULL      |</span><br><span class=\"line\">+<span class=\"comment\">------+-----------+</span></span><br><span class=\"line\">5 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"comment\"># 学生Qi在tb_departments表中取出的值为 NULL。</span></span><br></pre></td></tr></table></figure><p>右外连接又称为右连接，在 FROM 子句中使用 RIGHT OUTER JOIN 或者 RIGHT JOIN。与左外连接相反，右外连接以右表为基表，连接方法和左外连接相同。在右外连接的结果集中，除了匹配的行外，还包括右表中有但在左表中不匹配的行，对于这样的行，从左表中选择的值被设置为 NULL。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; Select name,dept_name from tb_students_info s right outer join tb_departments d on s.dept_id=d.idept_id;</span><br><span class=\"line\">+<span class=\"comment\">------+-----------+</span></span><br><span class=\"line\">| name | dept_name |</span><br><span class=\"line\">+<span class=\"comment\">------+-----------+</span></span><br><span class=\"line\">| peng | Chinese   |</span><br><span class=\"line\">| jun  | Chinese   |</span><br><span class=\"line\">| Gui  | Computer  |</span><br><span class=\"line\">| Feng | Chinese   |</span><br><span class=\"line\">| NULL | Math      |</span><br><span class=\"line\">| NULL | Economy   |</span><br><span class=\"line\">| NULL | History   |</span><br><span class=\"line\">+<span class=\"comment\">------+-----------+</span></span><br><span class=\"line\">7 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"comment\"># 从 tb_students_info 表中取出的值为 NULL。</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"},{"name":"数据库","path":"api/categories/数据库.json"}],"tags":[{"name":"SQL","path":"api/tags/SQL.json"},{"name":"数据库","path":"api/tags/数据库.json"}]}