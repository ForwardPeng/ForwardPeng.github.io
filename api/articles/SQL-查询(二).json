{"title":"SQL-查询(二)","slug":"SQL-查询(二)","date":"2020-04-19T14:14:35.000Z","updated":"2020-04-21T13:49:44.286Z","comments":true,"path":"api/articles/SQL-查询(二).json","excerpt":null,"covers":null,"content":"<!-- build time:Fri Apr 24 2020 15:58:16 GMT+0800 (GMT+08:00) --><h1 id=\"子查询\"><a class=\"markdownIt-Anchor\" href=\"#子查询\"></a> 子查询</h1><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，子查询结果作为外层另一个查询的过滤条件，查询可以基于一个表或者多个表。可以添加到 SELECT、UPDATE 和 DELETE 语句中，而且可以进行多层嵌套。子查询也可以使用比较运算符，如“&lt;”、“&lt;=”、“&gt;”、“&gt;=”、“！=”等。</p><h2 id=\"子查询中常见的运算符\"><a class=\"markdownIt-Anchor\" href=\"#子查询中常见的运算符\"></a> 子查询中常见的运算符</h2><p><strong>1.IN子查询</strong></p><p>关键字 IN 所使用的子查询主要用于判断一个给定值是否存在于子查询的结果集中。其语法格式为：</p><blockquote><p>&lt;表达式&gt; [NOT] IN &lt;子查询&gt;</p></blockquote><p>语法说明：</p><ul><li>&lt;表达式&gt;：用于指定表达式。当表达式与子查询返回的结果集中的某个值相等时，返回 TRUE，否则返回 FALSE；若使用关键字 NOT，则返回的值正好相反。</li><li>&lt;子查询&gt;：用于指定子查询。这里的子查询只能返回一列数据。对于比较复杂的查询要求，可以使用 SELECT 语句实现子查询的多层嵌套。</li></ul><p><strong>2.比较运算符子查询</strong></p><p>比较运算符所使用的子查询主要用于对表达式的值和子查询返回的值进行比较运算，语法格式为：</p><blockquote><p>&lt;表达式&gt; {= | &lt; | &gt; | &gt;= | &lt;= | &lt;=&gt; | &lt; &gt; | != }<br>{ ALL | SOME | ANY} &lt;子查询&gt;</p></blockquote><p>语法说明如下：</p><ul><li>&lt;子查询&gt;：用于指定子查询。</li><li>&lt;表达式&gt;：用于指定要进行比较的表达式。</li><li>ALL、SOME 和 ANY：可选项。用于指定对比较运算的限制。其中，关键字 ALL 用于指定表达式需要与子查询结果集中的每个值都进行比较，当表达式与每个值都满足比较关系时，会返回 TRUE，否则返回 FALSE；关键字 SOME 和 ANY 是同义词，表示表达式只要与子查询结果集中的某个值满足比较关系，就返回 TRUE，否则返回 FALSE。</li></ul><p><strong>3.EXIST子查询</strong><br>关键字 EXIST 所使用的子查询主要用于判断子查询的结果集是否为空。其语法格式为：</p><blockquote><p>EXIST &lt;子查询&gt;</p></blockquote><p>若子查询的结果集不为空，则返回 TRUE；否则返回 FALSE。</p><h2 id=\"子查询的应用\"><a class=\"markdownIt-Anchor\" href=\"#子查询的应用\"></a> 子查询的应用</h2><p>实例1：先执行内层子查询，再执行外层查询，内层子查询的结果作为外部查询的比较条件。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from tb_students_info where dept_id in (select idept_id from tb_departments where dept_type='A');</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| name |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| peng |</span><br><span class=\"line\">| jun  |</span><br><span class=\"line\">| Gui  |</span><br><span class=\"line\">| Feng |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">4 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)。</span><br></pre></td></tr></table></figure><p>实例2：在 tb_departments 表中查询 dept_name 等于“Computer”的学院 id，然后在 tb_students_info 表中查询所有该学院的学生的姓名</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from tb_students_info</span><br><span class=\"line\">    -&gt; where dept_id=</span><br><span class=\"line\">    -&gt; (select idept_id</span><br><span class=\"line\">    -&gt; from tb_departments</span><br><span class=\"line\">    -&gt; where dept_name='Computer');</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| name |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| Gui  |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>实例3：查询的dept_name不等于’Computer’的学院id，然后查询学生姓名。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from tb_students_info</span><br><span class=\"line\">    -&gt; where dept_id &lt;&gt;</span><br><span class=\"line\">    -&gt; (select idept_id</span><br><span class=\"line\">    -&gt; from tb_departments</span><br><span class=\"line\">    -&gt; where dept_name='Computer');</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| name |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| peng |</span><br><span class=\"line\">| jun  |</span><br><span class=\"line\">| Feng |</span><br><span class=\"line\">| Qi   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">4 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"分组查询group-by\"><a class=\"markdownIt-Anchor\" href=\"#分组查询group-by\"></a> 分组查询(GROUP BY)</h1><p>使用 GROUP BY 子句，将结果集中的数据行根据选择列的值进行逻辑分组，以便能汇总表内容的子集，实现对每个组而不是对整个结果集进行整合。</p><blockquote><p>语法格式：GROUP BY { &lt;列名&gt; | &lt;表达式&gt; | &lt;位置&gt; } [ASC | DESC]</p></blockquote><p>语法说明：</p><ul><li>&lt;列名&gt;：指定用于分组的列。可以指定多个列，彼此间用逗号分隔。</li><li>&lt;表达式&gt;：指定用于分组的表达式。通常与聚合函数一块使用，例如可将表达式 COUNT(*)AS’人数’ 作为 SELECT 选择列表清单的一项。</li><li>&lt;位置&gt;：指定用于分组的选择列在 SELECT 语句结果集中的位置，通常是一个正整数。例如，GROUP BY 2 表示根据 SELECT 语句列清单上的第 2 列的值进行逻辑分组。</li><li>ASC|DESC：关键字 ASC 表示按升序分组，关键字 DESC 表示按降序分组，其中 ASC 为默认值，注意这两个关键字必须位于对应的列名、表达式、列的位置之后。</li></ul><p>使用GROUP BY子句时注意：</p><ul><li>GROUP BY 子句可以包含任意数目的列，使其可以对分组进行嵌套，为数据分组提供更加细致的控制。</li><li>GROUP BY 子句列出的每个列都必须是检索列或有效的表达式，但不能是聚合函数。若在 SELECT 语句中使用表达式，则必须在 GROUP BY 子句中指定相同的表达式。</li><li>除聚合函数之外，SELECT 语句中的每个列都必须在 GROUP BY 子句中给出。</li><li>若用于分组的列中包含有 NULL 值，则 NULL 将作为一个单独的分组返回；若该列中存在多个 NULL 值，则将这些 NULL 值所在的行分为一组。</li><li></li></ul><p>实例：据 dept_id 对 tb_students_info 表中的数据进行分组，将每个学院的学生姓名显示出来</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select dept_id,GROUP_CONCAT(name) AS names FROM tb_students_info group by dept_id;</span><br><span class=\"line\">+<span class=\"comment\">---------+---------------+</span></span><br><span class=\"line\">| dept_id | names         |</span><br><span class=\"line\">+<span class=\"comment\">---------+---------------+</span></span><br><span class=\"line\">|       0 | Qi            |</span><br><span class=\"line\">|       1 | Gui           |</span><br><span class=\"line\">|       2 | peng,jun,Feng |</span><br><span class=\"line\">+<span class=\"comment\">---------+---------------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"指定过滤条件having\"><a class=\"markdownIt-Anchor\" href=\"#指定过滤条件having\"></a> 指定过滤条件(HAVING)</h1><p>使用 HAVING 子句过滤分组，在结果集中规定了包含哪些分组和排除哪些分组。</p><blockquote><p>语法格式：HAVING &lt;条件&gt;</p></blockquote><p>HAVING 子句和 WHERE 子句非常相似，HAVING 子句支持 WHERE 子句中所有的操作符和语法，存在的差异如下：</p><ul><li>WHERE 子句主要用于过滤数据行，而 HAVING 子句主要用于过滤分组，即 HAVING 子句基于分组的聚合值而不是特定行的值来过滤数据，主要用来过滤分组。</li><li>WHERE 子句不可以包含聚合函数，HAVING 子句中的条件可以包含聚合函数。</li><li>HAVING 子句是在数据分组后进行过滤，WHERE 子句会在数据分组前进行过滤。WHERE 子句排除的行不包含在分组中，可能会影响 HAVING 子句基于这些值过滤掉的分组。</li></ul><p>实例：根据 dept_id 对 tb_students_info 表中的数据进行分组，并显示学生人数大于1的分组信息，</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT dept_id,group_concat(name) as names from tb_students_info group by dept_id having count(name)&gt;1;</span><br><span class=\"line\">+<span class=\"comment\">---------+---------------+</span></span><br><span class=\"line\">| dept_id | names         |</span><br><span class=\"line\">+<span class=\"comment\">---------+---------------+</span></span><br><span class=\"line\">|       2 | peng,jun,Feng |</span><br><span class=\"line\">+<span class=\"comment\">---------+---------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"正则表达式查询regexp\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式查询regexp\"></a> 正则表达式查询(REGEXP)</h1><p>正则表达式通常被用来检索或替换符合某个模式的文本内容，根据指定的匹配模式匹配文中符合要求的特殊字符串。</p><table><thead><tr><th>选项</th><th>说明</th><th>例子</th><th>匹配值实例</th></tr></thead><tbody><tr><td>^</td><td>匹配文本的开始字符</td><td>‘^b’ 匹配以字母 b 开头 的字符串</td><td>book、big、banana、 bike</td></tr><tr><td>$</td><td>匹配文本的结果字符</td><td>'st$’ 匹配以 st 结尾的字 符串中等文本</td><td>test、resist、persist</td></tr><tr><td>.</td><td>匹配任何单个字符</td><td>'b.t’ 匹配任何 b 和 t 之间有一个字符</td><td>bit、bat、but、bite</td></tr><tr><td>*</td><td>匹配零个或多个在它前面的字符</td><td>'f*n’ 匹配字符 n 前面有 任意个字符 f</td><td>fn、fan、faan、abcn</td></tr><tr><td>+</td><td>匹配前面的字符 1 次或多次</td><td>''ba+’ 匹配以 b 开头，后 面至少紧跟一个 a</td><td>ba、bay、bare、battle</td></tr><tr><td>&lt;字符串&gt;</td><td>匹配包含指定字符的文本</td><td>'fa’</td><td>fan、afa、faad</td></tr><tr><td>[字符集合]</td><td>匹配字符集合中的任何一个字 符</td><td>'[xz]'匹配 x 或者 z</td><td>dizzy、zebra、x-ray、 extra</td></tr><tr><td>[^]</td><td>匹配不在括号中的任何字符</td><td>'[^abc]’ 匹配任何不包 含 a、b 或 c 的字符串</td><td>desk、fox、f8ke</td></tr><tr><td>字符串{n,}</td><td>匹配前面的字符串至少 n 次</td><td>b{2} 匹配 2 个或更多 的 b</td><td>bbb、 bbbb、 bbbbbbb</td></tr><tr><td>{n,m}</td><td>匹配前面的字符串至少 n 次， 至多 m 次</td><td>b{2,4} 匹配最少 2 个， 最多 4 个 b</td><td>bbb、 bbbb</td></tr></tbody></table><p><strong>实例1</strong>：字符“^”匹配以特定字符或者字符串开头的文本。查询 dept_name 字段以字母“C”开头的记录</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from tb_departments</span><br><span class=\"line\">    -&gt; where dept_name REGEXP '^C';</span><br><span class=\"line\">+<span class=\"comment\">----------+-----------+-----------+</span></span><br><span class=\"line\">| idept_id | dept_name | dept_type |</span><br><span class=\"line\">+<span class=\"comment\">----------+-----------+-----------+</span></span><br><span class=\"line\">|        1 | Computer  | A         |</span><br><span class=\"line\">|        2 | Chinese   | A         |</span><br><span class=\"line\">+<span class=\"comment\">----------+-----------+-----------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>实例2</strong>：用符号“.”代替字符串中的任意一个字符。查询 dept_name 字段值包含字母“o”与字母“y”，且两个字母之间只有一个字母的记录</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from tb_departments</span><br><span class=\"line\">    -&gt; where dept_name regexp 'o.y';</span><br><span class=\"line\">+<span class=\"comment\">----------+-----------+-----------+</span></span><br><span class=\"line\">| idept_id | dept_name | dept_type |</span><br><span class=\"line\">+<span class=\"comment\">----------+-----------+-----------+</span></span><br><span class=\"line\">|        4 | Economy   | B         |</span><br><span class=\"line\">|        5 | History   | A         |</span><br><span class=\"line\">+<span class=\"comment\">----------+-----------+-----------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>实例3</strong>：查询 dept_name 字段值包含字符串“in”或者“on”的记录</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM tb_departments</span><br><span class=\"line\">    -&gt; WHERE dept_name REGEXP 'in|on';</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">| dept_id | dept_name | dept_call | dept_type |</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">|       3 | Chinese   | 3     | B         |</span><br><span class=\"line\">|       4 | Economy   | 4     | B         |</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec</span><br></pre></td></tr></table></figure><p><strong>实例3</strong>：匹配指定字符串。查询 dept_name 字段值包含字符串“in”或者“on”的记录。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM tb_departments</span><br><span class=\"line\">    -&gt; WHERE dept_name REGEXP 'in|on';</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">| dept_id | dept_name | dept_call | dept_type |</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">|       3 | Chinese   | 33333     | B         |</span><br><span class=\"line\">|       4 | Economy   | 44444     | B         |</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>实例4</strong>:匹配不在指定集合中的任何字符。查询 dept_name 字段值包含字母 a~t 以外的字符的记录。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM tb_departments</span><br><span class=\"line\">    -&gt; WHERE dept_name REGEXP '[^a-t]';</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">| dept_id | dept_name | dept_call | dept_type |</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">|       1 | Computer  | 11111     | A         |</span><br><span class=\"line\">|       4 | Economy   | 44444     | B         |</span><br><span class=\"line\">|       5 | History   | 55555     | B         |</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","more":"<!-- build time:Fri Apr 24 2020 15:58:16 GMT+0800 (GMT+08:00) --><h1 id=\"子查询\"><a class=\"markdownIt-Anchor\" href=\"#子查询\"></a> 子查询</h1><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，子查询结果作为外层另一个查询的过滤条件，查询可以基于一个表或者多个表。可以添加到 SELECT、UPDATE 和 DELETE 语句中，而且可以进行多层嵌套。子查询也可以使用比较运算符，如“&lt;”、“&lt;=”、“&gt;”、“&gt;=”、“！=”等。</p><h2 id=\"子查询中常见的运算符\"><a class=\"markdownIt-Anchor\" href=\"#子查询中常见的运算符\"></a> 子查询中常见的运算符</h2><p><strong>1.IN子查询</strong></p><p>关键字 IN 所使用的子查询主要用于判断一个给定值是否存在于子查询的结果集中。其语法格式为：</p><blockquote><p>&lt;表达式&gt; [NOT] IN &lt;子查询&gt;</p></blockquote><p>语法说明：</p><ul><li>&lt;表达式&gt;：用于指定表达式。当表达式与子查询返回的结果集中的某个值相等时，返回 TRUE，否则返回 FALSE；若使用关键字 NOT，则返回的值正好相反。</li><li>&lt;子查询&gt;：用于指定子查询。这里的子查询只能返回一列数据。对于比较复杂的查询要求，可以使用 SELECT 语句实现子查询的多层嵌套。</li></ul><p><strong>2.比较运算符子查询</strong></p><p>比较运算符所使用的子查询主要用于对表达式的值和子查询返回的值进行比较运算，语法格式为：</p><blockquote><p>&lt;表达式&gt; {= | &lt; | &gt; | &gt;= | &lt;= | &lt;=&gt; | &lt; &gt; | != }<br>{ ALL | SOME | ANY} &lt;子查询&gt;</p></blockquote><p>语法说明如下：</p><ul><li>&lt;子查询&gt;：用于指定子查询。</li><li>&lt;表达式&gt;：用于指定要进行比较的表达式。</li><li>ALL、SOME 和 ANY：可选项。用于指定对比较运算的限制。其中，关键字 ALL 用于指定表达式需要与子查询结果集中的每个值都进行比较，当表达式与每个值都满足比较关系时，会返回 TRUE，否则返回 FALSE；关键字 SOME 和 ANY 是同义词，表示表达式只要与子查询结果集中的某个值满足比较关系，就返回 TRUE，否则返回 FALSE。</li></ul><p><strong>3.EXIST子查询</strong><br>关键字 EXIST 所使用的子查询主要用于判断子查询的结果集是否为空。其语法格式为：</p><blockquote><p>EXIST &lt;子查询&gt;</p></blockquote><p>若子查询的结果集不为空，则返回 TRUE；否则返回 FALSE。</p><h2 id=\"子查询的应用\"><a class=\"markdownIt-Anchor\" href=\"#子查询的应用\"></a> 子查询的应用</h2><p>实例1：先执行内层子查询，再执行外层查询，内层子查询的结果作为外部查询的比较条件。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from tb_students_info where dept_id in (select idept_id from tb_departments where dept_type='A');</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| name |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| peng |</span><br><span class=\"line\">| jun  |</span><br><span class=\"line\">| Gui  |</span><br><span class=\"line\">| Feng |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">4 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)。</span><br></pre></td></tr></table></figure><p>实例2：在 tb_departments 表中查询 dept_name 等于“Computer”的学院 id，然后在 tb_students_info 表中查询所有该学院的学生的姓名</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from tb_students_info</span><br><span class=\"line\">    -&gt; where dept_id=</span><br><span class=\"line\">    -&gt; (select idept_id</span><br><span class=\"line\">    -&gt; from tb_departments</span><br><span class=\"line\">    -&gt; where dept_name='Computer');</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| name |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| Gui  |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>实例3：查询的dept_name不等于’Computer’的学院id，然后查询学生姓名。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select name from tb_students_info</span><br><span class=\"line\">    -&gt; where dept_id &lt;&gt;</span><br><span class=\"line\">    -&gt; (select idept_id</span><br><span class=\"line\">    -&gt; from tb_departments</span><br><span class=\"line\">    -&gt; where dept_name='Computer');</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| name |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| peng |</span><br><span class=\"line\">| jun  |</span><br><span class=\"line\">| Feng |</span><br><span class=\"line\">| Qi   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">4 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"分组查询group-by\"><a class=\"markdownIt-Anchor\" href=\"#分组查询group-by\"></a> 分组查询(GROUP BY)</h1><p>使用 GROUP BY 子句，将结果集中的数据行根据选择列的值进行逻辑分组，以便能汇总表内容的子集，实现对每个组而不是对整个结果集进行整合。</p><blockquote><p>语法格式：GROUP BY { &lt;列名&gt; | &lt;表达式&gt; | &lt;位置&gt; } [ASC | DESC]</p></blockquote><p>语法说明：</p><ul><li>&lt;列名&gt;：指定用于分组的列。可以指定多个列，彼此间用逗号分隔。</li><li>&lt;表达式&gt;：指定用于分组的表达式。通常与聚合函数一块使用，例如可将表达式 COUNT(*)AS’人数’ 作为 SELECT 选择列表清单的一项。</li><li>&lt;位置&gt;：指定用于分组的选择列在 SELECT 语句结果集中的位置，通常是一个正整数。例如，GROUP BY 2 表示根据 SELECT 语句列清单上的第 2 列的值进行逻辑分组。</li><li>ASC|DESC：关键字 ASC 表示按升序分组，关键字 DESC 表示按降序分组，其中 ASC 为默认值，注意这两个关键字必须位于对应的列名、表达式、列的位置之后。</li></ul><p>使用GROUP BY子句时注意：</p><ul><li>GROUP BY 子句可以包含任意数目的列，使其可以对分组进行嵌套，为数据分组提供更加细致的控制。</li><li>GROUP BY 子句列出的每个列都必须是检索列或有效的表达式，但不能是聚合函数。若在 SELECT 语句中使用表达式，则必须在 GROUP BY 子句中指定相同的表达式。</li><li>除聚合函数之外，SELECT 语句中的每个列都必须在 GROUP BY 子句中给出。</li><li>若用于分组的列中包含有 NULL 值，则 NULL 将作为一个单独的分组返回；若该列中存在多个 NULL 值，则将这些 NULL 值所在的行分为一组。</li><li></li></ul><p>实例：据 dept_id 对 tb_students_info 表中的数据进行分组，将每个学院的学生姓名显示出来</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select dept_id,GROUP_CONCAT(name) AS names FROM tb_students_info group by dept_id;</span><br><span class=\"line\">+<span class=\"comment\">---------+---------------+</span></span><br><span class=\"line\">| dept_id | names         |</span><br><span class=\"line\">+<span class=\"comment\">---------+---------------+</span></span><br><span class=\"line\">|       0 | Qi            |</span><br><span class=\"line\">|       1 | Gui           |</span><br><span class=\"line\">|       2 | peng,jun,Feng |</span><br><span class=\"line\">+<span class=\"comment\">---------+---------------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"指定过滤条件having\"><a class=\"markdownIt-Anchor\" href=\"#指定过滤条件having\"></a> 指定过滤条件(HAVING)</h1><p>使用 HAVING 子句过滤分组，在结果集中规定了包含哪些分组和排除哪些分组。</p><blockquote><p>语法格式：HAVING &lt;条件&gt;</p></blockquote><p>HAVING 子句和 WHERE 子句非常相似，HAVING 子句支持 WHERE 子句中所有的操作符和语法，存在的差异如下：</p><ul><li>WHERE 子句主要用于过滤数据行，而 HAVING 子句主要用于过滤分组，即 HAVING 子句基于分组的聚合值而不是特定行的值来过滤数据，主要用来过滤分组。</li><li>WHERE 子句不可以包含聚合函数，HAVING 子句中的条件可以包含聚合函数。</li><li>HAVING 子句是在数据分组后进行过滤，WHERE 子句会在数据分组前进行过滤。WHERE 子句排除的行不包含在分组中，可能会影响 HAVING 子句基于这些值过滤掉的分组。</li></ul><p>实例：根据 dept_id 对 tb_students_info 表中的数据进行分组，并显示学生人数大于1的分组信息，</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT dept_id,group_concat(name) as names from tb_students_info group by dept_id having count(name)&gt;1;</span><br><span class=\"line\">+<span class=\"comment\">---------+---------------+</span></span><br><span class=\"line\">| dept_id | names         |</span><br><span class=\"line\">+<span class=\"comment\">---------+---------------+</span></span><br><span class=\"line\">|       2 | peng,jun,Feng |</span><br><span class=\"line\">+<span class=\"comment\">---------+---------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"正则表达式查询regexp\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式查询regexp\"></a> 正则表达式查询(REGEXP)</h1><p>正则表达式通常被用来检索或替换符合某个模式的文本内容，根据指定的匹配模式匹配文中符合要求的特殊字符串。</p><table><thead><tr><th>选项</th><th>说明</th><th>例子</th><th>匹配值实例</th></tr></thead><tbody><tr><td>^</td><td>匹配文本的开始字符</td><td>‘^b’ 匹配以字母 b 开头 的字符串</td><td>book、big、banana、 bike</td></tr><tr><td>$</td><td>匹配文本的结果字符</td><td>'st$’ 匹配以 st 结尾的字 符串中等文本</td><td>test、resist、persist</td></tr><tr><td>.</td><td>匹配任何单个字符</td><td>'b.t’ 匹配任何 b 和 t 之间有一个字符</td><td>bit、bat、but、bite</td></tr><tr><td>*</td><td>匹配零个或多个在它前面的字符</td><td>'f*n’ 匹配字符 n 前面有 任意个字符 f</td><td>fn、fan、faan、abcn</td></tr><tr><td>+</td><td>匹配前面的字符 1 次或多次</td><td>''ba+’ 匹配以 b 开头，后 面至少紧跟一个 a</td><td>ba、bay、bare、battle</td></tr><tr><td>&lt;字符串&gt;</td><td>匹配包含指定字符的文本</td><td>'fa’</td><td>fan、afa、faad</td></tr><tr><td>[字符集合]</td><td>匹配字符集合中的任何一个字 符</td><td>'[xz]'匹配 x 或者 z</td><td>dizzy、zebra、x-ray、 extra</td></tr><tr><td>[^]</td><td>匹配不在括号中的任何字符</td><td>'[^abc]’ 匹配任何不包 含 a、b 或 c 的字符串</td><td>desk、fox、f8ke</td></tr><tr><td>字符串{n,}</td><td>匹配前面的字符串至少 n 次</td><td>b{2} 匹配 2 个或更多 的 b</td><td>bbb、 bbbb、 bbbbbbb</td></tr><tr><td>{n,m}</td><td>匹配前面的字符串至少 n 次， 至多 m 次</td><td>b{2,4} 匹配最少 2 个， 最多 4 个 b</td><td>bbb、 bbbb</td></tr></tbody></table><p><strong>实例1</strong>：字符“^”匹配以特定字符或者字符串开头的文本。查询 dept_name 字段以字母“C”开头的记录</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from tb_departments</span><br><span class=\"line\">    -&gt; where dept_name REGEXP '^C';</span><br><span class=\"line\">+<span class=\"comment\">----------+-----------+-----------+</span></span><br><span class=\"line\">| idept_id | dept_name | dept_type |</span><br><span class=\"line\">+<span class=\"comment\">----------+-----------+-----------+</span></span><br><span class=\"line\">|        1 | Computer  | A         |</span><br><span class=\"line\">|        2 | Chinese   | A         |</span><br><span class=\"line\">+<span class=\"comment\">----------+-----------+-----------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>实例2</strong>：用符号“.”代替字符串中的任意一个字符。查询 dept_name 字段值包含字母“o”与字母“y”，且两个字母之间只有一个字母的记录</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from tb_departments</span><br><span class=\"line\">    -&gt; where dept_name regexp 'o.y';</span><br><span class=\"line\">+<span class=\"comment\">----------+-----------+-----------+</span></span><br><span class=\"line\">| idept_id | dept_name | dept_type |</span><br><span class=\"line\">+<span class=\"comment\">----------+-----------+-----------+</span></span><br><span class=\"line\">|        4 | Economy   | B         |</span><br><span class=\"line\">|        5 | History   | A         |</span><br><span class=\"line\">+<span class=\"comment\">----------+-----------+-----------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>实例3</strong>：查询 dept_name 字段值包含字符串“in”或者“on”的记录</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM tb_departments</span><br><span class=\"line\">    -&gt; WHERE dept_name REGEXP 'in|on';</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">| dept_id | dept_name | dept_call | dept_type |</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">|       3 | Chinese   | 3     | B         |</span><br><span class=\"line\">|       4 | Economy   | 4     | B         |</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec</span><br></pre></td></tr></table></figure><p><strong>实例3</strong>：匹配指定字符串。查询 dept_name 字段值包含字符串“in”或者“on”的记录。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM tb_departments</span><br><span class=\"line\">    -&gt; WHERE dept_name REGEXP 'in|on';</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">| dept_id | dept_name | dept_call | dept_type |</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">|       3 | Chinese   | 33333     | B         |</span><br><span class=\"line\">|       4 | Economy   | 44444     | B         |</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>实例4</strong>:匹配不在指定集合中的任何字符。查询 dept_name 字段值包含字母 a~t 以外的字符的记录。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM tb_departments</span><br><span class=\"line\">    -&gt; WHERE dept_name REGEXP '[^a-t]';</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">| dept_id | dept_name | dept_call | dept_type |</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">|       1 | Computer  | 11111     | A         |</span><br><span class=\"line\">|       4 | Economy   | 44444     | B         |</span><br><span class=\"line\">|       5 | History   | 55555     | B         |</span><br><span class=\"line\">+<span class=\"comment\">---------+-----------+-----------+-----------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"},{"name":"数据库","path":"api/categories/数据库.json"}],"tags":[{"name":"SQL","path":"api/tags/SQL.json"},{"name":"数据库","path":"api/tags/数据库.json"}]}