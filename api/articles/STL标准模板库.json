{"title":"STL标准模板库","slug":"STL标准模板库","date":"2020-04-15T05:47:40.000Z","updated":"2020-04-16T12:05:17.720Z","comments":true,"path":"api/articles/STL标准模板库.json","excerpt":null,"covers":["http://img.blog.csdn.net/20160405225541788","http://img.blog.csdn.net/20170727225856144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRlg2Nzc1ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"],"content":"<!-- build time:Thu Apr 23 2020 14:11:58 GMT+0800 (GMT+08:00) --><h1 id=\"stl\"><a class=\"markdownIt-Anchor\" href=\"#stl\"></a> STL</h1><h2 id=\"网站\"><a class=\"markdownIt-Anchor\" href=\"#网站\"></a> 网站</h2><ul><li><a href=\"https://github.com/huihut/note/blob/master/STL.md\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">github . huihut/note/STL.md</a></li><li><a href=\"http://www.cplusplus.com/reference/stl/\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">cplusplus . stl</a></li><li><a href=\"http://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">cppreference . C++ 参考手册</a></li><li><a href=\"http://blog.csdn.net/column/details/geek-stl.html\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">CSDN专栏：STL学习笔记</a></li></ul><h2 id=\"组成\"><a class=\"markdownIt-Anchor\" href=\"#组成\"></a> 组成</h2><ul><li>容器（containers）</li><li>算法（algorithms）</li><li>迭代器（iterators）</li><li>仿函数（functors）</li><li>配接器（adapters）</li><li>空间配置器（allocator）</li></ul><h2 id=\"容器containers\"><a class=\"markdownIt-Anchor\" href=\"#容器containers\"></a> 容器（containers）</h2><ul><li>序列式容器（sequence containers）：元素都是可序（ordered），但未必是有序（sorted）</li><li>关联式容器（associattive containers）</li></ul><h3 id=\"array\"><a class=\"markdownIt-Anchor\" href=\"#array\"></a> array</h3><p>array是固定大小的顺序容器，它们保存了一个以严格的线性顺序排列的特定数量的元素。</p><p>在内部，一个数组除了它所包含的元素（甚至不是它的大小，它是一个模板参数，在编译时是固定的）以外不保存任何数据。存储大小与用语言括号语法（[]）声明的普通数组一样高效。这个类只是增加了一层成员函数和全局函数，所以数组可以作为标准容器使用。</p><p>与其他标准容器不同，数组具有固定的大小，并且不通过分配器管理其元素的分配：它们是封装固定大小数组元素的聚合类型。因此，他们不能动态地扩大或缩小。</p><p>零大小的数组是有效的，但是它们不应该被解除引用（成员的前面，后面和数据）。</p><p>与标准库中的其他容器不同，交换两个数组容器是一种线性操作，它涉及单独交换范围内的所有元素，这通常是相当低效的操作。另一方面，这允许迭代器在两个容器中的元素保持其原始容器关联。</p><p>数组容器的另一个独特特性是它们可以被当作元组对象来处理：array头部重载get函数来访问数组元素，就像它是一个元组，以及专门的tuple_size和tuple_element类型。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">size_t</span> <span class=\"title\">N</span> &gt; <span class=\"title\">class</span> <span class=\"title\">array</span>;</span></span><br></pre></td></tr></table></figure><p><img src=\"http://img.blog.csdn.net/20160405225541788\" alt></p><h4 id=\"arraybegin\"><a class=\"markdownIt-Anchor\" href=\"#arraybegin\"></a> array::begin</h4><p>返回指向数组容器中第一个元素的迭代器。</p><p><img src=\"https://i.stack.imgur.com/oa3EQ.png\" alt></p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 5&gt; myarray = &#123;<span class=\"number\">2</span>, <span class=\"number\">16</span>, <span class=\"number\">77</span>,<span class=\"number\">34</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it = myarray.begin(); it != myarray.end(); ++i)</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 2 16 77 34 50</span><br></pre></td></tr></table></figure><h4 id=\"arrayend\"><a class=\"markdownIt-Anchor\" href=\"#arrayend\"></a> array::end</h4><p>返回指向数组容器中最后一个元素之后的理论元素的迭代器。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">end</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">end</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; myarray = &#123; <span class=\"number\">5</span>, <span class=\"number\">19</span>, <span class=\"number\">77</span>, <span class=\"number\">34</span>, <span class=\"number\">99</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> it = myarray.begin(); it != myarray.end(); ++it )</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 5 19 77 34 99</span><br></pre></td></tr></table></figure><h4 id=\"arrayrbegin\"><a class=\"markdownIt-Anchor\" href=\"#arrayrbegin\"></a> array::rbegin</h4><p>返回指向数组容器中最后一个元素的反向迭代器。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      reverse_iterator rbegin（）<span class=\"keyword\">noexcept</span>;</span><br><span class=\"line\">const_reverse_iterator rbegin（）<span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,4&gt; myarray = &#123;<span class=\"number\">4</span>, <span class=\"number\">26</span>, <span class=\"number\">80</span>, <span class=\"number\">14</span>&#125; ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> rit = myarray.rbegin(); rit &lt; myarray.rend(); ++rit)</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *rit;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 14 80 26 4</span><br></pre></td></tr></table></figure><h4 id=\"arrayrend\"><a class=\"markdownIt-Anchor\" href=\"#arrayrend\"></a> array::rend</h4><p>返回一个反向迭代器，指向数组中第一个元素之前的理论元素（这被认为是它的反向结束）。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">reverse_iterator <span class=\"title\">rend</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_reverse_iterator <span class=\"title\">rend</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,4&gt; myarray = &#123;<span class=\"number\">4</span>, <span class=\"number\">26</span>, <span class=\"number\">80</span>, <span class=\"number\">14</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> rit = myarray.rbegin(); rit &lt; myarray.rend(); ++rit)</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *rit;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 14 80 26 4</span><br></pre></td></tr></table></figure><h4 id=\"arraycbegin\"><a class=\"markdownIt-Anchor\" href=\"#arraycbegin\"></a> array::cbegin</h4><p>返回指向数组容器中第一个元素的常量迭代器（const_iterator）；这个迭代器可以增加和减少，但是不能用来修改它指向的内容。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const_iterator cbegin（）<span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; myarray = &#123;<span class=\"number\">2</span>, <span class=\"number\">16</span>, <span class=\"number\">77</span>, <span class=\"number\">34</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> it = myarray.cbegin(); it != myarray.cend(); ++it )</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;   <span class=\"comment\">// cannot modify *it</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 2 16 77 34 50</span><br></pre></td></tr></table></figure><h4 id=\"arraycend\"><a class=\"markdownIt-Anchor\" href=\"#arraycend\"></a> array::cend</h4><p>返回指向数组容器中最后一个元素之后的理论元素的常量迭代器（const_iterator）。这个迭代器可以增加和减少，但是不能用来修改它指向的内容。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">cend</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; myarray = &#123; <span class=\"number\">15</span>, <span class=\"number\">720</span>, <span class=\"number\">801</span>, <span class=\"number\">1002</span>, <span class=\"number\">3502</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> it = myarray.cbegin(); it != myarray.cend(); ++it )</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;   <span class=\"comment\">// cannot modify *it</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 2 16 77 34 50</span><br></pre></td></tr></table></figure><h4 id=\"arraycrbegin\"><a class=\"markdownIt-Anchor\" href=\"#arraycrbegin\"></a> array::crbegin</h4><p>返回指向数组容器中最后一个元素的常量反向迭代器（const_reverse_iterator）</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const_reverse_iterator crbegin（）<span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,6&gt; myarray = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, <span class=\"number\">60</span>&#125; ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray backwards:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> rit=myarray.crbegin() ; rit &lt; myarray.crend(); ++rit )</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *rit;   <span class=\"comment\">// cannot modify *rit</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray backwards: 60 50 40 30 20 10</span><br></pre></td></tr></table></figure><h4 id=\"arraycrend\"><a class=\"markdownIt-Anchor\" href=\"#arraycrend\"></a> array::crend</h4><p>返回指向数组中第一个元素之前的理论元素的常量反向迭代器（const_reverse_iterator），它被认为是其反向结束。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">const_reverse_iterator <span class=\"title\">crend</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,6&gt; myarray = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, <span class=\"number\">60</span>&#125; ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray backwards:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> rit=myarray.crbegin() ; rit &lt; myarray.crend(); ++rit )</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *rit;   <span class=\"comment\">// cannot modify *rit</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray backwards: 60 50 40 30 20 10</span><br></pre></td></tr></table></figure><h4 id=\"arraysize\"><a class=\"markdownIt-Anchor\" href=\"#arraysize\"></a> array::size</h4><p>返回数组容器中元素的数量。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constexpr</span> size_type size（）<span class=\"keyword\">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; myints;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size of myints:\"</span> &lt;&lt; myints.size() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sizeof(myints):\"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(myints) &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Possible Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size of myints: 5</span><br><span class=\"line\">sizeof(myints): 20</span><br></pre></td></tr></table></figure><h4 id=\"arraymax_size\"><a class=\"markdownIt-Anchor\" href=\"#arraymax_size\"></a> array::max_size</h4><p>返回数组容器可容纳的最大元素数。数组对象的max_size与其size一样，始终等于用于实例化数组模板类的第二个模板参数。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> size_type <span class=\"title\">max_size</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,10&gt; myints;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size of myints: \"</span> &lt;&lt; myints.size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"max_size of myints: \"</span> &lt;&lt; myints.max_size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size of myints: 10</span><br><span class=\"line\">max_size of myints: 10</span><br></pre></td></tr></table></figure><h4 id=\"arrayempty\"><a class=\"markdownIt-Anchor\" href=\"#arrayempty\"></a> array::empty</h4><p>返回一个布尔值，指示数组容器是否为空，即它的size()是否为0。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,0&gt; first;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; second;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"first \"</span> &lt;&lt; (first.empty() ? <span class=\"string\">\"is empty\"</span> : <span class=\"string\">\"is not empty\"</span>) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"second \"</span> &lt;&lt; (second.empty() ? <span class=\"string\">\"is empty\"</span> : <span class=\"string\">\"is not empty\"</span>) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first is empty</span><br><span class=\"line\">second is not empt</span><br></pre></td></tr></table></figure><h4 id=\"arrayoperator\"><a class=\"markdownIt-Anchor\" href=\"#arrayoperator\"></a> array::operator[]</h4><p>返回数组中第n个位置的元素的引用。与array::at相似，但array::at会检查数组边界并通过抛出一个out_of_range异常来判断n是否超出范围，而array::operator[]不检查边界。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      reference <span class=\"keyword\">operator</span>[] (size_type n);</span><br><span class=\"line\">const_reference <span class=\"keyword\">operator</span>[] (size_type n) <span class=\"keyword\">const</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,10&gt; myarray;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// assign some values:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        myarray[i] = i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// print content</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; myarray[i];</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><h4 id=\"arrayat\"><a class=\"markdownIt-Anchor\" href=\"#arrayat\"></a> array::at</h4><p>返回数组中第n个位置的元素的引用。与array::operator[]相似，但array::at会检查数组边界并通过抛出一个out_of_range异常来判断n是否超出范围，而array::operator[]不检查边界。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">reference <span class=\"title\">at</span> <span class=\"params\">( size_type n )</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_reference <span class=\"title\">at</span> <span class=\"params\">( size_type n )</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 10&gt; myarray;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// assign some values:</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t\tmyarray[i] = i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// print content</span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; myarray.at(i);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><h4 id=\"arrayfront\"><a class=\"markdownIt-Anchor\" href=\"#arrayfront\"></a> array::front</h4><p>返回对数组容器中第一个元素的引用。array::begin返回的是迭代器，array::front返回的是直接引用。<br>在空容器上调用此函数会导致未定义的行为。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">reference <span class=\"title\">front</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_reference <span class=\"title\">front</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,3&gt; myarray = &#123;<span class=\"number\">2</span>, <span class=\"number\">16</span>, <span class=\"number\">77</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"front is: \"</span> &lt;&lt; myarray.front() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;   <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"back is: \"</span> &lt;&lt; myarray.back() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;     <span class=\"comment\">// 77</span></span><br><span class=\"line\"></span><br><span class=\"line\">  myarray.front() = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray now contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span>&amp; x : myarray ) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">front is: 2</span><br><span class=\"line\">back is: 77</span><br><span class=\"line\">myarray now contains: 100 16 77</span><br></pre></td></tr></table></figure><h4 id=\"arrayback\"><a class=\"markdownIt-Anchor\" href=\"#arrayback\"></a> array::back</h4><p>返回对数组容器中最后一个元素的引用。array::end返回的是迭代器，array::back返回的是直接引用。<br>在空容器上调用此函数会导致未定义的行为。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">reference <span class=\"title\">back</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_reference <span class=\"title\">back</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,3&gt; myarray = &#123;<span class=\"number\">5</span>, <span class=\"number\">19</span>, <span class=\"number\">77</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"front is: \"</span> &lt;&lt; myarray.front() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;   <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"back is: \"</span> &lt;&lt; myarray.back() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;     <span class=\"comment\">// 77</span></span><br><span class=\"line\"></span><br><span class=\"line\">  myarray.back() = <span class=\"number\">50</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray now contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span>&amp; x : myarray ) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">front is: 5</span><br><span class=\"line\">back is: 77</span><br><span class=\"line\">myarray now contains: 5 19 50</span><br></pre></td></tr></table></figure><h4 id=\"arraydata\"><a class=\"markdownIt-Anchor\" href=\"#arraydata\"></a> array::data</h4><p>返回指向数组对象中第一个元素的指针。</p><p>由于数组中的元素存储在连续的存储位置，所以检索到的指针可以偏移以访问数组中的任何元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">value_type* <span class=\"title\">data</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> value_type* <span class=\"title\">data</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* cstr = <span class=\"string\">\"Test string\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">char</span>,12&gt; charray;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">memcpy</span> (charray.data(),cstr,<span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; charray.data() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test string</span><br></pre></td></tr></table></figure><h4 id=\"arrayfill\"><a class=\"markdownIt-Anchor\" href=\"#arrayfill\"></a> array::fill</h4><p>用val填充数组所有元素，将val设置为数组对象中所有元素的值。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fill</span> <span class=\"params\">(<span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,6&gt; myarray;</span><br><span class=\"line\"></span><br><span class=\"line\">  myarray.fill(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span>&amp; x : myarray) &#123; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 5 5 5 5 5 5</span><br></pre></td></tr></table></figure><h4 id=\"arrayswap\"><a class=\"markdownIt-Anchor\" href=\"#arrayswap\"></a> array::swap</h4><p>通过x的内容交换数组的内容，这是另一个相同类型的数组对象（包括相同的大小）。</p><p>与其他容器的交换成员函数不同，此成员函数通过在各个元素之间执行与其大小相同的单独交换操作，以线性时间运行。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span> <span class=\"params\">(<span class=\"built_in\">array</span>&amp; x)</span> <span class=\"title\">noexcept</span><span class=\"params\">(<span class=\"keyword\">noexcept</span>(swap(declval&lt;value_type&amp;&gt;(),declval&lt;value_type&amp;&gt;())))</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; first = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; second = &#123;<span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  first.swap (second);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"first:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x : first) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"second:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x : second) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first: 11 22 33 44 55</span><br><span class=\"line\">second: 10 20 30 40 50</span><br></pre></td></tr></table></figure><h4 id=\"getarray\"><a class=\"markdownIt-Anchor\" href=\"#getarray\"></a> get（array）</h4><p>形如：std::get&lt;0&gt;(myarray)；传入一个数组容器，返回指定位置元素的引用。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">size_t</span> I，<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>，<span class=\"title\">size_t</span> <span class=\"title\">N</span>&gt; <span class=\"title\">T</span>＆<span class=\"title\">get</span>（<span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">arr</span>）<span class=\"title\">noexcept</span>;</span> </span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">size_t</span> I，<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>，<span class=\"title\">size_t</span> <span class=\"title\">N</span>&gt; <span class=\"title\">T</span> &amp;&amp; <span class=\"title\">get</span>（<span class=\"title\">array</span> &lt;T，N&gt; &amp;&amp; <span class=\"title\">arr</span>）<span class=\"title\">noexcept</span>;</span> </span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">size_t</span> I，<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>，<span class=\"title\">size_t</span> <span class=\"title\">N</span>&gt; <span class=\"title\">const</span> <span class=\"title\">T</span>＆<span class=\"title\">get</span>（<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">arr</span>）<span class=\"title\">noexcept</span>;</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tuple&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,3&gt; myarray = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>&#125;;</span><br><span class=\"line\">  std::tuple&lt;int,int,int&gt; mytuple (10, 20, 30);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::tuple_element&lt;<span class=\"number\">0</span>,<span class=\"keyword\">decltype</span>(myarray)&gt;::type myelement;  <span class=\"comment\">// int myelement</span></span><br><span class=\"line\"></span><br><span class=\"line\">  myelement = <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">2</span>&gt;(myarray);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">2</span>&gt;(myarray) = <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(myarray);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(myarray) = myelement;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"first element in myarray: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(myarray) &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"first element in mytuple: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(mytuple) &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first element in myarray: 30</span><br><span class=\"line\">first element in mytuple: 10</span><br></pre></td></tr></table></figure><h4 id=\"relational-operators-array\"><a class=\"markdownIt-Anchor\" href=\"#relational-operators-array\"></a> relational operators (array)</h4><p>形如：arrayA != arrayB、arrayA &gt; arrayB；依此比较数组每个元素的大小关系。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（<span class=\"number\">1</span>）\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>，<span class=\"title\">size_T</span> <span class=\"title\">N</span>&gt; </span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">bool</span> <span class=\"title\">operator</span> ==（<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">lhs</span>，<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">rhs</span>）;</span></span><br><span class=\"line\">（<span class=\"number\">2</span>）\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>，<span class=\"title\">size_T</span> <span class=\"title\">N</span>&gt; </span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">bool</span> <span class=\"title\">operator</span>！=（<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">lhs</span>，<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">rhs</span>）;</span></span><br><span class=\"line\">（<span class=\"number\">3</span>）\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>，<span class=\"title\">size_T</span> <span class=\"title\">N</span>&gt; </span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">bool</span> <span class=\"title\">operator</span> &lt;（const array &lt;T，N&gt;＆lhs，const array &lt;T，N&gt;＆rhs）;</span></span><br><span class=\"line\"><span class=\"class\">（4）\t</span></span><br><span class=\"line\"><span class=\"class\">template &lt;class T，size_T N&gt; </span></span><br><span class=\"line\"><span class=\"class\">  bool operator &lt;=（const array &lt;T，N&gt;＆lhs，const array &lt;T，N&gt;＆rhs）;</span></span><br><span class=\"line\"><span class=\"class\">（5）\t</span></span><br><span class=\"line\"><span class=\"class\">template &lt;class T，size_T N&gt; </span></span><br><span class=\"line\"><span class=\"class\">  bool operator&gt;（const array &lt;T，N&gt;＆lhs，const array &lt;T，N&gt;＆rhs）;</span></span><br><span class=\"line\"><span class=\"class\">（6）\t</span></span><br><span class=\"line\"><span class=\"class\">template &lt;class T，size_T N&gt; </span></span><br><span class=\"line\"><span class=\"class\">  bool operator&gt; =（<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">lhs</span>，<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">rhs</span>）;</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; a = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; b = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; c = &#123;<span class=\"number\">50</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a==b) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a and b are equal\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (b!=c) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b and c are not equal\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (b&lt;c) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b is less than c\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (c&gt;b) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"c is greater than b\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a&lt;=b) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a is less than or equal to b\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a&gt;=b) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a is greater than or equal to b\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a and b are equal</span><br><span class=\"line\">b and c are not equal</span><br><span class=\"line\">b is less than c</span><br><span class=\"line\">c is greater than b</span><br><span class=\"line\">a is less than or equal to b</span><br><span class=\"line\">a is greater than or equal to b</span><br></pre></td></tr></table></figure><h3 id=\"vector\"><a class=\"markdownIt-Anchor\" href=\"#vector\"></a> vector</h3><p>vector是表示可以改变大小的数组的序列容器。</p><p>就像数组一样，vector为它们的元素使用连续的存储位置，这意味着它们的元素也可以使用到其元素的常规指针上的偏移来访问，而且和数组一样高效。但是与数组不同的是，它们的大小可以动态地改变，它们的存储由容器自动处理。</p><p>在内部，vector使用一个动态分配的数组来存储它们的元素。这个数组可能需要重新分配，以便在插入新元素时增加大小，这意味着分配一个新数组并将所有元素移动到其中。就处理时间而言，这是一个相对昂贵的任务，因此每次将元素添加到容器时矢量都不会重新分配。</p><p>相反，vector容器可以分配一些额外的存储以适应可能的增长，并且因此容器可以具有比严格需要包含其元素（即，其大小）的存储更大的实际容量。库可以实现不同的策略的增长到内存使用和重新分配之间的平衡，但在任何情况下，再分配应仅在对数生长的间隔发生尺寸，使得在所述载体的末端各个元件的插入可以与提供分期常量时间复杂性。</p><p>因此，与数组相比，载体消耗更多的内存来交换管理存储和以有效方式动态增长的能力。</p><p>与其他动态序列容器（deques，lists和 forward_lists ）相比，vector非常有效地访问其元素（就像数组一样），并相对有效地从元素末尾添加或移除元素。对于涉及插入或移除除了结尾之外的位置的元素的操作，它们执行比其他位置更差的操作，并且具有比列表和 forward_lists 更不一致的迭代器和引用。</p><p>针对 vector 的各种常见操作的复杂度（效率）如下：</p><ul><li>随机访问 - 常数 O(1)</li><li>在尾部增删元素 - 平摊（amortized）常数 O(1)}}</li><li>增删元素 - 至 vector 尾部的线性距离 O(n)}}</li></ul><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Alloc</span> = <span class=\"title\">allocator</span>&lt;T&gt; &gt; <span class=\"title\">class</span> <span class=\"title\">vector</span>;</span></span><br></pre></td></tr></table></figure><p><img src=\"http://img.blog.csdn.net/20160406151211233\" alt></p><h4 id=\"vectorvector\"><a class=\"markdownIt-Anchor\" href=\"#vectorvector\"></a> vector::vector</h4><p>（1）empty容器构造函数（默认构造函数）<br>构造一个空的容器，没有元素。<br>（2）fill构造函数<br>用n个元素构造一个容器。每个元素都是val的副本（如果提供）。<br>（3）范围（range）构造器<br>使用与[ range，first，last]范围内的元素相同的顺序构造一个容器，其中的每个元素都是emplace -从该范围内相应的元素构造而成。<br>（4）复制（copy）构造函数（并用分配器复制）<br>按照相同的顺序构造一个包含x中每个元素的副本的容器。<br>（5）移动（move）构造函数（和分配器移动）<br>构造一个获取x元素的容器。<br>如果指定了alloc并且与x的分配器不同，那么元素将被移动。否则，没有构建元素（他们的所有权直接转移）。<br>x保持未指定但有效的状态。<br>（6）初始化列表构造函数<br>构造一个容器中的每个元件中的一个拷贝的IL，以相同的顺序。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span> (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">vector</span> <span class=\"params\">(<span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class=\"line\">fill (<span class=\"number\">2</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">vector</span> <span class=\"params\">(size_type n)</span></span>;</span><br><span class=\"line\">         <span class=\"built_in\">vector</span> (size_type n, <span class=\"keyword\">const</span> value_type&amp; val,</span><br><span class=\"line\">                 <span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type());</span><br><span class=\"line\">range (<span class=\"number\">3</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputIterator</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">vector</span> (<span class=\"title\">InputIterator</span> <span class=\"title\">first</span>, <span class=\"title\">InputIterator</span> <span class=\"title\">last</span>,</span></span><br><span class=\"line\"><span class=\"class\">          <span class=\"title\">const</span> <span class=\"title\">allocator_type</span>&amp; <span class=\"title\">alloc</span> = <span class=\"title\">allocator_type</span>());</span></span><br><span class=\"line\">copy (<span class=\"number\">4</span>)\t</span><br><span class=\"line\"><span class=\"built_in\">vector</span> (<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&amp; x);</span><br><span class=\"line\"><span class=\"built_in\">vector</span> (<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&amp; x, <span class=\"keyword\">const</span> allocator_type&amp; alloc);</span><br><span class=\"line\">move (<span class=\"number\">5</span>)\t</span><br><span class=\"line\"><span class=\"built_in\">vector</span> (<span class=\"built_in\">vector</span>&amp;&amp; x);</span><br><span class=\"line\"><span class=\"built_in\">vector</span> (<span class=\"built_in\">vector</span>&amp;&amp; x, <span class=\"keyword\">const</span> allocator_type&amp; alloc);</span><br><span class=\"line\"><span class=\"function\">initializer <span class=\"title\">list</span> <span class=\"params\">(<span class=\"number\">6</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">vector</span> <span class=\"params\">(<span class=\"built_in\">initializer_list</span>&lt;value_type&gt; il,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">       <span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// constructors used in the same order as described above:</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; first;             <span class=\"comment\">// empty vector of ints</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">second</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">100</span>)</span></span>;    <span class=\"comment\">// four ints with value 100</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">third</span><span class=\"params\">(second.begin(), second.end())</span></span>;<span class=\"comment\">// iterating through second</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">fourth</span><span class=\"params\">(third)</span></span>;     <span class=\"comment\">// a copy of third</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// the iterator constructor can also be used to construct from arrays:</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> myints[] = &#123;<span class=\"number\">16</span>,<span class=\"number\">2</span>,<span class=\"number\">77</span>,<span class=\"number\">29</span>&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">fifth</span><span class=\"params\">(myints, myints + <span class=\"keyword\">sizeof</span>(myints) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The contents of fifth are:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = fifth.begin(); it != fifth.end(); ++it)</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The contents of fifth are: 16 2 77 29</span><br></pre></td></tr></table></figure><h4 id=\"vector~vector\"><a class=\"markdownIt-Anchor\" href=\"#vector~vector\"></a> vector::~vector</h4><p>销毁容器对象。这将在每个包含的元素上调用allocator_traits::destroy，并使用其分配器释放由矢量分配的所有存储容量。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~<span class=\"built_in\">vector</span>();</span><br></pre></td></tr></table></figure><h4 id=\"vectoroperator\"><a class=\"markdownIt-Anchor\" href=\"#vectoroperator\"></a> vector::operator=</h4><p>将新内容分配给容器，替换其当前内容，并相应地修改其大小。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copy (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&amp; <span class=\"keyword\">operator</span>= (<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&amp; x);</span><br><span class=\"line\">move (<span class=\"number\">2</span>)\t</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&amp; <span class=\"keyword\">operator</span>= (<span class=\"built_in\">vector</span>&amp;&amp; x);</span><br><span class=\"line\"><span class=\"function\">initializer <span class=\"title\">list</span> <span class=\"params\">(<span class=\"number\">3</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&amp; <span class=\"keyword\">operator</span></span>= (<span class=\"built_in\">initializer_list</span>&lt;value_type&gt; il);</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  std::vector&lt;int&gt; foo (3,0);</span><br><span class=\"line\">  std::vector&lt;int&gt; bar (5,0);</span><br><span class=\"line\"></span><br><span class=\"line\">  bar &#x3D; foo;</span><br><span class=\"line\">  foo &#x3D; std::vector&lt;int&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; &quot;Size of foo: &quot; &lt;&lt; int(foo.size()) &lt;&lt; &#39;\\n&#39;;</span><br><span class=\"line\">  std::cout &lt;&lt; &quot;Size of bar: &quot; &lt;&lt; int(bar.size()) &lt;&lt; &#39;\\n&#39;;</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Size of foo: 0</span><br><span class=\"line\">Size of bar: 3</span><br></pre></td></tr></table></figure><h4 id=\"vectorbegin\"><a class=\"markdownIt-Anchor\" href=\"#vectorbegin\"></a> vector::begin</h4><h4 id=\"vectorend\"><a class=\"markdownIt-Anchor\" href=\"#vectorend\"></a> vector::end</h4><h4 id=\"vectorrbegin\"><a class=\"markdownIt-Anchor\" href=\"#vectorrbegin\"></a> vector::rbegin</h4><h4 id=\"vectorrend\"><a class=\"markdownIt-Anchor\" href=\"#vectorrend\"></a> vector::rend</h4><h4 id=\"vectorcbegin\"><a class=\"markdownIt-Anchor\" href=\"#vectorcbegin\"></a> vector::cbegin</h4><h4 id=\"vectorcend\"><a class=\"markdownIt-Anchor\" href=\"#vectorcend\"></a> vector::cend</h4><h4 id=\"vectorrcbegin\"><a class=\"markdownIt-Anchor\" href=\"#vectorrcbegin\"></a> vector::rcbegin</h4><h4 id=\"vectorrcend\"><a class=\"markdownIt-Anchor\" href=\"#vectorrcend\"></a> vector::rcend</h4><h4 id=\"vectorsize\"><a class=\"markdownIt-Anchor\" href=\"#vectorsize\"></a> vector::size</h4><p>返回vector中元素的数量。</p><p>这是vector中保存的实际对象的数量，不一定等于其存储容量。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">size_type <span class=\"title\">size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myints;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"0. size: \"</span> &lt;&lt; myints.size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++) myints.push_back(i);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1. size: \"</span> &lt;&lt; myints.size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  myints.insert (myints.end(),<span class=\"number\">10</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"2. size: \"</span> &lt;&lt; myints.size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  myints.pop_back();</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"3. size: \"</span> &lt;&lt; myints.size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0. size: 0</span><br><span class=\"line\">1. size: 10</span><br><span class=\"line\">2. size: 20</span><br><span class=\"line\">3. size: 19</span><br></pre></td></tr></table></figure><h4 id=\"vectormax_size\"><a class=\"markdownIt-Anchor\" href=\"#vectormax_size\"></a> vector::max_size</h4><p>返回该vector可容纳的元素的最大数量。由于已知的系统或库实现限制，</p><p>这是容器可以达到的最大潜在大小，但容器无法保证能够达到该大小：在达到该大小之前的任何时间，仍然无法分配存储。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">size_type <span class=\"title\">max_size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set some content in the vector:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i++) myvector.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size: \"</span> &lt;&lt; myvector.size() &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"capacity: \"</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"max_size: \"</span> &lt;&lt; myvector.max_size() &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>A possible output for this program could be:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size: 100</span><br><span class=\"line\">capacity: 128</span><br><span class=\"line\">max_size: 1073741823</span><br></pre></td></tr></table></figure><h4 id=\"vectorresize\"><a class=\"markdownIt-Anchor\" href=\"#vectorresize\"></a> vector::resize</h4><p>调整容器的大小，使其包含n个元素。</p><p>如果n小于当前的容器size，内容将被缩小到前n个元素，将其删除（并销毁它们）。</p><p>如果n大于当前容器size，则通过在末尾插入尽可能多的元素以达到大小n来扩展内容。如果指定了val，则新元素将初始化为val的副本，否则将进行值初始化。</p><p>如果n也大于当前的容器的capacity（容量），分配的存储空间将自动重新分配。</p><p>注意这个函数通过插入或者删除元素的内容来改变容器的实际内容。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span> <span class=\"params\">(size_type n)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span> <span class=\"params\">(size_type n, <span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set some initial content:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">10</span>;i++) myvector.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\">  myvector.resize(<span class=\"number\">5</span>);</span><br><span class=\"line\">  myvector.resize(<span class=\"number\">8</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">  myvector.resize(<span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myvector contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;myvector.size();i++)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; myvector[i];</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0</span><br></pre></td></tr></table></figure><h4 id=\"vectorcapacity\"><a class=\"markdownIt-Anchor\" href=\"#vectorcapacity\"></a> vector::capacity</h4><p>返回当前为vector分配的存储空间的大小，用元素表示。这个capacity(容量)不一定等于vector的size。它可以相等或更大，额外的空间允许适应增长，而不需要重新分配每个插入。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">size_type <span class=\"title\">capacity</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set some content in the vector:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i++) myvector.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>) myvector.size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"capacity: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>) myvector.capacity() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"max_size: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>) myvector.max_size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>A possible output for this program could be:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size: 100</span><br><span class=\"line\">capacity: 128</span><br><span class=\"line\">max_size: 1073741823</span><br></pre></td></tr></table></figure><h4 id=\"vectorempty\"><a class=\"markdownIt-Anchor\" href=\"#vectorempty\"></a> vector::empty</h4><p>返回vector是否为空（即，它的size是否为0）</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span> <span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">10</span>;i++) myvector.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!myvector.empty())</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">     sum += myvector.back();</span><br><span class=\"line\">     myvector.pop_back();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"total: \"</span> &lt;&lt; sum &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total: 55</span><br></pre></td></tr></table></figure><h4 id=\"vectorreserve\"><a class=\"markdownIt-Anchor\" href=\"#vectorreserve\"></a> vector::reserve</h4><p>请求vector容量至少足以包含n个元素。</p><p>如果n大于当前vector容量，则该函数使容器重新分配其存储容量，从而将其容量增加到n（或更大）。</p><p>在所有其他情况下，函数调用不会导致重新分配，并且vector容量不受影响。</p><p>这个函数对vector大小没有影响，也不能改变它的元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reserve</span> <span class=\"params\">(size_type n)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::size_type sz;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; foo;</span><br><span class=\"line\">  sz = foo.capacity();</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"making foo grow:\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; ++i) &#123;</span><br><span class=\"line\">    foo.push_back(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sz!=foo.capacity()) &#123;</span><br><span class=\"line\">      sz = foo.capacity();</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"capacity changed: \"</span> &lt;&lt; sz &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; bar;</span><br><span class=\"line\">  sz = bar.capacity();</span><br><span class=\"line\">  bar.reserve(<span class=\"number\">100</span>);   <span class=\"comment\">// this is the only difference with foo above</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"making bar grow:\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; ++i) &#123;</span><br><span class=\"line\">    bar.push_back(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sz!=bar.capacity()) &#123;</span><br><span class=\"line\">      sz = bar.capacity();</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"capacity changed: \"</span> &lt;&lt; sz &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Possible output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">making foo grow:</span><br><span class=\"line\">capacity changed: 1</span><br><span class=\"line\">capacity changed: 2</span><br><span class=\"line\">capacity changed: 4</span><br><span class=\"line\">capacity changed: 8</span><br><span class=\"line\">capacity changed: 16</span><br><span class=\"line\">capacity changed: 32</span><br><span class=\"line\">capacity changed: 64</span><br><span class=\"line\">capacity changed: 128</span><br><span class=\"line\">making bar grow:</span><br><span class=\"line\">capacity changed: 100</span><br></pre></td></tr></table></figure><h4 id=\"vectorshrink_to_fit\"><a class=\"markdownIt-Anchor\" href=\"#vectorshrink_to_fit\"></a> vector::shrink_to_fit</h4><p>要求容器减小其capacity(容量)以适应其尺寸。</p><p>该请求是非绑定的，并且容器实现可以自由地进行优化，并且保持capacity大于其size的vector。 这可能导致重新分配，但对矢量大小没有影响，并且不能改变其元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shrink_to_fit</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">myvector</span> <span class=\"params\">(<span class=\"number\">100</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1. capacity of myvector: \"</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  myvector.resize(<span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"2. capacity of myvector: \"</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  myvector.shrink_to_fit();</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"3. capacity of myvector: \"</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Possible output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. capacity of myvector: 100</span><br><span class=\"line\">2. capacity of myvector: 100</span><br><span class=\"line\">3. capacity of myvector: 10</span><br></pre></td></tr></table></figure><h4 id=\"vectoroperator-2\"><a class=\"markdownIt-Anchor\" href=\"#vectoroperator-2\"></a> vector::operator[]</h4><h4 id=\"vectorat\"><a class=\"markdownIt-Anchor\" href=\"#vectorat\"></a> vector::at</h4><h4 id=\"vectorfront\"><a class=\"markdownIt-Anchor\" href=\"#vectorfront\"></a> vector::front</h4><h4 id=\"vectorback\"><a class=\"markdownIt-Anchor\" href=\"#vectorback\"></a> vector::back</h4><h4 id=\"vectordata\"><a class=\"markdownIt-Anchor\" href=\"#vectordata\"></a> vector::data</h4><h4 id=\"vectorassign\"><a class=\"markdownIt-Anchor\" href=\"#vectorassign\"></a> vector::assign</h4><p>将新内容分配给vector，替换其当前内容，并相应地修改其大小。</p><p>在范围版本（1）中，新内容是从第一个和最后一个范围内的每个元素按相同顺序构造的元素。</p><p>在填充版本（2）中，新内容是n个元素，每个元素都被初始化为一个val的副本。</p><p>在初始化列表版本（3）中，新内容是以相同顺序作为初始化列表传递的值的副本。</p><p>所述内部分配器被用于（通过其性状），以分配和解除分配存储器如果重新分配发生。它也习惯于摧毁所有现有的元素，并构建新的元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">range (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputIterator</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">assign</span> (<span class=\"title\">InputIterator</span> <span class=\"title\">first</span>, <span class=\"title\">InputIterator</span> <span class=\"title\">last</span>);</span></span><br><span class=\"line\">fill (<span class=\"number\">2</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">assign</span> <span class=\"params\">(size_type n, <span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br><span class=\"line\"><span class=\"function\">initializer <span class=\"title\">list</span> <span class=\"params\">(<span class=\"number\">3</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">assign</span> <span class=\"params\">(<span class=\"built_in\">initializer_list</span>&lt;value_type&gt; il)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; first;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; second;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; third;</span><br><span class=\"line\"></span><br><span class=\"line\">  first.assign (<span class=\"number\">7</span>,<span class=\"number\">100</span>);             <span class=\"comment\">// 7 ints with a value of 100</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it;</span><br><span class=\"line\">  it=first.begin()+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  second.assign (it,first.end()<span class=\"number\">-1</span>); <span class=\"comment\">// the 5 central values of first</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> myints[] = &#123;<span class=\"number\">1776</span>,<span class=\"number\">7</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">  third.assign (myints,myints+<span class=\"number\">3</span>);   <span class=\"comment\">// assigning from array.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Size of first: \"</span> &lt;&lt; <span class=\"keyword\">int</span> (first.size()) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Size of second: \"</span> &lt;&lt; <span class=\"keyword\">int</span> (second.size()) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Size of third: \"</span> &lt;&lt; <span class=\"keyword\">int</span> (third.size()) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Size of first: 7</span><br><span class=\"line\">Size of second: 5</span><br><span class=\"line\">Size of third: 3</span><br></pre></td></tr></table></figure><p>补充：vector::assign 与 vector::operator= 的区别：</p><ol><li>vector::assign 实现源码</li></ol><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">assign</span><span class=\"params\">(size_type __n, <span class=\"keyword\">const</span> _Tp&amp; __val)</span> </span>&#123; _M_fill_assign(__n, __val); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> _<span class=\"title\">Tp</span>, <span class=\"title\">class</span> _<span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">vector</span>&lt;_Tp, _Alloc&gt;:</span>:_M_fill_assign(<span class=\"keyword\">size_t</span> __n, <span class=\"keyword\">const</span> value_type&amp; __val) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__n &gt; capacity()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;_Tp, _Alloc&gt; __tmp(__n, __val, get_allocator());</span><br><span class=\"line\">    __tmp.swap(*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (__n &gt; size()) &#123;</span><br><span class=\"line\">    fill(begin(), end(), __val);</span><br><span class=\"line\">    _M_finish = uninitialized_fill_n(_M_finish, __n - size(), __val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    erase(fill_n(begin(), __n, __val), end());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>vector::operator= 实现源码</li></ol><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> _<span class=\"title\">Tp</span>, <span class=\"title\">class</span> _<span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">vector</span>&lt;_Tp,_Alloc&gt;&amp; </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">vector</span>&lt;_Tp,_Alloc&gt;:</span>:<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;_Tp, _Alloc&gt;&amp; __x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (&amp;__x != <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> size_type __xlen = __x.size();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__xlen &gt; capacity()) &#123;</span><br><span class=\"line\">      iterator __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end());</span><br><span class=\"line\">      destroy(_M_start, _M_finish);</span><br><span class=\"line\">      _M_deallocate(_M_start, _M_end_of_storage - _M_start);</span><br><span class=\"line\">      _M_start = __tmp;</span><br><span class=\"line\">      _M_end_of_storage = _M_start + __xlen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (size() &gt;= __xlen) &#123;</span><br><span class=\"line\">      iterator __i = copy(__x.begin(), __x.end(), begin());</span><br><span class=\"line\">      destroy(__i, _M_finish);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      copy(__x.begin(), __x.begin() + size(), _M_start);</span><br><span class=\"line\">      uninitialized_copy(__x.begin() + size(), __x.end(), _M_finish);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _M_finish = _M_start + __xlen;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"vectorpush_back\"><a class=\"markdownIt-Anchor\" href=\"#vectorpush_back\"></a> vector::push_back</h4><p>在vector的最后一个元素之后添加一个新元素。val的内容被复制（或移动）到新的元素。</p><p>这有效地将容器size增加了一个，如果新的矢量size超过了当前vector的capacity，则导致所分配的存储空间自动重新分配。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_back</span> <span class=\"params\">(<span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_back</span> <span class=\"params\">(value_type&amp;&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> myint;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Please enter some integers (enter 0 to end):\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span> &gt;&gt; myint;</span><br><span class=\"line\">    myvector.push_back (myint);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (myint);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myvector stores \"</span> &lt;&lt; <span class=\"keyword\">int</span>(myvector.size()) &lt;&lt; <span class=\"string\">\" numbers.\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"vectorpop_back\"><a class=\"markdownIt-Anchor\" href=\"#vectorpop_back\"></a> vector::pop_back</h4><p>删除vector中的最后一个元素，有效地将容器size减少一个。</p><p>这破坏了被删除的元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span> <span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">  myvector.push_back (<span class=\"number\">100</span>);</span><br><span class=\"line\">  myvector.push_back (<span class=\"number\">200</span>);</span><br><span class=\"line\">  myvector.push_back (<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!myvector.empty())</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sum+=myvector.back();</span><br><span class=\"line\">    myvector.pop_back();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The elements of myvector add up to \"</span> &lt;&lt; sum &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The elements of myvector add up to 600</span><br></pre></td></tr></table></figure><h4 id=\"vectorinsert\"><a class=\"markdownIt-Anchor\" href=\"#vectorinsert\"></a> vector::insert</h4><p>通过在指定位置的元素之前插入新元素来扩展该vector，通过插入元素的数量有效地增加容器大小。 这会导致分配的存储空间自动重新分配，只有在新的vector的size超过当前的vector的capacity的情况下。</p><p>由于vector使用数组作为其基础存储，因此除了将元素插入到vector末尾之后，或vector的begin之前，其他位置会导致容器重新定位位置之后的所有元素到他们的新位置。与其他种类的序列容器（例如list或forward_list）执行相同操作的操作相比，这通常是低效的操作。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">single <span class=\"title\">element</span> <span class=\"params\">(<span class=\"number\">1</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">insert</span> <span class=\"params\">(const_iterator position, <span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br><span class=\"line\">fill (<span class=\"number\">2</span>)\t</span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">insert</span> <span class=\"params\">(const_iterator position, size_type n, <span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br><span class=\"line\">range (<span class=\"number\">3</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputIterator</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">iterator</span> <span class=\"title\">insert</span> (<span class=\"title\">const_iterator</span> <span class=\"title\">position</span>, <span class=\"title\">InputIterator</span> <span class=\"title\">first</span>, <span class=\"title\">InputIterator</span> <span class=\"title\">last</span>);</span></span><br><span class=\"line\">move (<span class=\"number\">4</span>)\t</span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">insert</span> <span class=\"params\">(const_iterator position, value_type&amp;&amp; val)</span></span>;</span><br><span class=\"line\"><span class=\"function\">initializer <span class=\"title\">list</span> <span class=\"params\">(<span class=\"number\">5</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">insert</span> <span class=\"params\">(const_iterator position, <span class=\"built_in\">initializer_list</span>&lt;value_type&gt; il)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">myvector</span> <span class=\"params\">(<span class=\"number\">3</span>,<span class=\"number\">100</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it;</span><br><span class=\"line\"></span><br><span class=\"line\">  it = myvector.begin();</span><br><span class=\"line\">  it = myvector.insert ( it , <span class=\"number\">200</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">  myvector.insert (it,<span class=\"number\">2</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// \"it\" no longer valid, get a new one:</span></span><br><span class=\"line\">  it = myvector.begin();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">anothervector</span> <span class=\"params\">(<span class=\"number\">2</span>,<span class=\"number\">400</span>)</span></span>;</span><br><span class=\"line\">  myvector.insert (it+<span class=\"number\">2</span>,anothervector.begin(),anothervector.end());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> myarray [] = &#123; <span class=\"number\">501</span>,<span class=\"number\">502</span>,<span class=\"number\">503</span> &#125;;</span><br><span class=\"line\">  myvector.insert (myvector.begin(), myarray, myarray+<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myvector contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (it=myvector.begin(); it&lt;myvector.end(); it++)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myvector contains: 501 502 503 300 300 400 400 200 100 100 100</span><br></pre></td></tr></table></figure><p>补充：insert 迭代器野指针错误：</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(<span class=\"number\">5</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator vi;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取vector第一个元素的迭代器</span></span><br><span class=\"line\">\tvi = v.begin();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// push_back 插入元素之后可能会因为 push_back 的骚操作（创建一个新vector把旧vector的值复制到新vector），导致vector迭代器iterator的指针变成野指针，而导致insert出错</span></span><br><span class=\"line\">\tv.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tv.insert(vi, <span class=\"number\">2</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>改正：应该把<code>vi = v.begin();</code>放到<code>v.push_back(10);</code>后面</p><h4 id=\"vectorerase\"><a class=\"markdownIt-Anchor\" href=\"#vectorerase\"></a> vector::erase</h4><p>从vector中删除单个元素（position）或一系列元素（[first，last））。</p><p>这有效地减少了被去除的元素的数量，从而破坏了容器的大小。</p><p>由于vector使用一个数组作为其底层存储，所以删除除vector结束位置之后，或vector的begin之前的元素外，将导致容器将段被擦除后的所有元素重新定位到新的位置。与其他种类的序列容器（例如list或forward_list）执行相同操作的操作相比，这通常是低效的操作。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">erase</span> <span class=\"params\">(const_iterator position)</span></span>;</span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">erase</span> <span class=\"params\">(const_iterator first, const_iterator last)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set some values (from 1 to 10)</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">10</span>; i++) myvector.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// erase the 6th element</span></span><br><span class=\"line\">  myvector.erase (myvector.begin()+<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// erase the first 3 elements:</span></span><br><span class=\"line\">  myvector.erase (myvector.begin(),myvector.begin()+<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myvector contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;myvector.size(); ++i)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; myvector[i];</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myvector contains: 4 5 7 8 9 10</span><br></pre></td></tr></table></figure><h4 id=\"vectorswap\"><a class=\"markdownIt-Anchor\" href=\"#vectorswap\"></a> vector::swap</h4><p>通过x的内容交换容器的内容，x是另一个相同类型的vector对象。尺寸可能不同。</p><p>在调用这个成员函数之后，这个容器中的元素是那些在调用之前在x中的元素，而x的元素是在这个元素中的元素。所有迭代器，引用和指针对交换对象保持有效。</p><p>请注意，非成员函数存在具有相同名称的交换，并使用与此成员函数相似的优化来重载该算法。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span> <span class=\"params\">(<span class=\"built_in\">vector</span>&amp; x)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">foo</span> <span class=\"params\">(<span class=\"number\">3</span>,<span class=\"number\">100</span>)</span></span>;   <span class=\"comment\">// three ints with a value of 100</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">bar</span> <span class=\"params\">(<span class=\"number\">5</span>,<span class=\"number\">200</span>)</span></span>;   <span class=\"comment\">// five ints with a value of 200</span></span><br><span class=\"line\"></span><br><span class=\"line\">  foo.swap(bar);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"foo contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;foo.size(); i++)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; foo[i];</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"bar contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;bar.size(); i++)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; bar[i];</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo contains: 200 200 200 200 200 </span><br><span class=\"line\">bar contains: 100 100 100</span><br></pre></td></tr></table></figure><h4 id=\"vectorclear\"><a class=\"markdownIt-Anchor\" href=\"#vectorclear\"></a> vector::clear</h4><p>从vector中删除所有的元素（被销毁），留下size为0的容器。</p><p>不保证重新分配，并且由于调用此函数， vector的capacity不保证发生变化。强制重新分配的典型替代方法是使用swap：<code>vector&lt;T&gt;().swap(x); // clear x reallocating</code></p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = v.begin(); it != v.end(); ++it)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">' '</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">v1</span><span class=\"params\">(<span class=\"number\">5</span>, <span class=\"number\">50</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1 size  = \"</span> &lt;&lt; v1.size() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1 capacity  = \"</span> &lt;&lt; v1.capacity() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv1.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1 size  = \"</span> &lt;&lt; v1.size() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1 capacity  = \"</span> &lt;&lt; v1.capacity() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv1.push_back(<span class=\"number\">11</span>);</span><br><span class=\"line\">\tv1.push_back(<span class=\"number\">22</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1 size  = \"</span> &lt;&lt; v1.size() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1 capacity  = \"</span> &lt;&lt; v1.capacity() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">50 50 50 50 50</span><br><span class=\"line\">v1 size  &#x3D; 5</span><br><span class=\"line\">v1 capacity  &#x3D; 5</span><br><span class=\"line\"></span><br><span class=\"line\">v1 size  &#x3D; 0</span><br><span class=\"line\">v1 capacity  &#x3D; 5</span><br><span class=\"line\">11 22</span><br><span class=\"line\">v1 size  &#x3D; 2</span><br><span class=\"line\">v1 capacity  &#x3D; 5</span><br></pre></td></tr></table></figure><h4 id=\"vectoremplace\"><a class=\"markdownIt-Anchor\" href=\"#vectoremplace\"></a> vector::emplace</h4><p>通过在position位置处插入新元素args来扩展容器。这个新元素是用args作为构建的参数来构建的。</p><p>这有效地增加了一个容器的大小。</p><p>分配存储空间的自动重新分配发生在新的vector的size超过当前向量容量的情况下。</p><p>由于vector使用数组作为其基础存储，因此除了将元素插入到vector末尾之后，或vector的begin之前，其他位置会导致容器重新定位位置之后的所有元素到他们的新位置。与其他种类的序列容器（例如list或forward_list）执行相同操作的操作相比，这通常是低效的操作。</p><p>该元素是通过调用allocator_traits::construct来转换args来创建的。插入一个类似的成员函数，将现有对象复制或移动到容器中。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">iterator</span> <span class=\"title\">emplace</span> (<span class=\"title\">const_iterator</span> <span class=\"title\">position</span>, <span class=\"title\">Args</span>&amp;&amp;... <span class=\"title\">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector = &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">auto</span> it = myvector.emplace ( myvector.begin()+<span class=\"number\">1</span>, <span class=\"number\">100</span> );</span><br><span class=\"line\">  myvector.emplace ( it, <span class=\"number\">200</span> );</span><br><span class=\"line\">  myvector.emplace ( myvector.end(), <span class=\"number\">300</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myvector contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; x: myvector)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myvector contains: 10 200 100 20 30 300</span><br></pre></td></tr></table></figure><h4 id=\"vectoremplace_back\"><a class=\"markdownIt-Anchor\" href=\"#vectoremplace_back\"></a> vector::emplace_back</h4><p>在vector的末尾插入一个新的元素，紧跟在当前的最后一个元素之后。这个新元素是用args作为构造函数的参数来构造的。</p><p>这有效地将容器大小增加了一个，如果新的矢量大小超过了当前的vector容量，则导致所分配的存储空间自动重新分配。</p><p>该元素是通过调用allocator_traits :: construct来转换args来创建的。</p><p>与push_back相比，emplace_back可以避免额外的复制和移动操作。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">emplace_back</span> (<span class=\"title\">Args</span>&amp;&amp;... <span class=\"title\">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">President</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> country;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> year;</span><br><span class=\"line\"> </span><br><span class=\"line\">    President(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> p_name, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> p_country, <span class=\"keyword\">int</span> p_year)</span><br><span class=\"line\">        : name(<span class=\"built_in\">std</span>::move(p_name)), country(<span class=\"built_in\">std</span>::move(p_country)), year(p_year)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"I am being constructed.\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    President(President&amp;&amp; other)</span><br><span class=\"line\">        : name(<span class=\"built_in\">std</span>::move(other.name)), country(<span class=\"built_in\">std</span>::move(other.country)), year(other.year)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"I am being moved.\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    President&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> President&amp; other) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;President&gt; elections;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"emplace_back:\\n\"</span>;</span><br><span class=\"line\">    elections.emplace_back(<span class=\"string\">\"Nelson Mandela\"</span>, <span class=\"string\">\"South Africa\"</span>, <span class=\"number\">1994</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;President&gt; reElections;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\npush_back:\\n\"</span>;</span><br><span class=\"line\">    reElections.push_back(President(<span class=\"string\">\"Franklin Delano Roosevelt\"</span>, <span class=\"string\">\"the USA\"</span>, <span class=\"number\">1936</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\nContents:\\n\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (President <span class=\"keyword\">const</span>&amp; president: elections) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; president.name &lt;&lt; <span class=\"string\">\" was elected president of \"</span></span><br><span class=\"line\">                  &lt;&lt; president.country &lt;&lt; <span class=\"string\">\" in \"</span> &lt;&lt; president.year &lt;&lt; <span class=\"string\">\".\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (President <span class=\"keyword\">const</span>&amp; president: reElections) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; president.name &lt;&lt; <span class=\"string\">\" was re-elected president of \"</span></span><br><span class=\"line\">                  &lt;&lt; president.country &lt;&lt; <span class=\"string\">\" in \"</span> &lt;&lt; president.year &lt;&lt; <span class=\"string\">\".\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emplace_back:</span><br><span class=\"line\">I am being constructed.</span><br><span class=\"line\"> </span><br><span class=\"line\">push_back:</span><br><span class=\"line\">I am being constructed.</span><br><span class=\"line\">I am being moved.</span><br><span class=\"line\"> </span><br><span class=\"line\">Contents:</span><br><span class=\"line\">Nelson Mandela was elected president of South Africa in 1994.</span><br><span class=\"line\">Franklin Delano Roosevelt was re-elected president of the USA in 1936.</span><br></pre></td></tr></table></figure><h4 id=\"vectorget_allocator\"><a class=\"markdownIt-Anchor\" href=\"#vectorget_allocator\"></a> vector::get_allocator</h4><p>返回与vector关联的构造器对象的副本。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">allocator_type <span class=\"title\">get_allocator</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> * p;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// allocate an array with space for 5 elements using vector's allocator:</span></span><br><span class=\"line\">  p = myvector.get_allocator().allocate(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// construct values in-place on the array:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) myvector.get_allocator().construct(&amp;p[i],i);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The allocated array contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; p[i];</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// destroy and deallocate:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) myvector.get_allocator().destroy(&amp;p[i]);</span><br><span class=\"line\">  myvector.get_allocator().deallocate(p,<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The allocated array contains: 0 1 2 3 4</span><br></pre></td></tr></table></figure><p>注意：deallocate和destory的关系：</p><p>deallocate实现的源码：</p><pre><code>template &lt;class T&gt;\ninline void _deallocate(T* buffer)\n{\n\t::operator delete(buffer);    //为什么不用 delete [] ?  ,operator delete 区别于 delete \n\t                             //operator delete  是一个底层操作符\n}\n</code></pre><p>destory：</p><pre><code>template &lt;class T&gt;\ninline void _destory(T *ptr)\n{\n\tptr-&gt;~T();\n}\n</code></pre><p>destory负责调用类型的析构函数，销毁相应内存上的内容（但销毁后内存地址仍保留）</p><p>deallocate负责释放内存（此时相应内存中的值在此之前应调用destory销毁，将内存地址返回给系统，代表这部分地址使用引用-1）</p><h4 id=\"relational-operators-vector\"><a class=\"markdownIt-Anchor\" href=\"#relational-operators-vector\"></a> relational operators (vector)</h4><h4 id=\"swap-vector\"><a class=\"markdownIt-Anchor\" href=\"#swap-vector\"></a> swap (vector)</h4><h4 id=\"vector-bool\"><a class=\"markdownIt-Anchor\" href=\"#vector-bool\"></a> vector<bool></bool></h4><h3 id=\"deque\"><a class=\"markdownIt-Anchor\" href=\"#deque\"></a> deque</h3><p>deque（['dek]）（双端队列）是double-ended queue 的一个不规则缩写。deque是具有动态大小的序列容器，可以在两端（前端或后端）扩展或收缩。</p><p>特定的库可以以不同的方式实现deques，通常作为某种形式的动态数组。但是在任何情况下，它们都允许通过随机访问迭代器直接访问各个元素，通过根据需要扩展和收缩容器来自动处理存储。</p><p>因此，它们提供了类似于vector的功能，但是在序列的开始部分也可以高效地插入和删除元素，而不仅仅是在结尾。但是，与vector不同，deques并不保证将其所有元素存储在连续的存储位置：deque通过偏移指向另一个元素的指针访问元素会导致未定义的行为。</p><p>两个vector和deques提供了一个非常相似的接口，可以用于类似的目的，但内部工作方式完全不同：虽然vector使用单个数组需要偶尔重新分配以增长，但是deque的元素可以分散在不同的块的容器，容器在内部保存必要的信息以提供对其任何元素的持续时间和统一的顺序接口（通过迭代器）的直接访问。因此，deques在内部比vector更复杂一点，但是这使得他们在某些情况下更有效地增长，尤其是在重新分配变得更加昂贵的很长序列的情况下。</p><p>对于频繁插入或删除开始或结束位置以外的元素的操作，deques表现得更差，并且与列表和转发列表相比，迭代器和引用的一致性更低。</p><p>deque上常见操作的复杂性（效率）如下：</p><ul><li>随机访问 - 常数O(1)</li><li>在结尾或开头插入或移除元素 - 摊销不变O(1)</li><li>插入或移除元素 - 线性O(n)</li></ul><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Alloc</span> = <span class=\"title\">allocator</span>&lt;T&gt; &gt; <span class=\"title\">class</span> <span class=\"title\">deque</span>;</span></span><br></pre></td></tr></table></figure><p><img src=\"http://img.blog.csdn.net/20170727225856144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRlg2Nzc1ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br><img src=\"https://images0.cnblogs.com/blog/559453/201401/092150340824.png\" alt></p><h4 id=\"dequedeque\"><a class=\"markdownIt-Anchor\" href=\"#dequedeque\"></a> deque::deque</h4><p>构造一个deque容器对象，根据所使用的构造函数版本初始化它的内容：</p><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// constructors used in the same order as described above:</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; first;                                <span class=\"comment\">// empty deque of ints</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">second</span> <span class=\"params\">(<span class=\"number\">4</span>,<span class=\"number\">100</span>)</span></span>;                       <span class=\"comment\">// four ints with value 100</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">third</span> <span class=\"params\">(second.begin(),second.end())</span></span>;  <span class=\"comment\">// iterating through second</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">fourth</span> <span class=\"params\">(third)</span></span>;                       <span class=\"comment\">// a copy of third</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// the iterator constructor can be used to copy arrays:</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> myints[] = &#123;<span class=\"number\">16</span>,<span class=\"number\">2</span>,<span class=\"number\">77</span>,<span class=\"number\">29</span>&#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">fifth</span> <span class=\"params\">(myints, myints + <span class=\"keyword\">sizeof</span>(myints) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) )</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The contents of fifth are:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = fifth.begin(); it!=fifth.end(); ++it)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The contents of fifth are: 16 2 77 29</span><br></pre></td></tr></table></figure><h4 id=\"dequepush_back\"><a class=\"markdownIt-Anchor\" href=\"#dequepush_back\"></a> deque::push_back</h4><p>在当前的最后一个元素之后 ，在deque容器的末尾添加一个新元素。val的内容被复制（或移动）到新的元素。</p><p>这有效地增加了一个容器的大小。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_back</span> <span class=\"params\">(<span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_back</span> <span class=\"params\">(value_type&amp;&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; mydeque;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> myint;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Please enter some integers (enter 0 to end):\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span> &gt;&gt; myint;</span><br><span class=\"line\">    mydeque.push_back (myint);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (myint);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mydeque stores \"</span> &lt;&lt; (<span class=\"keyword\">int</span>) mydeque.size() &lt;&lt; <span class=\"string\">\" numbers.\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"dequepush_front\"><a class=\"markdownIt-Anchor\" href=\"#dequepush_front\"></a> deque::push_front</h4><p>在deque容器的开始位置插入一个新的元素，位于当前的第一个元素之前。val的内容被复制（或移动）到插入的元素。</p><p>这有效地增加了一个容器的大小。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_front</span> <span class=\"params\">(<span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_front</span> <span class=\"params\">(value_type&amp;&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">mydeque</span> <span class=\"params\">(<span class=\"number\">2</span>,<span class=\"number\">100</span>)</span></span>;     <span class=\"comment\">// two ints with a value of 100</span></span><br><span class=\"line\">  mydeque.push_front (<span class=\"number\">200</span>);</span><br><span class=\"line\">  mydeque.push_front (<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mydeque contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = mydeque.begin(); it != mydeque.end(); ++it)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">300 200 100 100</span><br></pre></td></tr></table></figure><h4 id=\"dequepop_back\"><a class=\"markdownIt-Anchor\" href=\"#dequepop_back\"></a> deque::pop_back</h4><p>删除deque容器中的最后一个元素，有效地将容器大小减少一个。</p><p>这破坏了被删除的元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; mydeque;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span> <span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">  mydeque.push_back (<span class=\"number\">10</span>);</span><br><span class=\"line\">  mydeque.push_back (<span class=\"number\">20</span>);</span><br><span class=\"line\">  mydeque.push_back (<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!mydeque.empty())</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sum+=mydeque.back();</span><br><span class=\"line\">    mydeque.pop_back();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The elements of mydeque add up to \"</span> &lt;&lt; sum &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The elements of mydeque add up to 60</span><br></pre></td></tr></table></figure><h4 id=\"dequepop_front\"><a class=\"markdownIt-Anchor\" href=\"#dequepop_front\"></a> deque::pop_front</h4><p>删除deque容器中的第一个元素，有效地减小其大小。</p><p>这破坏了被删除的元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop_front</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; mydeque;</span><br><span class=\"line\"></span><br><span class=\"line\">  mydeque.push_back (<span class=\"number\">100</span>);</span><br><span class=\"line\">  mydeque.push_back (<span class=\"number\">200</span>);</span><br><span class=\"line\">  mydeque.push_back (<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Popping out the elements in mydeque:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!mydeque.empty())</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; mydeque.front();</span><br><span class=\"line\">    mydeque.pop_front();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\nThe final size of mydeque is \"</span> &lt;&lt; <span class=\"keyword\">int</span>(mydeque.size()) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Popping out the elements in mydeque: 100 200 300</span><br><span class=\"line\">The final size of mydeque is 0</span><br></pre></td></tr></table></figure><h4 id=\"dequeemplace_front\"><a class=\"markdownIt-Anchor\" href=\"#dequeemplace_front\"></a> deque::emplace_front</h4><p>在deque的开头插入一个新的元素，就在其当前的第一个元素之前。这个新的元素是用args作为构建的参数来构建的。</p><p>这有效地增加了一个容器的大小。</p><p>该元素是通过调用allocator_traits::construct来转换args来创建的。</p><p>存在一个类似的成员函数push_front，它可以将现有对象复制或移动到容器中。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">emplace_front</span> (<span class=\"title\">Args</span>&amp;&amp;... <span class=\"title\">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; mydeque = &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  mydeque.emplace_front (<span class=\"number\">111</span>);</span><br><span class=\"line\">  mydeque.emplace_front (<span class=\"number\">222</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mydeque contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; x: mydeque)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mydeque contains: 222 111 10 20 30</span><br></pre></td></tr></table></figure><h4 id=\"dequeemplace_back\"><a class=\"markdownIt-Anchor\" href=\"#dequeemplace_back\"></a> deque::emplace_back</h4><p>在deque的末尾插入一个新的元素，紧跟在当前的最后一个元素之后。这个新的元素是用args作为构建的参数来构建的。</p><p>这有效地增加了一个容器的大小。</p><p>该元素是通过调用allocator_traits::construct来转换args来创建的。</p><p>存在一个类似的成员函数push_back，它可以将现有对象复制或移动到容器中</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">emplace_back</span> (<span class=\"title\">Args</span>&amp;&amp;... <span class=\"title\">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; mydeque = &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  mydeque.emplace_back (<span class=\"number\">100</span>);</span><br><span class=\"line\">  mydeque.emplace_back (<span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mydeque contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; x: mydeque)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mydeque contains: 10 20 30 100 200</span><br></pre></td></tr></table></figure><h3 id=\"forward_list\"><a class=\"markdownIt-Anchor\" href=\"#forward_list\"></a> forward_list</h3><p>forward_list（单向链表）是序列容器，允许在序列中的任何地方进行恒定的时间插入和擦除操作。</p><p>forward_list（单向链表）被实现为单链表; 单链表可以将它们包含的每个元素存储在不同和不相关的存储位置中。通过关联到序列中下一个元素的链接的每个元素来保留排序。forward_list容器和列表</p><p>之间的主要设计区别容器是第一个内部只保留一个到下一个元素的链接，而后者每个元素保留两个链接：一个指向下一个元素，一个指向前一个元素，允许在两个方向上有效的迭代，但是每个元素消耗额外的存储空间并且插入和移除元件的时间开销略高。因此，forward_list对象比列表对象更有效率，尽管它们只能向前迭代。</p><p>与其他基本的标准序列容器（array，vector和deque），forward_list通常在插入，提取和移动容器内任何位置的元素方面效果更好，因此也适用于密集使用这些元素的算法，如排序算法。</p><p>的主要缺点修饰符Modifiers S和列表相比这些其它序列容器s是说，他们缺乏可以通过位置的元素的直接访问; 例如，要访问forward_list中的第六个元素，必须从开始位置迭代到该位置，这需要在这些位置之间的线性时间。它们还消耗一些额外的内存来保持与每个元素相关联的链接信息（这可能是大型小元素列表的重要因素）。</p><p>该修饰符Modifiersclass模板的设计考虑到效率：按照设计，它与简单的手写C型单链表一样高效，实际上是唯一的标准容器，为了效率的考虑故意缺少尺寸成员函数：由于其性质作为一个链表，具有一个需要一定时间的大小的成员将需要它保持一个内部计数器的大小（如列表所示）。这会消耗一些额外的存储空间，并使插入和删除操作效率稍低。要获取forward_list对象的大小，可以使用距离算法的开始和结束，这是一个需要线性时间的操作。</p><p><img src=\"http://img.blog.csdn.net/20160407212133266\" alt></p><h4 id=\"forward_listforward_list\"><a class=\"markdownIt-Anchor\" href=\"#forward_listforward_list\"></a> forward_list::forward_list</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span> (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">forward_list</span> <span class=\"params\">(<span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class=\"line\">fill (<span class=\"number\">2</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">forward_list</span> <span class=\"params\">(size_type n)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">forward_list</span> <span class=\"params\">(size_type n, <span class=\"keyword\">const</span> value_type&amp; val,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class=\"line\">range (<span class=\"number\">3</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputIterator</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">forward_list</span> (<span class=\"title\">InputIterator</span> <span class=\"title\">first</span>, <span class=\"title\">InputIterator</span> <span class=\"title\">last</span>,</span></span><br><span class=\"line\"><span class=\"class\">                <span class=\"title\">const</span> <span class=\"title\">allocator_type</span>&amp; <span class=\"title\">alloc</span> = <span class=\"title\">allocator_type</span>());</span></span><br><span class=\"line\">copy (<span class=\"number\">4</span>)\t</span><br><span class=\"line\">forward_list (<span class=\"keyword\">const</span> forward_list&amp; fwdlst);</span><br><span class=\"line\">forward_list (<span class=\"keyword\">const</span> forward_list&amp; fwdlst, <span class=\"keyword\">const</span> allocator_type&amp; alloc);</span><br><span class=\"line\">move (<span class=\"number\">5</span>)\t</span><br><span class=\"line\">forward_list (forward_list&amp;&amp; fwdlst);</span><br><span class=\"line\">forward_list (forward_list&amp;&amp; fwdlst, <span class=\"keyword\">const</span> allocator_type&amp; alloc);</span><br><span class=\"line\"><span class=\"function\">initializer <span class=\"title\">list</span> <span class=\"params\">(<span class=\"number\">6</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">forward_list</span> <span class=\"params\">(<span class=\"built_in\">initializer_list</span>&lt;value_type&gt; il,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              <span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;forward_list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// constructors used in the same order as described above:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; first;                      <span class=\"comment\">// default: empty</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">second</span> <span class=\"params\">(<span class=\"number\">3</span>,<span class=\"number\">77</span>)</span></span>;              <span class=\"comment\">// fill: 3 seventy-sevens</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">third</span> <span class=\"params\">(second.begin(), second.end())</span></span>; <span class=\"comment\">// range initialization</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">fourth</span> <span class=\"params\">(third)</span></span>;            <span class=\"comment\">// copy constructor</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">fifth</span> <span class=\"params\">(<span class=\"built_in\">std</span>::move(fourth))</span></span>;  <span class=\"comment\">// move ctor. (fourth wasted)</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; sixth = &#123;<span class=\"number\">3</span>, <span class=\"number\">52</span>, <span class=\"number\">25</span>, <span class=\"number\">90</span>&#125;;    <span class=\"comment\">// initializer_list constructor</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"first:\"</span> ; <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x: first)  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"second:\"</span>; <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x: second) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"third:\"</span>;  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x: third)  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"fourth:\"</span>; <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x: fourth) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"fifth:\"</span>;  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x: fifth)  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sixth:\"</span>;  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x: sixth)  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Possible output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forward_list constructor examples:</span><br><span class=\"line\">first:</span><br><span class=\"line\">second: 77 77 77</span><br><span class=\"line\">third: 77 77 77</span><br><span class=\"line\">fourth:</span><br><span class=\"line\">fifth: 77 77 77</span><br><span class=\"line\">sixth: 3 52 25 90</span><br></pre></td></tr></table></figure><h4 id=\"forward_list~forward_list\"><a class=\"markdownIt-Anchor\" href=\"#forward_list~forward_list\"></a> forward_list::~forward_list</h4><h4 id=\"forward_listbefore_begin\"><a class=\"markdownIt-Anchor\" href=\"#forward_listbefore_begin\"></a> forward_list::before_begin</h4><p>返回指向容器中第一个元素之前的位置的迭代器。</p><p>返回的迭代器不应被解除引用：它是为了用作成员函数的参数emplace_after，insert_after，erase_after或splice_after，指定序列，其中执行该动作的位置的开始位置。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">before_begin</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">before_begin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;forward_list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; mylist = &#123;<span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  mylist.insert_after ( mylist.before_begin(), <span class=\"number\">11</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mylist contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span>&amp; x: mylist ) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mylist contains: 11 20 30 40 50</span><br></pre></td></tr></table></figure><h4 id=\"forward_listcbefore_begin\"><a class=\"markdownIt-Anchor\" href=\"#forward_listcbefore_begin\"></a> forward_list::cbefore_begin</h4><p>返回指向容器中第一个元素之前的位置的const_iterator。</p><p>一个常量性是指向常量内容的迭代器。这个迭代器可以增加和减少（除非它本身也是const），就像forward_list::before_begin返回的迭代器一样，但不能用来修改它指向的内容。</p><p>返回的价值不得解除引用。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">cbefore_begin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;forward_list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; mylist = &#123;<span class=\"number\">77</span>, <span class=\"number\">2</span>, <span class=\"number\">16</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  mylist.insert_after ( mylist.cbefore_begin(), <span class=\"number\">19</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mylist contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span>&amp; x: mylist ) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mylist contains: 19 77 2 16</span><br></pre></td></tr></table></figure><h3 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\"></a> list</h3><h3 id=\"stack\"><a class=\"markdownIt-Anchor\" href=\"#stack\"></a> stack</h3><h3 id=\"queue\"><a class=\"markdownIt-Anchor\" href=\"#queue\"></a> queue</h3><h3 id=\"priority_queue\"><a class=\"markdownIt-Anchor\" href=\"#priority_queue\"></a> priority_queue</h3><h3 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\"></a> set</h3><h3 id=\"multiset\"><a class=\"markdownIt-Anchor\" href=\"#multiset\"></a> multiset</h3><h3 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\"></a> map</h3><p>map 是关联容器，按照特定顺序存储由 key value (键值) 和 mapped value (映射值) 组合形成的元素。</p><p>在映射中，键值通常用于对元素进行排序和唯一标识，而映射的值存储与此键关联的内容。该类型的键和映射的值可能不同，并且在部件类型被分组在一起VALUE_TYPE，这是一种对类型结合两种：</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">const</span> Key, T&gt; value_type;</span><br></pre></td></tr></table></figure><p>在内部，映射中的元素总是按照由其内部比较对象（比较类型）指示的特定的严格弱排序标准按键排序。映射容器通常比unordered_map容器慢，以通过它们的键来访问各个元素，但是它们允许基于它们的顺序对子集进行直接迭代。 在该映射值地图可以直接通过使用其相应的键来访问括号运算符（（操作符[] ）。 映射通常如实施</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Key</span>,                                     // <span class=\"title\">map</span>:</span>:key_type</span><br><span class=\"line\">           <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>,                                       // <span class=\"title\">map</span>:</span>:mapped_type</span><br><span class=\"line\">           <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Compare</span> = <span class=\"title\">less</span>&lt;Key&gt;,                     // <span class=\"title\">map</span>:</span>:key_compare</span><br><span class=\"line\">           <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span> = <span class=\"title\">allocator</span>&lt;pair&lt;const Key,T&gt; &gt;    // <span class=\"title\">map</span>:</span>:allocator_type</span><br><span class=\"line\">           &gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">map</span>;</span></span><br></pre></td></tr></table></figure><h4 id=\"mapmap\"><a class=\"markdownIt-Anchor\" href=\"#mapmap\"></a> map::map</h4><p>构造一个映射容器对象，根据所使用的构造器版本初始化其内容：</p><p>（1）空容器构造函数（默认构造函数）</p><p>构造一个空的容器，没有元素。</p><p>（2）范围构造函数</p><p>构造具有一样多的元素的范围内的容器[第一，最后一个），其中每个元件布设构造的从在该范围内它的相应的元件。</p><p>（3）复制构造函数（并用分配器复制）</p><p>使用x中的每个元素的副本构造一个容器。</p><p>（4）移动构造函数（并与分配器一起移动）</p><p>构造一个获取x元素的容器。<br>如果指定了alloc并且与x的分配器不同，那么元素将被移动。否则，没有构建元素（他们的所有权直接转移）。<br>x保持未指定但有效的状态。</p><p>（5）初始化列表构造函数</p><p>用il中的每个元素的副本构造一个容器。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">empty (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">map</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_compare&amp; comp = key_compare(),</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              <span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">map</span> <span class=\"params\">(<span class=\"keyword\">const</span> allocator_type&amp; alloc)</span></span>;</span><br><span class=\"line\">range (<span class=\"number\">2</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputIterator</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">map</span> (<span class=\"title\">InputIterator</span> <span class=\"title\">first</span>, <span class=\"title\">InputIterator</span> <span class=\"title\">last</span>,</span></span><br><span class=\"line\"><span class=\"class\">       <span class=\"title\">const</span> <span class=\"title\">key_compare</span>&amp; <span class=\"title\">comp</span> = <span class=\"title\">key_compare</span>(),</span></span><br><span class=\"line\"><span class=\"class\">       <span class=\"title\">const</span> <span class=\"title\">allocator_type</span>&amp; = <span class=\"title\">allocator_type</span>());</span></span><br><span class=\"line\">copy (<span class=\"number\">3</span>)\t</span><br><span class=\"line\"><span class=\"built_in\">map</span> (<span class=\"keyword\">const</span> <span class=\"built_in\">map</span>&amp; x);</span><br><span class=\"line\"><span class=\"built_in\">map</span> (<span class=\"keyword\">const</span> <span class=\"built_in\">map</span>&amp; x, <span class=\"keyword\">const</span> allocator_type&amp; alloc);</span><br><span class=\"line\">move (<span class=\"number\">4</span>)\t</span><br><span class=\"line\"><span class=\"built_in\">map</span> (<span class=\"built_in\">map</span>&amp;&amp; x);</span><br><span class=\"line\"><span class=\"built_in\">map</span> (<span class=\"built_in\">map</span>&amp;&amp; x, <span class=\"keyword\">const</span> allocator_type&amp; alloc);</span><br><span class=\"line\"><span class=\"function\">initializer <span class=\"title\">list</span> <span class=\"params\">(<span class=\"number\">5</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">map</span> <span class=\"params\">(<span class=\"built_in\">initializer_list</span>&lt;value_type&gt; il,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">     <span class=\"keyword\">const</span> key_compare&amp; comp = key_compare(),</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">     <span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">fncomp</span> <span class=\"params\">(<span class=\"keyword\">char</span> lhs, <span class=\"keyword\">char</span> rhs)</span> </span>&#123;<span class=\"keyword\">return</span> lhs&lt;rhs;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">classcomp</span> &#123;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>&amp; lhs, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>&amp; rhs)</span> <span class=\"keyword\">const</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;<span class=\"keyword\">return</span> lhs&lt;rhs;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; first;</span><br><span class=\"line\"></span><br><span class=\"line\">  first[<span class=\"string\">'a'</span>]=<span class=\"number\">10</span>;</span><br><span class=\"line\">  first[<span class=\"string\">'b'</span>]=<span class=\"number\">30</span>;</span><br><span class=\"line\">  first[<span class=\"string\">'c'</span>]=<span class=\"number\">50</span>;</span><br><span class=\"line\">  first[<span class=\"string\">'d'</span>]=<span class=\"number\">70</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::map&lt;char,int&gt; second (first.begin(),first.end());</span><br><span class=\"line\"></span><br><span class=\"line\">  std::map&lt;char,int&gt; third (second);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>,classcomp&gt; fourth;                 <span class=\"comment\">// class as Compare</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">bool</span>(*fn_pt)(<span class=\"keyword\">char</span>,<span class=\"keyword\">char</span>) = fncomp;</span><br><span class=\"line\">  std::map&lt;char,int,bool(*)(char,char)&gt; fifth (fn_pt); // function pointer as Compare</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"mapbegin\"><a class=\"markdownIt-Anchor\" href=\"#mapbegin\"></a> map::begin</h4><p>返回引用map容器中第一个元素的迭代器。</p><p>由于map容器始终保持其元素的顺序，所以开始指向遵循容器排序标准的元素。</p><p>如果容器是空的，则返回的迭代器值不应被解除引用。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'b'</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'a'</span>] = <span class=\"number\">200</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'c'</span>] = <span class=\"number\">300</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// show content:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D;&gt; 200</span><br><span class=\"line\">b &#x3D;&gt; 100</span><br><span class=\"line\">c &#x3D;&gt; 300</span><br></pre></td></tr></table></figure><h4 id=\"mapkey_comp\"><a class=\"markdownIt-Anchor\" href=\"#mapkey_comp\"></a> map::key_comp</h4><p>返回容器用于比较键的比较对象的副本。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">key_compare <span class=\"title\">key_comp</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::key_compare mycomp = mymap.key_comp();</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'a'</span>]=<span class=\"number\">100</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'b'</span>]=<span class=\"number\">200</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'c'</span>]=<span class=\"number\">300</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mymap contains:\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">char</span> highest = mymap.rbegin()-&gt;first;     <span class=\"comment\">// key value of last element</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator it = mymap.begin();</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> ( mycomp((*it++).first, highest) );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mymap contains:</span><br><span class=\"line\">a &#x3D;&gt; 100</span><br><span class=\"line\">b &#x3D;&gt; 200</span><br><span class=\"line\">c &#x3D;&gt; 300</span><br></pre></td></tr></table></figure><h4 id=\"mapvalue_comp\"><a class=\"markdownIt-Anchor\" href=\"#mapvalue_comp\"></a> map::value_comp</h4><p>返回可用于比较两个元素的比较对象，以获取第一个元素的键是否在第二个元素之前。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">value_compare <span class=\"title\">value_comp</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'x'</span>]=<span class=\"number\">1001</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'y'</span>]=<span class=\"number\">2002</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'z'</span>]=<span class=\"number\">3003</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mymap contains:\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; highest = *mymap.rbegin();          <span class=\"comment\">// last element</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator it = mymap.begin();</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> ( mymap.value_comp()(*it++, highest) );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mymap contains:</span><br><span class=\"line\">x &#x3D;&gt; 1001</span><br><span class=\"line\">y &#x3D;&gt; 2002</span><br><span class=\"line\">z &#x3D;&gt; 3003</span><br></pre></td></tr></table></figure><h4 id=\"mapfind\"><a class=\"markdownIt-Anchor\" href=\"#mapfind\"></a> map::find</h4><p>在容器中搜索具有等于k的键的元素，如果找到则返回一个迭代器，否则返回map::end的迭代器。</p><p>如果容器的比较对象自反地返回假（即，不管元素作为参数传递的顺序），则两个key被认为是等同的。</p><p>另一个成员函数map::count可以用来检查一个特定的键是否存在。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">find</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">find</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator it;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'a'</span>]=<span class=\"number\">50</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'b'</span>]=<span class=\"number\">100</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'c'</span>]=<span class=\"number\">150</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'d'</span>]=<span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  it = mymap.find(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (it != mymap.end())</span><br><span class=\"line\">    mymap.erase (it);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// print content:</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"elements in mymap:\"</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a =&gt; \"</span> &lt;&lt; mymap.find(<span class=\"string\">'a'</span>)-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"c =&gt; \"</span> &lt;&lt; mymap.find(<span class=\"string\">'c'</span>)-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"d =&gt; \"</span> &lt;&lt; mymap.find(<span class=\"string\">'d'</span>)-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elements in mymap:</span><br><span class=\"line\">a &#x3D;&gt; 50</span><br><span class=\"line\">c &#x3D;&gt; 150</span><br><span class=\"line\">d &#x3D;&gt; 200</span><br></pre></td></tr></table></figure><h4 id=\"mapcount\"><a class=\"markdownIt-Anchor\" href=\"#mapcount\"></a> map::count</h4><p>在容器中搜索具有等于k的键的元素，并返回匹配的数量。</p><p>由于地图容器中的所有元素都是唯一的，因此该函数只能返回1（如果找到该元素）或返回零（否则）。</p><p>如果容器的比较对象自反地返回错误（即，不管按键作为参数传递的顺序），则两个键被认为是等同的。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">size_type <span class=\"title\">count</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> c;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap [<span class=\"string\">'a'</span>]=<span class=\"number\">101</span>;</span><br><span class=\"line\">  mymap [<span class=\"string\">'c'</span>]=<span class=\"number\">202</span>;</span><br><span class=\"line\">  mymap [<span class=\"string\">'f'</span>]=<span class=\"number\">303</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (c=<span class=\"string\">'a'</span>; c&lt;<span class=\"string\">'h'</span>; c++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; c;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mymap.count(c)&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" is an element of mymap.\\n\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" is not an element of mymap.\\n\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a is an element of mymap.</span><br><span class=\"line\">b is not an element of mymap.</span><br><span class=\"line\">c is an element of mymap.</span><br><span class=\"line\">d is not an element of mymap.</span><br><span class=\"line\">e is not an element of mymap.</span><br><span class=\"line\">f is an element of mymap.</span><br><span class=\"line\">g is not an element of mymap.</span><br></pre></td></tr></table></figure><h4 id=\"maplower_bound\"><a class=\"markdownIt-Anchor\" href=\"#maplower_bound\"></a> map::lower_bound</h4><p>将迭代器返回到下限</p><p>返回指向容器中第一个元素的迭代器，该元素的键不会在k之前出现（即，它是等价的或者在其后）。</p><p>该函数使用其内部比较对象（key_comp）来确定这一点，将迭代器返回到key_comp（element_key，k）将返回false的第一个元素。</p><p>如果map类用默认的比较类型（less）实例化，则函数返回一个迭代器到第一个元素，其键不小于k。</p><p>一个类似的成员函数upper_bound具有相同的行为lower_bound，除非映射包含一个key值等于k的元素：在这种情况下，lower_bound返回指向该元素的迭代器，而upper_bound返回指向下一个元素的迭代器。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">lower_bound</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">lower_bound</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator itlow,itup;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'a'</span>]=<span class=\"number\">20</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'b'</span>]=<span class=\"number\">40</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'c'</span>]=<span class=\"number\">60</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'d'</span>]=<span class=\"number\">80</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'e'</span>]=<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  itlow=mymap.lower_bound (<span class=\"string\">'b'</span>);  <span class=\"comment\">// itlow points to b</span></span><br><span class=\"line\">  itup=mymap.upper_bound (<span class=\"string\">'d'</span>);   <span class=\"comment\">// itup points to e (not d!)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  mymap.erase(itlow,itup);        <span class=\"comment\">// erases [itlow,itup)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// print content:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D;&gt; 20</span><br><span class=\"line\">e &#x3D;&gt; 100</span><br></pre></td></tr></table></figure><h4 id=\"mapupper_bound\"><a class=\"markdownIt-Anchor\" href=\"#mapupper_bound\"></a> map::upper_bound</h4><p>将迭代器返回到上限</p><p>返回一个指向容器中第一个元素的迭代器，它的关键字被认为是在k之后。</p><p>该函数使用其内部比较对象（key_comp）来确定这一点，将迭代器返回到key_comp（k，element_key）将返回true的第一个元素。</p><p>如果map类用默认的比较类型（less）实例化，则函数返回一个迭代器到第一个元素，其键大于k。</p><p>类似的成员函数lower_bound具有与upper_bound相同的行为，除了map包含一个元素，其键值等于k：在这种情况下，lower_bound返回指向该元素的迭代器，而upper_bound返回指向下一个元素的迭代器。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">upper_bound</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">upper_bound</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator itlow,itup;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'a'</span>]=<span class=\"number\">20</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'b'</span>]=<span class=\"number\">40</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'c'</span>]=<span class=\"number\">60</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'d'</span>]=<span class=\"number\">80</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'e'</span>]=<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  itlow=mymap.lower_bound (<span class=\"string\">'b'</span>);  <span class=\"comment\">// itlow points to b</span></span><br><span class=\"line\">  itup=mymap.upper_bound (<span class=\"string\">'d'</span>);   <span class=\"comment\">// itup points to e (not d!)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  mymap.erase(itlow,itup);        <span class=\"comment\">// erases [itlow,itup)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// print content:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D;&gt; 20</span><br><span class=\"line\">e &#x3D;&gt; 100</span><br></pre></td></tr></table></figure><h4 id=\"mapequal_range\"><a class=\"markdownIt-Anchor\" href=\"#mapequal_range\"></a> map::equal_range</h4><p>获取相同元素的范围</p><p>返回包含容器中所有具有与k等价的键的元素的范围边界。 由于地图容器中的元素具有唯一键，所以返回的范围最多只包含一个元素。</p><p>如果没有找到匹配，则返回的范围具有零的长度，与两个迭代器指向具有考虑去后一个密钥对所述第一元件ķ根据容器的内部比较对象（key_comp）。如果容器的比较对象返回false，则两个键被认为是等价的。</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pair&lt;const_iterator,const_iterator&gt; equal_range (const key_type&amp; k) const;</span><br><span class=\"line\">pair&lt;iterator,iterator&gt;             equal_range (const key_type&amp; k);</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'a'</span>]=<span class=\"number\">10</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'b'</span>]=<span class=\"number\">20</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'c'</span>]=<span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::pair&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator,<span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator&gt; ret;</span><br><span class=\"line\">  ret = mymap.equal_range(<span class=\"string\">'b'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"lower bound points to: \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; ret.first-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; ret.first-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"upper bound points to: \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; ret.second-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; ret.second-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lower bound points to: &#39;b&#39; &#x3D;&gt; 20</span><br><span class=\"line\">upper bound points to: &#39;c&#39; &#x3D;&gt; 30</span><br></pre></td></tr></table></figure><h3 id=\"multimap\"><a class=\"markdownIt-Anchor\" href=\"#multimap\"></a> multimap</h3><h3 id=\"无序容器unordered-containerunordered_set-unordered_multiset-unordered_map-unordered_multimap\"><a class=\"markdownIt-Anchor\" href=\"#无序容器unordered-containerunordered_set-unordered_multiset-unordered_map-unordered_multimap\"></a> 无序容器（Unordered Container）：unordered_set、unordered_multiset、unordered_map、unordered_multimap</h3><p>包括：</p><ul><li>unordered_set</li><li>unordered_multiset</li><li>unordered_map</li><li>unordered_multimap</li></ul><p>都是以哈希表实现的。</p><p><img src=\"http://img.blog.csdn.net/20160410123436394\" alt></p><p>unordered_set、unodered_multiset结构：</p><p><img src=\"http://img.blog.csdn.net/20160410123518692\" alt></p><p>unordered_map、unodered_multimap结构：</p><p><img src=\"http://img.blog.csdn.net/20160410123525739\" alt></p><h3 id=\"unordered_set\"><a class=\"markdownIt-Anchor\" href=\"#unordered_set\"></a> unordered_set</h3><h3 id=\"unordered_multiset\"><a class=\"markdownIt-Anchor\" href=\"#unordered_multiset\"></a> unordered_multiset</h3><h3 id=\"unordered_map\"><a class=\"markdownIt-Anchor\" href=\"#unordered_map\"></a> unordered_map</h3><h3 id=\"unordered_multimap\"><a class=\"markdownIt-Anchor\" href=\"#unordered_multimap\"></a> unordered_multimap</h3><h3 id=\"tuple\"><a class=\"markdownIt-Anchor\" href=\"#tuple\"></a> tuple</h3><p>元组是一个能够容纳元素集合的对象。每个元素可以是不同的类型。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Types</span>&gt; <span class=\"title\">class</span> <span class=\"title\">tuple</span>;</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;     // std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tuple&gt;        // std::tuple, std::get, std::tie, std::ignore</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  std::tuple&lt;int,char&gt; foo (10,'x');</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> bar = <span class=\"built_in\">std</span>::make_tuple (<span class=\"string\">\"test\"</span>, <span class=\"number\">3.1</span>, <span class=\"number\">14</span>, <span class=\"string\">'y'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">2</span>&gt;(bar) = <span class=\"number\">100</span>;                                    <span class=\"comment\">// access element</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> myint; <span class=\"keyword\">char</span> mychar;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::tie (myint, mychar) = foo;                            <span class=\"comment\">// unpack elements</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::tie (<span class=\"built_in\">std</span>::ignore, <span class=\"built_in\">std</span>::ignore, myint, mychar) = bar;  <span class=\"comment\">// unpack (with ignore)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  mychar = <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">3</span>&gt;(bar);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(foo) = <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">2</span>&gt;(bar);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">1</span>&gt;(foo) = mychar;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"foo contains: \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(foo) &lt;&lt; <span class=\"string\">' '</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">1</span>&gt;(foo) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo contains: 100 y</span><br></pre></td></tr></table></figure><h4 id=\"tupletuple\"><a class=\"markdownIt-Anchor\" href=\"#tupletuple\"></a> tuple::tuple</h4><p>构建一个 tuple（元组）对象。</p><p>这涉及单独构建其元素，初始化取决于调用的构造函数形式：</p><p>（1）默认的构造函数</p><p>构建一个 元组对象的元素值初始化。</p><p>（2）复制/移动构造函数</p><p>该对象使用tpl的内容进行初始化 元组目的。tpl<br>的相应元素被传递给每个元素的构造函数。</p><p>（3）隐式转换构造函数</p><p>同上。tpl中的<br>所有类型都可以隐含地转换为构造中它们各自元素的类型元组 目的。</p><p>（4）初始化构造函数<br>用elems中的相应元素初始化每个元素。elems<br>的相应元素被传递给每个元素的构造函数。</p><p>（5）对转换构造函数</p><p>该对象有两个对应于pr.first和的元素pr.second。PR中的所有类型都应该隐含地转换为其中各自元素的类型元组 目的。</p><p>（6）分配器版本</p><p>和上面的版本一样，除了每个元素都是使用allocator alloc构造的。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span> (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"title\">tuple</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">copy / move (<span class=\"number\">2</span>)\t</span><br><span class=\"line\">tuple (<span class=\"keyword\">const</span> tuple&amp; tpl) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">tuple (tuple&amp;&amp; tpl) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"><span class=\"function\">implicit <span class=\"title\">conversion</span> <span class=\"params\">(<span class=\"number\">3</span>)</span>\t</span></span><br><span class=\"line\">template &lt;class... UTypes&gt;</span><br><span class=\"line\">  tuple (<span class=\"keyword\">const</span> tuple&lt;UTypes...&gt;&amp; tpl);</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">UTypes</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">tuple</span>&lt;UTypes...&gt;&amp;&amp; <span class=\"title\">tpl</span>);</span></span><br><span class=\"line\">initialization (<span class=\"number\">4</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">tuple</span> <span class=\"params\">(<span class=\"keyword\">const</span> Types&amp;... elems)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">UTypes</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">explicit</span> <span class=\"title\">tuple</span> (<span class=\"title\">UTypes</span>&amp;&amp;... <span class=\"title\">elems</span>);</span></span><br><span class=\"line\"><span class=\"function\">conversion from <span class=\"title\">pair</span> <span class=\"params\">(<span class=\"number\">5</span>)</span>\t</span></span><br><span class=\"line\">template &lt;class U1, class U2&gt;</span><br><span class=\"line\">  tuple (<span class=\"keyword\">const</span> pair&lt;U1,U2&gt;&amp; pr);</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">U1</span>, <span class=\"title\">class</span> <span class=\"title\">U2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">pair</span>&lt;U1,U2&gt;&amp;&amp; <span class=\"title\">pr</span>);</span></span><br><span class=\"line\">allocator (<span class=\"number\">6</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">const</span> <span class=\"title\">tuple</span>&amp; <span class=\"title\">tpl</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">tuple</span>&amp;&amp; <span class=\"title\">tpl</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>,<span class=\"title\">class</span>... <span class=\"title\">UTypes</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">const</span> <span class=\"title\">tuple</span>&lt;UTypes...&gt;&amp; <span class=\"title\">tpl</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>, <span class=\"title\">class</span>... <span class=\"title\">UTypes</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">tuple</span>&lt;UTypes...&gt;&amp;&amp; <span class=\"title\">tpl</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">const</span> <span class=\"title\">Types</span>&amp;... <span class=\"title\">elems</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>, <span class=\"title\">class</span>... <span class=\"title\">UTypes</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">UTypes</span>&amp;&amp;... <span class=\"title\">elems</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>, <span class=\"title\">class</span> <span class=\"title\">U1</span>, <span class=\"title\">class</span> <span class=\"title\">U2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">const</span> <span class=\"title\">pair</span>&lt;U1,U2&gt;&amp; <span class=\"title\">pr</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>, <span class=\"title\">class</span> <span class=\"title\">U1</span>, <span class=\"title\">class</span> <span class=\"title\">U2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">pair</span>&lt;U1,U2&gt;&amp;&amp; <span class=\"title\">pr</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;     // std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;utility&gt;      // std::make_pair</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tuple&gt;        // std::tuple, std::make_tuple, std::get</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::tuple&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">char</span>&gt; first;                             <span class=\"comment\">// default</span></span><br><span class=\"line\">  std::tuple&lt;int,char&gt; second (first);                    // copy</span><br><span class=\"line\">  std::tuple&lt;int,char&gt; third (std::make_tuple(20,'b'));   // move</span><br><span class=\"line\">  std::tuple&lt;long,char&gt; fourth (third);                   // implicit conversion</span><br><span class=\"line\">  std::tuple&lt;int,char&gt; fifth (10,'a');                    // initialization</span><br><span class=\"line\">  std::tuple&lt;int,char&gt; sixth (std::make_pair(30,'c'));    // from pair / move</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sixth contains: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(sixth);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" and \"</span> &lt;&lt; <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">1</span>&gt;(sixth) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sixth contains: 30 and c</span><br></pre></td></tr></table></figure><h3 id=\"pair\"><a class=\"markdownIt-Anchor\" href=\"#pair\"></a> pair</h3><p>这个类把一对值（values）结合在一起，这些值可能是不同的类型（T1 和 T2）。每个值可以被公有的成员变量first、second访问。</p><p>pair是tuple（元组）的一个特例。</p><p>pair的实现是一个结构体，主要的两个成员变量是first second 因为是使用struct不是class，所以可以直接使用pair的成员变量。</p><p>应用：</p><ul><li>可以将两个类型数据组合成一个如map&lt;key, value&gt;</li><li>当某个函数需要两个返回值时</li></ul><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt; <span class=\"title\">struct</span> <span class=\"title\">pair</span>;</span></span><br></pre></td></tr></table></figure><h4 id=\"pairpair\"><a class=\"markdownIt-Anchor\" href=\"#pairpair\"></a> pair::pair</h4><p>构建一个pair对象。</p><p>这涉及到单独构建它的两个组件对象，初始化依赖于调用的构造器形式：</p><p>（1）默认的构造函数</p><p>构建一个 对对象的元素值初始化。</p><p>（2）复制/移动构造函数（和隐式转换）</p><p>该对象被初始化为pr的内容 对目的。pr<br>的相应成员被传递给每个成员的构造函数。</p><p>（3）初始化构造函数</p><p>会员 第一是由一个和成员构建的第二与b。</p><p>（4）分段构造</p><p>构造成员 first 和 second 到位，传递元素first_args 作为参数的构造函数 first，和元素 second_args 到的构造函数 second 。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span> (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"title\">pair</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">copy / move (<span class=\"number\">2</span>)\t</span><br><span class=\"line\">template&lt;class U, class V&gt; pair (const pair&lt;U,V&gt;&amp; pr);</span><br><span class=\"line\">template&lt;class U, class V&gt; pair (pair&lt;U,V&gt;&amp;&amp; pr);</span><br><span class=\"line\">pair (<span class=\"keyword\">const</span> pair&amp; pr) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">pair (pair&amp;&amp; pr) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">initialization (<span class=\"number\">3</span>)\t</span><br><span class=\"line\">pair (<span class=\"keyword\">const</span> first_type&amp; a, <span class=\"keyword\">const</span> second_type&amp; b);</span><br><span class=\"line\">template&lt;class U, class V&gt; pair (U&amp;&amp; a, V&amp;&amp; b);</span><br><span class=\"line\">piecewise (<span class=\"number\">4</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args1</span>, <span class=\"title\">class</span>... <span class=\"title\">Args2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">pair</span> (<span class=\"title\">piecewise_construct_t</span> <span class=\"title\">pwc</span>, <span class=\"title\">tuple</span>&lt;Args1...&gt; <span class=\"title\">first_args</span>,</span></span><br><span class=\"line\"><span class=\"class\">                                   <span class=\"title\">tuple</span>&lt;Args2...&gt; <span class=\"title\">second_args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;utility&gt;      // std::pair, std::make_pair</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;       // std::string</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;     // std::cout</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::pair &lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>,<span class=\"keyword\">double</span>&gt; product1;                     <span class=\"comment\">// default constructor</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::pair &lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>,<span class=\"keyword\">double</span>&gt; product2 (<span class=\"string\">\"tomatoes\"</span>,<span class=\"number\">2.30</span>);   <span class=\"comment\">// value init</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::pair &lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>,<span class=\"keyword\">double</span>&gt; product3 (product2);          <span class=\"comment\">// copy constructor</span></span><br><span class=\"line\"></span><br><span class=\"line\">  product1 = <span class=\"built_in\">std</span>::make_pair(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>(<span class=\"string\">\"lightbulbs\"</span>),<span class=\"number\">0.99</span>);   <span class=\"comment\">// using make_pair (move)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  product2.first = <span class=\"string\">\"shoes\"</span>;                  <span class=\"comment\">// the type of first is string</span></span><br><span class=\"line\">  product2.second = <span class=\"number\">39.90</span>;                   <span class=\"comment\">// the type of second is double</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The price of \"</span> &lt;&lt; product1.first &lt;&lt; <span class=\"string\">\" is $\"</span> &lt;&lt; product1.second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The price of \"</span> &lt;&lt; product2.first &lt;&lt; <span class=\"string\">\" is $\"</span> &lt;&lt; product2.second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The price of \"</span> &lt;&lt; product3.first &lt;&lt; <span class=\"string\">\" is $\"</span> &lt;&lt; product3.second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The price of lightbulbs is $0.99</span><br><span class=\"line\">The price of shoes is $39.9</span><br><span class=\"line\">The price of tomatoes is $2.3</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","more":"<!-- build time:Thu Apr 23 2020 14:11:58 GMT+0800 (GMT+08:00) --><h1 id=\"stl\"><a class=\"markdownIt-Anchor\" href=\"#stl\"></a> STL</h1><h2 id=\"网站\"><a class=\"markdownIt-Anchor\" href=\"#网站\"></a> 网站</h2><ul><li><a href=\"https://github.com/huihut/note/blob/master/STL.md\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">github . huihut/note/STL.md</a></li><li><a href=\"http://www.cplusplus.com/reference/stl/\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">cplusplus . stl</a></li><li><a href=\"http://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">cppreference . C++ 参考手册</a></li><li><a href=\"http://blog.csdn.net/column/details/geek-stl.html\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">CSDN专栏：STL学习笔记</a></li></ul><h2 id=\"组成\"><a class=\"markdownIt-Anchor\" href=\"#组成\"></a> 组成</h2><ul><li>容器（containers）</li><li>算法（algorithms）</li><li>迭代器（iterators）</li><li>仿函数（functors）</li><li>配接器（adapters）</li><li>空间配置器（allocator）</li></ul><h2 id=\"容器containers\"><a class=\"markdownIt-Anchor\" href=\"#容器containers\"></a> 容器（containers）</h2><ul><li>序列式容器（sequence containers）：元素都是可序（ordered），但未必是有序（sorted）</li><li>关联式容器（associattive containers）</li></ul><h3 id=\"array\"><a class=\"markdownIt-Anchor\" href=\"#array\"></a> array</h3><p>array是固定大小的顺序容器，它们保存了一个以严格的线性顺序排列的特定数量的元素。</p><p>在内部，一个数组除了它所包含的元素（甚至不是它的大小，它是一个模板参数，在编译时是固定的）以外不保存任何数据。存储大小与用语言括号语法（[]）声明的普通数组一样高效。这个类只是增加了一层成员函数和全局函数，所以数组可以作为标准容器使用。</p><p>与其他标准容器不同，数组具有固定的大小，并且不通过分配器管理其元素的分配：它们是封装固定大小数组元素的聚合类型。因此，他们不能动态地扩大或缩小。</p><p>零大小的数组是有效的，但是它们不应该被解除引用（成员的前面，后面和数据）。</p><p>与标准库中的其他容器不同，交换两个数组容器是一种线性操作，它涉及单独交换范围内的所有元素，这通常是相当低效的操作。另一方面，这允许迭代器在两个容器中的元素保持其原始容器关联。</p><p>数组容器的另一个独特特性是它们可以被当作元组对象来处理：array头部重载get函数来访问数组元素，就像它是一个元组，以及专门的tuple_size和tuple_element类型。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">size_t</span> <span class=\"title\">N</span> &gt; <span class=\"title\">class</span> <span class=\"title\">array</span>;</span></span><br></pre></td></tr></table></figure><p><img src=\"http://img.blog.csdn.net/20160405225541788\" alt></p><h4 id=\"arraybegin\"><a class=\"markdownIt-Anchor\" href=\"#arraybegin\"></a> array::begin</h4><p>返回指向数组容器中第一个元素的迭代器。</p><p><img src=\"https://i.stack.imgur.com/oa3EQ.png\" alt></p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 5&gt; myarray = &#123;<span class=\"number\">2</span>, <span class=\"number\">16</span>, <span class=\"number\">77</span>,<span class=\"number\">34</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it = myarray.begin(); it != myarray.end(); ++i)</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 2 16 77 34 50</span><br></pre></td></tr></table></figure><h4 id=\"arrayend\"><a class=\"markdownIt-Anchor\" href=\"#arrayend\"></a> array::end</h4><p>返回指向数组容器中最后一个元素之后的理论元素的迭代器。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">end</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">end</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; myarray = &#123; <span class=\"number\">5</span>, <span class=\"number\">19</span>, <span class=\"number\">77</span>, <span class=\"number\">34</span>, <span class=\"number\">99</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> it = myarray.begin(); it != myarray.end(); ++it )</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 5 19 77 34 99</span><br></pre></td></tr></table></figure><h4 id=\"arrayrbegin\"><a class=\"markdownIt-Anchor\" href=\"#arrayrbegin\"></a> array::rbegin</h4><p>返回指向数组容器中最后一个元素的反向迭代器。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      reverse_iterator rbegin（）<span class=\"keyword\">noexcept</span>;</span><br><span class=\"line\">const_reverse_iterator rbegin（）<span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,4&gt; myarray = &#123;<span class=\"number\">4</span>, <span class=\"number\">26</span>, <span class=\"number\">80</span>, <span class=\"number\">14</span>&#125; ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> rit = myarray.rbegin(); rit &lt; myarray.rend(); ++rit)</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *rit;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 14 80 26 4</span><br></pre></td></tr></table></figure><h4 id=\"arrayrend\"><a class=\"markdownIt-Anchor\" href=\"#arrayrend\"></a> array::rend</h4><p>返回一个反向迭代器，指向数组中第一个元素之前的理论元素（这被认为是它的反向结束）。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">reverse_iterator <span class=\"title\">rend</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_reverse_iterator <span class=\"title\">rend</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,4&gt; myarray = &#123;<span class=\"number\">4</span>, <span class=\"number\">26</span>, <span class=\"number\">80</span>, <span class=\"number\">14</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> rit = myarray.rbegin(); rit &lt; myarray.rend(); ++rit)</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *rit;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 14 80 26 4</span><br></pre></td></tr></table></figure><h4 id=\"arraycbegin\"><a class=\"markdownIt-Anchor\" href=\"#arraycbegin\"></a> array::cbegin</h4><p>返回指向数组容器中第一个元素的常量迭代器（const_iterator）；这个迭代器可以增加和减少，但是不能用来修改它指向的内容。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const_iterator cbegin（）<span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; myarray = &#123;<span class=\"number\">2</span>, <span class=\"number\">16</span>, <span class=\"number\">77</span>, <span class=\"number\">34</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> it = myarray.cbegin(); it != myarray.cend(); ++it )</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;   <span class=\"comment\">// cannot modify *it</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 2 16 77 34 50</span><br></pre></td></tr></table></figure><h4 id=\"arraycend\"><a class=\"markdownIt-Anchor\" href=\"#arraycend\"></a> array::cend</h4><p>返回指向数组容器中最后一个元素之后的理论元素的常量迭代器（const_iterator）。这个迭代器可以增加和减少，但是不能用来修改它指向的内容。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">cend</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; myarray = &#123; <span class=\"number\">15</span>, <span class=\"number\">720</span>, <span class=\"number\">801</span>, <span class=\"number\">1002</span>, <span class=\"number\">3502</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> it = myarray.cbegin(); it != myarray.cend(); ++it )</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;   <span class=\"comment\">// cannot modify *it</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 2 16 77 34 50</span><br></pre></td></tr></table></figure><h4 id=\"arraycrbegin\"><a class=\"markdownIt-Anchor\" href=\"#arraycrbegin\"></a> array::crbegin</h4><p>返回指向数组容器中最后一个元素的常量反向迭代器（const_reverse_iterator）</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const_reverse_iterator crbegin（）<span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,6&gt; myarray = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, <span class=\"number\">60</span>&#125; ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray backwards:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> rit=myarray.crbegin() ; rit &lt; myarray.crend(); ++rit )</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *rit;   <span class=\"comment\">// cannot modify *rit</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray backwards: 60 50 40 30 20 10</span><br></pre></td></tr></table></figure><h4 id=\"arraycrend\"><a class=\"markdownIt-Anchor\" href=\"#arraycrend\"></a> array::crend</h4><p>返回指向数组中第一个元素之前的理论元素的常量反向迭代器（const_reverse_iterator），它被认为是其反向结束。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">const_reverse_iterator <span class=\"title\">crend</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,6&gt; myarray = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, <span class=\"number\">60</span>&#125; ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray backwards:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> rit=myarray.crbegin() ; rit &lt; myarray.crend(); ++rit )</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *rit;   <span class=\"comment\">// cannot modify *rit</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray backwards: 60 50 40 30 20 10</span><br></pre></td></tr></table></figure><h4 id=\"arraysize\"><a class=\"markdownIt-Anchor\" href=\"#arraysize\"></a> array::size</h4><p>返回数组容器中元素的数量。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constexpr</span> size_type size（）<span class=\"keyword\">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; myints;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size of myints:\"</span> &lt;&lt; myints.size() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sizeof(myints):\"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(myints) &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Possible Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size of myints: 5</span><br><span class=\"line\">sizeof(myints): 20</span><br></pre></td></tr></table></figure><h4 id=\"arraymax_size\"><a class=\"markdownIt-Anchor\" href=\"#arraymax_size\"></a> array::max_size</h4><p>返回数组容器可容纳的最大元素数。数组对象的max_size与其size一样，始终等于用于实例化数组模板类的第二个模板参数。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> size_type <span class=\"title\">max_size</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,10&gt; myints;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size of myints: \"</span> &lt;&lt; myints.size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"max_size of myints: \"</span> &lt;&lt; myints.max_size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size of myints: 10</span><br><span class=\"line\">max_size of myints: 10</span><br></pre></td></tr></table></figure><h4 id=\"arrayempty\"><a class=\"markdownIt-Anchor\" href=\"#arrayempty\"></a> array::empty</h4><p>返回一个布尔值，指示数组容器是否为空，即它的size()是否为0。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,0&gt; first;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; second;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"first \"</span> &lt;&lt; (first.empty() ? <span class=\"string\">\"is empty\"</span> : <span class=\"string\">\"is not empty\"</span>) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"second \"</span> &lt;&lt; (second.empty() ? <span class=\"string\">\"is empty\"</span> : <span class=\"string\">\"is not empty\"</span>) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first is empty</span><br><span class=\"line\">second is not empt</span><br></pre></td></tr></table></figure><h4 id=\"arrayoperator\"><a class=\"markdownIt-Anchor\" href=\"#arrayoperator\"></a> array::operator[]</h4><p>返回数组中第n个位置的元素的引用。与array::at相似，但array::at会检查数组边界并通过抛出一个out_of_range异常来判断n是否超出范围，而array::operator[]不检查边界。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      reference <span class=\"keyword\">operator</span>[] (size_type n);</span><br><span class=\"line\">const_reference <span class=\"keyword\">operator</span>[] (size_type n) <span class=\"keyword\">const</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,10&gt; myarray;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// assign some values:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        myarray[i] = i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// print content</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; myarray[i];</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><h4 id=\"arrayat\"><a class=\"markdownIt-Anchor\" href=\"#arrayat\"></a> array::at</h4><p>返回数组中第n个位置的元素的引用。与array::operator[]相似，但array::at会检查数组边界并通过抛出一个out_of_range异常来判断n是否超出范围，而array::operator[]不检查边界。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">reference <span class=\"title\">at</span> <span class=\"params\">( size_type n )</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_reference <span class=\"title\">at</span> <span class=\"params\">( size_type n )</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 10&gt; myarray;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// assign some values:</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t\tmyarray[i] = i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// print content</span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; myarray.at(i);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><h4 id=\"arrayfront\"><a class=\"markdownIt-Anchor\" href=\"#arrayfront\"></a> array::front</h4><p>返回对数组容器中第一个元素的引用。array::begin返回的是迭代器，array::front返回的是直接引用。<br>在空容器上调用此函数会导致未定义的行为。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">reference <span class=\"title\">front</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_reference <span class=\"title\">front</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,3&gt; myarray = &#123;<span class=\"number\">2</span>, <span class=\"number\">16</span>, <span class=\"number\">77</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"front is: \"</span> &lt;&lt; myarray.front() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;   <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"back is: \"</span> &lt;&lt; myarray.back() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;     <span class=\"comment\">// 77</span></span><br><span class=\"line\"></span><br><span class=\"line\">  myarray.front() = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray now contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span>&amp; x : myarray ) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">front is: 2</span><br><span class=\"line\">back is: 77</span><br><span class=\"line\">myarray now contains: 100 16 77</span><br></pre></td></tr></table></figure><h4 id=\"arrayback\"><a class=\"markdownIt-Anchor\" href=\"#arrayback\"></a> array::back</h4><p>返回对数组容器中最后一个元素的引用。array::end返回的是迭代器，array::back返回的是直接引用。<br>在空容器上调用此函数会导致未定义的行为。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">reference <span class=\"title\">back</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_reference <span class=\"title\">back</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,3&gt; myarray = &#123;<span class=\"number\">5</span>, <span class=\"number\">19</span>, <span class=\"number\">77</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"front is: \"</span> &lt;&lt; myarray.front() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;   <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"back is: \"</span> &lt;&lt; myarray.back() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;     <span class=\"comment\">// 77</span></span><br><span class=\"line\"></span><br><span class=\"line\">  myarray.back() = <span class=\"number\">50</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray now contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span>&amp; x : myarray ) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">front is: 5</span><br><span class=\"line\">back is: 77</span><br><span class=\"line\">myarray now contains: 5 19 50</span><br></pre></td></tr></table></figure><h4 id=\"arraydata\"><a class=\"markdownIt-Anchor\" href=\"#arraydata\"></a> array::data</h4><p>返回指向数组对象中第一个元素的指针。</p><p>由于数组中的元素存储在连续的存储位置，所以检索到的指针可以偏移以访问数组中的任何元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">value_type* <span class=\"title\">data</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> value_type* <span class=\"title\">data</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* cstr = <span class=\"string\">\"Test string\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">char</span>,12&gt; charray;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">memcpy</span> (charray.data(),cstr,<span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; charray.data() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test string</span><br></pre></td></tr></table></figure><h4 id=\"arrayfill\"><a class=\"markdownIt-Anchor\" href=\"#arrayfill\"></a> array::fill</h4><p>用val填充数组所有元素，将val设置为数组对象中所有元素的值。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fill</span> <span class=\"params\">(<span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,6&gt; myarray;</span><br><span class=\"line\"></span><br><span class=\"line\">  myarray.fill(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myarray contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span>&amp; x : myarray) &#123; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myarray contains: 5 5 5 5 5 5</span><br></pre></td></tr></table></figure><h4 id=\"arrayswap\"><a class=\"markdownIt-Anchor\" href=\"#arrayswap\"></a> array::swap</h4><p>通过x的内容交换数组的内容，这是另一个相同类型的数组对象（包括相同的大小）。</p><p>与其他容器的交换成员函数不同，此成员函数通过在各个元素之间执行与其大小相同的单独交换操作，以线性时间运行。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span> <span class=\"params\">(<span class=\"built_in\">array</span>&amp; x)</span> <span class=\"title\">noexcept</span><span class=\"params\">(<span class=\"keyword\">noexcept</span>(swap(declval&lt;value_type&amp;&gt;(),declval&lt;value_type&amp;&gt;())))</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; first = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; second = &#123;<span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  first.swap (second);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"first:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x : first) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"second:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x : second) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first: 11 22 33 44 55</span><br><span class=\"line\">second: 10 20 30 40 50</span><br></pre></td></tr></table></figure><h4 id=\"getarray\"><a class=\"markdownIt-Anchor\" href=\"#getarray\"></a> get（array）</h4><p>形如：std::get&lt;0&gt;(myarray)；传入一个数组容器，返回指定位置元素的引用。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">size_t</span> I，<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>，<span class=\"title\">size_t</span> <span class=\"title\">N</span>&gt; <span class=\"title\">T</span>＆<span class=\"title\">get</span>（<span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">arr</span>）<span class=\"title\">noexcept</span>;</span> </span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">size_t</span> I，<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>，<span class=\"title\">size_t</span> <span class=\"title\">N</span>&gt; <span class=\"title\">T</span> &amp;&amp; <span class=\"title\">get</span>（<span class=\"title\">array</span> &lt;T，N&gt; &amp;&amp; <span class=\"title\">arr</span>）<span class=\"title\">noexcept</span>;</span> </span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">size_t</span> I，<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>，<span class=\"title\">size_t</span> <span class=\"title\">N</span>&gt; <span class=\"title\">const</span> <span class=\"title\">T</span>＆<span class=\"title\">get</span>（<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">arr</span>）<span class=\"title\">noexcept</span>;</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tuple&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,3&gt; myarray = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>&#125;;</span><br><span class=\"line\">  std::tuple&lt;int,int,int&gt; mytuple (10, 20, 30);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::tuple_element&lt;<span class=\"number\">0</span>,<span class=\"keyword\">decltype</span>(myarray)&gt;::type myelement;  <span class=\"comment\">// int myelement</span></span><br><span class=\"line\"></span><br><span class=\"line\">  myelement = <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">2</span>&gt;(myarray);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">2</span>&gt;(myarray) = <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(myarray);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(myarray) = myelement;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"first element in myarray: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(myarray) &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"first element in mytuple: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(mytuple) &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first element in myarray: 30</span><br><span class=\"line\">first element in mytuple: 10</span><br></pre></td></tr></table></figure><h4 id=\"relational-operators-array\"><a class=\"markdownIt-Anchor\" href=\"#relational-operators-array\"></a> relational operators (array)</h4><p>形如：arrayA != arrayB、arrayA &gt; arrayB；依此比较数组每个元素的大小关系。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（<span class=\"number\">1</span>）\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>，<span class=\"title\">size_T</span> <span class=\"title\">N</span>&gt; </span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">bool</span> <span class=\"title\">operator</span> ==（<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">lhs</span>，<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">rhs</span>）;</span></span><br><span class=\"line\">（<span class=\"number\">2</span>）\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>，<span class=\"title\">size_T</span> <span class=\"title\">N</span>&gt; </span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">bool</span> <span class=\"title\">operator</span>！=（<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">lhs</span>，<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">rhs</span>）;</span></span><br><span class=\"line\">（<span class=\"number\">3</span>）\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>，<span class=\"title\">size_T</span> <span class=\"title\">N</span>&gt; </span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">bool</span> <span class=\"title\">operator</span> &lt;（const array &lt;T，N&gt;＆lhs，const array &lt;T，N&gt;＆rhs）;</span></span><br><span class=\"line\"><span class=\"class\">（4）\t</span></span><br><span class=\"line\"><span class=\"class\">template &lt;class T，size_T N&gt; </span></span><br><span class=\"line\"><span class=\"class\">  bool operator &lt;=（const array &lt;T，N&gt;＆lhs，const array &lt;T，N&gt;＆rhs）;</span></span><br><span class=\"line\"><span class=\"class\">（5）\t</span></span><br><span class=\"line\"><span class=\"class\">template &lt;class T，size_T N&gt; </span></span><br><span class=\"line\"><span class=\"class\">  bool operator&gt;（const array &lt;T，N&gt;＆lhs，const array &lt;T，N&gt;＆rhs）;</span></span><br><span class=\"line\"><span class=\"class\">（6）\t</span></span><br><span class=\"line\"><span class=\"class\">template &lt;class T，size_T N&gt; </span></span><br><span class=\"line\"><span class=\"class\">  bool operator&gt; =（<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">lhs</span>，<span class=\"title\">const</span> <span class=\"title\">array</span> &lt;T，N&gt;＆<span class=\"title\">rhs</span>）;</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; a = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; b = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>,5&gt; c = &#123;<span class=\"number\">50</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a==b) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a and b are equal\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (b!=c) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b and c are not equal\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (b&lt;c) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b is less than c\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (c&gt;b) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"c is greater than b\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a&lt;=b) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a is less than or equal to b\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a&gt;=b) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a is greater than or equal to b\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a and b are equal</span><br><span class=\"line\">b and c are not equal</span><br><span class=\"line\">b is less than c</span><br><span class=\"line\">c is greater than b</span><br><span class=\"line\">a is less than or equal to b</span><br><span class=\"line\">a is greater than or equal to b</span><br></pre></td></tr></table></figure><h3 id=\"vector\"><a class=\"markdownIt-Anchor\" href=\"#vector\"></a> vector</h3><p>vector是表示可以改变大小的数组的序列容器。</p><p>就像数组一样，vector为它们的元素使用连续的存储位置，这意味着它们的元素也可以使用到其元素的常规指针上的偏移来访问，而且和数组一样高效。但是与数组不同的是，它们的大小可以动态地改变，它们的存储由容器自动处理。</p><p>在内部，vector使用一个动态分配的数组来存储它们的元素。这个数组可能需要重新分配，以便在插入新元素时增加大小，这意味着分配一个新数组并将所有元素移动到其中。就处理时间而言，这是一个相对昂贵的任务，因此每次将元素添加到容器时矢量都不会重新分配。</p><p>相反，vector容器可以分配一些额外的存储以适应可能的增长，并且因此容器可以具有比严格需要包含其元素（即，其大小）的存储更大的实际容量。库可以实现不同的策略的增长到内存使用和重新分配之间的平衡，但在任何情况下，再分配应仅在对数生长的间隔发生尺寸，使得在所述载体的末端各个元件的插入可以与提供分期常量时间复杂性。</p><p>因此，与数组相比，载体消耗更多的内存来交换管理存储和以有效方式动态增长的能力。</p><p>与其他动态序列容器（deques，lists和 forward_lists ）相比，vector非常有效地访问其元素（就像数组一样），并相对有效地从元素末尾添加或移除元素。对于涉及插入或移除除了结尾之外的位置的元素的操作，它们执行比其他位置更差的操作，并且具有比列表和 forward_lists 更不一致的迭代器和引用。</p><p>针对 vector 的各种常见操作的复杂度（效率）如下：</p><ul><li>随机访问 - 常数 O(1)</li><li>在尾部增删元素 - 平摊（amortized）常数 O(1)}}</li><li>增删元素 - 至 vector 尾部的线性距离 O(n)}}</li></ul><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Alloc</span> = <span class=\"title\">allocator</span>&lt;T&gt; &gt; <span class=\"title\">class</span> <span class=\"title\">vector</span>;</span></span><br></pre></td></tr></table></figure><p><img src=\"http://img.blog.csdn.net/20160406151211233\" alt></p><h4 id=\"vectorvector\"><a class=\"markdownIt-Anchor\" href=\"#vectorvector\"></a> vector::vector</h4><p>（1）empty容器构造函数（默认构造函数）<br>构造一个空的容器，没有元素。<br>（2）fill构造函数<br>用n个元素构造一个容器。每个元素都是val的副本（如果提供）。<br>（3）范围（range）构造器<br>使用与[ range，first，last]范围内的元素相同的顺序构造一个容器，其中的每个元素都是emplace -从该范围内相应的元素构造而成。<br>（4）复制（copy）构造函数（并用分配器复制）<br>按照相同的顺序构造一个包含x中每个元素的副本的容器。<br>（5）移动（move）构造函数（和分配器移动）<br>构造一个获取x元素的容器。<br>如果指定了alloc并且与x的分配器不同，那么元素将被移动。否则，没有构建元素（他们的所有权直接转移）。<br>x保持未指定但有效的状态。<br>（6）初始化列表构造函数<br>构造一个容器中的每个元件中的一个拷贝的IL，以相同的顺序。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span> (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">vector</span> <span class=\"params\">(<span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class=\"line\">fill (<span class=\"number\">2</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">vector</span> <span class=\"params\">(size_type n)</span></span>;</span><br><span class=\"line\">         <span class=\"built_in\">vector</span> (size_type n, <span class=\"keyword\">const</span> value_type&amp; val,</span><br><span class=\"line\">                 <span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type());</span><br><span class=\"line\">range (<span class=\"number\">3</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputIterator</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">vector</span> (<span class=\"title\">InputIterator</span> <span class=\"title\">first</span>, <span class=\"title\">InputIterator</span> <span class=\"title\">last</span>,</span></span><br><span class=\"line\"><span class=\"class\">          <span class=\"title\">const</span> <span class=\"title\">allocator_type</span>&amp; <span class=\"title\">alloc</span> = <span class=\"title\">allocator_type</span>());</span></span><br><span class=\"line\">copy (<span class=\"number\">4</span>)\t</span><br><span class=\"line\"><span class=\"built_in\">vector</span> (<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&amp; x);</span><br><span class=\"line\"><span class=\"built_in\">vector</span> (<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&amp; x, <span class=\"keyword\">const</span> allocator_type&amp; alloc);</span><br><span class=\"line\">move (<span class=\"number\">5</span>)\t</span><br><span class=\"line\"><span class=\"built_in\">vector</span> (<span class=\"built_in\">vector</span>&amp;&amp; x);</span><br><span class=\"line\"><span class=\"built_in\">vector</span> (<span class=\"built_in\">vector</span>&amp;&amp; x, <span class=\"keyword\">const</span> allocator_type&amp; alloc);</span><br><span class=\"line\"><span class=\"function\">initializer <span class=\"title\">list</span> <span class=\"params\">(<span class=\"number\">6</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">vector</span> <span class=\"params\">(<span class=\"built_in\">initializer_list</span>&lt;value_type&gt; il,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">       <span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// constructors used in the same order as described above:</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; first;             <span class=\"comment\">// empty vector of ints</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">second</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">100</span>)</span></span>;    <span class=\"comment\">// four ints with value 100</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">third</span><span class=\"params\">(second.begin(), second.end())</span></span>;<span class=\"comment\">// iterating through second</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">fourth</span><span class=\"params\">(third)</span></span>;     <span class=\"comment\">// a copy of third</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// the iterator constructor can also be used to construct from arrays:</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> myints[] = &#123;<span class=\"number\">16</span>,<span class=\"number\">2</span>,<span class=\"number\">77</span>,<span class=\"number\">29</span>&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">fifth</span><span class=\"params\">(myints, myints + <span class=\"keyword\">sizeof</span>(myints) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The contents of fifth are:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = fifth.begin(); it != fifth.end(); ++it)</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The contents of fifth are: 16 2 77 29</span><br></pre></td></tr></table></figure><h4 id=\"vector~vector\"><a class=\"markdownIt-Anchor\" href=\"#vector~vector\"></a> vector::~vector</h4><p>销毁容器对象。这将在每个包含的元素上调用allocator_traits::destroy，并使用其分配器释放由矢量分配的所有存储容量。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~<span class=\"built_in\">vector</span>();</span><br></pre></td></tr></table></figure><h4 id=\"vectoroperator\"><a class=\"markdownIt-Anchor\" href=\"#vectoroperator\"></a> vector::operator=</h4><p>将新内容分配给容器，替换其当前内容，并相应地修改其大小。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copy (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&amp; <span class=\"keyword\">operator</span>= (<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&amp; x);</span><br><span class=\"line\">move (<span class=\"number\">2</span>)\t</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&amp; <span class=\"keyword\">operator</span>= (<span class=\"built_in\">vector</span>&amp;&amp; x);</span><br><span class=\"line\"><span class=\"function\">initializer <span class=\"title\">list</span> <span class=\"params\">(<span class=\"number\">3</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&amp; <span class=\"keyword\">operator</span></span>= (<span class=\"built_in\">initializer_list</span>&lt;value_type&gt; il);</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  std::vector&lt;int&gt; foo (3,0);</span><br><span class=\"line\">  std::vector&lt;int&gt; bar (5,0);</span><br><span class=\"line\"></span><br><span class=\"line\">  bar &#x3D; foo;</span><br><span class=\"line\">  foo &#x3D; std::vector&lt;int&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; &quot;Size of foo: &quot; &lt;&lt; int(foo.size()) &lt;&lt; &#39;\\n&#39;;</span><br><span class=\"line\">  std::cout &lt;&lt; &quot;Size of bar: &quot; &lt;&lt; int(bar.size()) &lt;&lt; &#39;\\n&#39;;</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Size of foo: 0</span><br><span class=\"line\">Size of bar: 3</span><br></pre></td></tr></table></figure><h4 id=\"vectorbegin\"><a class=\"markdownIt-Anchor\" href=\"#vectorbegin\"></a> vector::begin</h4><h4 id=\"vectorend\"><a class=\"markdownIt-Anchor\" href=\"#vectorend\"></a> vector::end</h4><h4 id=\"vectorrbegin\"><a class=\"markdownIt-Anchor\" href=\"#vectorrbegin\"></a> vector::rbegin</h4><h4 id=\"vectorrend\"><a class=\"markdownIt-Anchor\" href=\"#vectorrend\"></a> vector::rend</h4><h4 id=\"vectorcbegin\"><a class=\"markdownIt-Anchor\" href=\"#vectorcbegin\"></a> vector::cbegin</h4><h4 id=\"vectorcend\"><a class=\"markdownIt-Anchor\" href=\"#vectorcend\"></a> vector::cend</h4><h4 id=\"vectorrcbegin\"><a class=\"markdownIt-Anchor\" href=\"#vectorrcbegin\"></a> vector::rcbegin</h4><h4 id=\"vectorrcend\"><a class=\"markdownIt-Anchor\" href=\"#vectorrcend\"></a> vector::rcend</h4><h4 id=\"vectorsize\"><a class=\"markdownIt-Anchor\" href=\"#vectorsize\"></a> vector::size</h4><p>返回vector中元素的数量。</p><p>这是vector中保存的实际对象的数量，不一定等于其存储容量。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">size_type <span class=\"title\">size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myints;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"0. size: \"</span> &lt;&lt; myints.size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++) myints.push_back(i);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1. size: \"</span> &lt;&lt; myints.size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  myints.insert (myints.end(),<span class=\"number\">10</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"2. size: \"</span> &lt;&lt; myints.size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  myints.pop_back();</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"3. size: \"</span> &lt;&lt; myints.size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0. size: 0</span><br><span class=\"line\">1. size: 10</span><br><span class=\"line\">2. size: 20</span><br><span class=\"line\">3. size: 19</span><br></pre></td></tr></table></figure><h4 id=\"vectormax_size\"><a class=\"markdownIt-Anchor\" href=\"#vectormax_size\"></a> vector::max_size</h4><p>返回该vector可容纳的元素的最大数量。由于已知的系统或库实现限制，</p><p>这是容器可以达到的最大潜在大小，但容器无法保证能够达到该大小：在达到该大小之前的任何时间，仍然无法分配存储。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">size_type <span class=\"title\">max_size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set some content in the vector:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i++) myvector.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size: \"</span> &lt;&lt; myvector.size() &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"capacity: \"</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"max_size: \"</span> &lt;&lt; myvector.max_size() &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>A possible output for this program could be:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size: 100</span><br><span class=\"line\">capacity: 128</span><br><span class=\"line\">max_size: 1073741823</span><br></pre></td></tr></table></figure><h4 id=\"vectorresize\"><a class=\"markdownIt-Anchor\" href=\"#vectorresize\"></a> vector::resize</h4><p>调整容器的大小，使其包含n个元素。</p><p>如果n小于当前的容器size，内容将被缩小到前n个元素，将其删除（并销毁它们）。</p><p>如果n大于当前容器size，则通过在末尾插入尽可能多的元素以达到大小n来扩展内容。如果指定了val，则新元素将初始化为val的副本，否则将进行值初始化。</p><p>如果n也大于当前的容器的capacity（容量），分配的存储空间将自动重新分配。</p><p>注意这个函数通过插入或者删除元素的内容来改变容器的实际内容。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span> <span class=\"params\">(size_type n)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span> <span class=\"params\">(size_type n, <span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set some initial content:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">10</span>;i++) myvector.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\">  myvector.resize(<span class=\"number\">5</span>);</span><br><span class=\"line\">  myvector.resize(<span class=\"number\">8</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">  myvector.resize(<span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myvector contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;myvector.size();i++)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; myvector[i];</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0</span><br></pre></td></tr></table></figure><h4 id=\"vectorcapacity\"><a class=\"markdownIt-Anchor\" href=\"#vectorcapacity\"></a> vector::capacity</h4><p>返回当前为vector分配的存储空间的大小，用元素表示。这个capacity(容量)不一定等于vector的size。它可以相等或更大，额外的空间允许适应增长，而不需要重新分配每个插入。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">size_type <span class=\"title\">capacity</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set some content in the vector:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i++) myvector.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>) myvector.size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"capacity: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>) myvector.capacity() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"max_size: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>) myvector.max_size() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>A possible output for this program could be:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size: 100</span><br><span class=\"line\">capacity: 128</span><br><span class=\"line\">max_size: 1073741823</span><br></pre></td></tr></table></figure><h4 id=\"vectorempty\"><a class=\"markdownIt-Anchor\" href=\"#vectorempty\"></a> vector::empty</h4><p>返回vector是否为空（即，它的size是否为0）</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span> <span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">10</span>;i++) myvector.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!myvector.empty())</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">     sum += myvector.back();</span><br><span class=\"line\">     myvector.pop_back();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"total: \"</span> &lt;&lt; sum &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total: 55</span><br></pre></td></tr></table></figure><h4 id=\"vectorreserve\"><a class=\"markdownIt-Anchor\" href=\"#vectorreserve\"></a> vector::reserve</h4><p>请求vector容量至少足以包含n个元素。</p><p>如果n大于当前vector容量，则该函数使容器重新分配其存储容量，从而将其容量增加到n（或更大）。</p><p>在所有其他情况下，函数调用不会导致重新分配，并且vector容量不受影响。</p><p>这个函数对vector大小没有影响，也不能改变它的元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reserve</span> <span class=\"params\">(size_type n)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::size_type sz;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; foo;</span><br><span class=\"line\">  sz = foo.capacity();</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"making foo grow:\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; ++i) &#123;</span><br><span class=\"line\">    foo.push_back(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sz!=foo.capacity()) &#123;</span><br><span class=\"line\">      sz = foo.capacity();</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"capacity changed: \"</span> &lt;&lt; sz &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; bar;</span><br><span class=\"line\">  sz = bar.capacity();</span><br><span class=\"line\">  bar.reserve(<span class=\"number\">100</span>);   <span class=\"comment\">// this is the only difference with foo above</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"making bar grow:\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; ++i) &#123;</span><br><span class=\"line\">    bar.push_back(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sz!=bar.capacity()) &#123;</span><br><span class=\"line\">      sz = bar.capacity();</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"capacity changed: \"</span> &lt;&lt; sz &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Possible output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">making foo grow:</span><br><span class=\"line\">capacity changed: 1</span><br><span class=\"line\">capacity changed: 2</span><br><span class=\"line\">capacity changed: 4</span><br><span class=\"line\">capacity changed: 8</span><br><span class=\"line\">capacity changed: 16</span><br><span class=\"line\">capacity changed: 32</span><br><span class=\"line\">capacity changed: 64</span><br><span class=\"line\">capacity changed: 128</span><br><span class=\"line\">making bar grow:</span><br><span class=\"line\">capacity changed: 100</span><br></pre></td></tr></table></figure><h4 id=\"vectorshrink_to_fit\"><a class=\"markdownIt-Anchor\" href=\"#vectorshrink_to_fit\"></a> vector::shrink_to_fit</h4><p>要求容器减小其capacity(容量)以适应其尺寸。</p><p>该请求是非绑定的，并且容器实现可以自由地进行优化，并且保持capacity大于其size的vector。 这可能导致重新分配，但对矢量大小没有影响，并且不能改变其元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shrink_to_fit</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">myvector</span> <span class=\"params\">(<span class=\"number\">100</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1. capacity of myvector: \"</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  myvector.resize(<span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"2. capacity of myvector: \"</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  myvector.shrink_to_fit();</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"3. capacity of myvector: \"</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Possible output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. capacity of myvector: 100</span><br><span class=\"line\">2. capacity of myvector: 100</span><br><span class=\"line\">3. capacity of myvector: 10</span><br></pre></td></tr></table></figure><h4 id=\"vectoroperator-2\"><a class=\"markdownIt-Anchor\" href=\"#vectoroperator-2\"></a> vector::operator[]</h4><h4 id=\"vectorat\"><a class=\"markdownIt-Anchor\" href=\"#vectorat\"></a> vector::at</h4><h4 id=\"vectorfront\"><a class=\"markdownIt-Anchor\" href=\"#vectorfront\"></a> vector::front</h4><h4 id=\"vectorback\"><a class=\"markdownIt-Anchor\" href=\"#vectorback\"></a> vector::back</h4><h4 id=\"vectordata\"><a class=\"markdownIt-Anchor\" href=\"#vectordata\"></a> vector::data</h4><h4 id=\"vectorassign\"><a class=\"markdownIt-Anchor\" href=\"#vectorassign\"></a> vector::assign</h4><p>将新内容分配给vector，替换其当前内容，并相应地修改其大小。</p><p>在范围版本（1）中，新内容是从第一个和最后一个范围内的每个元素按相同顺序构造的元素。</p><p>在填充版本（2）中，新内容是n个元素，每个元素都被初始化为一个val的副本。</p><p>在初始化列表版本（3）中，新内容是以相同顺序作为初始化列表传递的值的副本。</p><p>所述内部分配器被用于（通过其性状），以分配和解除分配存储器如果重新分配发生。它也习惯于摧毁所有现有的元素，并构建新的元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">range (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputIterator</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">assign</span> (<span class=\"title\">InputIterator</span> <span class=\"title\">first</span>, <span class=\"title\">InputIterator</span> <span class=\"title\">last</span>);</span></span><br><span class=\"line\">fill (<span class=\"number\">2</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">assign</span> <span class=\"params\">(size_type n, <span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br><span class=\"line\"><span class=\"function\">initializer <span class=\"title\">list</span> <span class=\"params\">(<span class=\"number\">3</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">assign</span> <span class=\"params\">(<span class=\"built_in\">initializer_list</span>&lt;value_type&gt; il)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; first;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; second;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; third;</span><br><span class=\"line\"></span><br><span class=\"line\">  first.assign (<span class=\"number\">7</span>,<span class=\"number\">100</span>);             <span class=\"comment\">// 7 ints with a value of 100</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it;</span><br><span class=\"line\">  it=first.begin()+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  second.assign (it,first.end()<span class=\"number\">-1</span>); <span class=\"comment\">// the 5 central values of first</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> myints[] = &#123;<span class=\"number\">1776</span>,<span class=\"number\">7</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">  third.assign (myints,myints+<span class=\"number\">3</span>);   <span class=\"comment\">// assigning from array.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Size of first: \"</span> &lt;&lt; <span class=\"keyword\">int</span> (first.size()) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Size of second: \"</span> &lt;&lt; <span class=\"keyword\">int</span> (second.size()) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Size of third: \"</span> &lt;&lt; <span class=\"keyword\">int</span> (third.size()) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Size of first: 7</span><br><span class=\"line\">Size of second: 5</span><br><span class=\"line\">Size of third: 3</span><br></pre></td></tr></table></figure><p>补充：vector::assign 与 vector::operator= 的区别：</p><ol><li>vector::assign 实现源码</li></ol><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">assign</span><span class=\"params\">(size_type __n, <span class=\"keyword\">const</span> _Tp&amp; __val)</span> </span>&#123; _M_fill_assign(__n, __val); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> _<span class=\"title\">Tp</span>, <span class=\"title\">class</span> _<span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">vector</span>&lt;_Tp, _Alloc&gt;:</span>:_M_fill_assign(<span class=\"keyword\">size_t</span> __n, <span class=\"keyword\">const</span> value_type&amp; __val) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__n &gt; capacity()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;_Tp, _Alloc&gt; __tmp(__n, __val, get_allocator());</span><br><span class=\"line\">    __tmp.swap(*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (__n &gt; size()) &#123;</span><br><span class=\"line\">    fill(begin(), end(), __val);</span><br><span class=\"line\">    _M_finish = uninitialized_fill_n(_M_finish, __n - size(), __val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    erase(fill_n(begin(), __n, __val), end());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>vector::operator= 实现源码</li></ol><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> _<span class=\"title\">Tp</span>, <span class=\"title\">class</span> _<span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">vector</span>&lt;_Tp,_Alloc&gt;&amp; </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">vector</span>&lt;_Tp,_Alloc&gt;:</span>:<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;_Tp, _Alloc&gt;&amp; __x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (&amp;__x != <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> size_type __xlen = __x.size();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__xlen &gt; capacity()) &#123;</span><br><span class=\"line\">      iterator __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end());</span><br><span class=\"line\">      destroy(_M_start, _M_finish);</span><br><span class=\"line\">      _M_deallocate(_M_start, _M_end_of_storage - _M_start);</span><br><span class=\"line\">      _M_start = __tmp;</span><br><span class=\"line\">      _M_end_of_storage = _M_start + __xlen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (size() &gt;= __xlen) &#123;</span><br><span class=\"line\">      iterator __i = copy(__x.begin(), __x.end(), begin());</span><br><span class=\"line\">      destroy(__i, _M_finish);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      copy(__x.begin(), __x.begin() + size(), _M_start);</span><br><span class=\"line\">      uninitialized_copy(__x.begin() + size(), __x.end(), _M_finish);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _M_finish = _M_start + __xlen;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"vectorpush_back\"><a class=\"markdownIt-Anchor\" href=\"#vectorpush_back\"></a> vector::push_back</h4><p>在vector的最后一个元素之后添加一个新元素。val的内容被复制（或移动）到新的元素。</p><p>这有效地将容器size增加了一个，如果新的矢量size超过了当前vector的capacity，则导致所分配的存储空间自动重新分配。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_back</span> <span class=\"params\">(<span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_back</span> <span class=\"params\">(value_type&amp;&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> myint;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Please enter some integers (enter 0 to end):\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span> &gt;&gt; myint;</span><br><span class=\"line\">    myvector.push_back (myint);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (myint);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myvector stores \"</span> &lt;&lt; <span class=\"keyword\">int</span>(myvector.size()) &lt;&lt; <span class=\"string\">\" numbers.\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"vectorpop_back\"><a class=\"markdownIt-Anchor\" href=\"#vectorpop_back\"></a> vector::pop_back</h4><p>删除vector中的最后一个元素，有效地将容器size减少一个。</p><p>这破坏了被删除的元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span> <span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">  myvector.push_back (<span class=\"number\">100</span>);</span><br><span class=\"line\">  myvector.push_back (<span class=\"number\">200</span>);</span><br><span class=\"line\">  myvector.push_back (<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!myvector.empty())</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sum+=myvector.back();</span><br><span class=\"line\">    myvector.pop_back();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The elements of myvector add up to \"</span> &lt;&lt; sum &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The elements of myvector add up to 600</span><br></pre></td></tr></table></figure><h4 id=\"vectorinsert\"><a class=\"markdownIt-Anchor\" href=\"#vectorinsert\"></a> vector::insert</h4><p>通过在指定位置的元素之前插入新元素来扩展该vector，通过插入元素的数量有效地增加容器大小。 这会导致分配的存储空间自动重新分配，只有在新的vector的size超过当前的vector的capacity的情况下。</p><p>由于vector使用数组作为其基础存储，因此除了将元素插入到vector末尾之后，或vector的begin之前，其他位置会导致容器重新定位位置之后的所有元素到他们的新位置。与其他种类的序列容器（例如list或forward_list）执行相同操作的操作相比，这通常是低效的操作。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">single <span class=\"title\">element</span> <span class=\"params\">(<span class=\"number\">1</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">insert</span> <span class=\"params\">(const_iterator position, <span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br><span class=\"line\">fill (<span class=\"number\">2</span>)\t</span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">insert</span> <span class=\"params\">(const_iterator position, size_type n, <span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br><span class=\"line\">range (<span class=\"number\">3</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputIterator</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">iterator</span> <span class=\"title\">insert</span> (<span class=\"title\">const_iterator</span> <span class=\"title\">position</span>, <span class=\"title\">InputIterator</span> <span class=\"title\">first</span>, <span class=\"title\">InputIterator</span> <span class=\"title\">last</span>);</span></span><br><span class=\"line\">move (<span class=\"number\">4</span>)\t</span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">insert</span> <span class=\"params\">(const_iterator position, value_type&amp;&amp; val)</span></span>;</span><br><span class=\"line\"><span class=\"function\">initializer <span class=\"title\">list</span> <span class=\"params\">(<span class=\"number\">5</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">insert</span> <span class=\"params\">(const_iterator position, <span class=\"built_in\">initializer_list</span>&lt;value_type&gt; il)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">myvector</span> <span class=\"params\">(<span class=\"number\">3</span>,<span class=\"number\">100</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it;</span><br><span class=\"line\"></span><br><span class=\"line\">  it = myvector.begin();</span><br><span class=\"line\">  it = myvector.insert ( it , <span class=\"number\">200</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">  myvector.insert (it,<span class=\"number\">2</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// \"it\" no longer valid, get a new one:</span></span><br><span class=\"line\">  it = myvector.begin();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">anothervector</span> <span class=\"params\">(<span class=\"number\">2</span>,<span class=\"number\">400</span>)</span></span>;</span><br><span class=\"line\">  myvector.insert (it+<span class=\"number\">2</span>,anothervector.begin(),anothervector.end());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> myarray [] = &#123; <span class=\"number\">501</span>,<span class=\"number\">502</span>,<span class=\"number\">503</span> &#125;;</span><br><span class=\"line\">  myvector.insert (myvector.begin(), myarray, myarray+<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myvector contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (it=myvector.begin(); it&lt;myvector.end(); it++)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myvector contains: 501 502 503 300 300 400 400 200 100 100 100</span><br></pre></td></tr></table></figure><p>补充：insert 迭代器野指针错误：</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(<span class=\"number\">5</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator vi;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取vector第一个元素的迭代器</span></span><br><span class=\"line\">\tvi = v.begin();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// push_back 插入元素之后可能会因为 push_back 的骚操作（创建一个新vector把旧vector的值复制到新vector），导致vector迭代器iterator的指针变成野指针，而导致insert出错</span></span><br><span class=\"line\">\tv.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tv.insert(vi, <span class=\"number\">2</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>改正：应该把<code>vi = v.begin();</code>放到<code>v.push_back(10);</code>后面</p><h4 id=\"vectorerase\"><a class=\"markdownIt-Anchor\" href=\"#vectorerase\"></a> vector::erase</h4><p>从vector中删除单个元素（position）或一系列元素（[first，last））。</p><p>这有效地减少了被去除的元素的数量，从而破坏了容器的大小。</p><p>由于vector使用一个数组作为其底层存储，所以删除除vector结束位置之后，或vector的begin之前的元素外，将导致容器将段被擦除后的所有元素重新定位到新的位置。与其他种类的序列容器（例如list或forward_list）执行相同操作的操作相比，这通常是低效的操作。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">erase</span> <span class=\"params\">(const_iterator position)</span></span>;</span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">erase</span> <span class=\"params\">(const_iterator first, const_iterator last)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set some values (from 1 to 10)</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">10</span>; i++) myvector.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// erase the 6th element</span></span><br><span class=\"line\">  myvector.erase (myvector.begin()+<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// erase the first 3 elements:</span></span><br><span class=\"line\">  myvector.erase (myvector.begin(),myvector.begin()+<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myvector contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;myvector.size(); ++i)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; myvector[i];</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myvector contains: 4 5 7 8 9 10</span><br></pre></td></tr></table></figure><h4 id=\"vectorswap\"><a class=\"markdownIt-Anchor\" href=\"#vectorswap\"></a> vector::swap</h4><p>通过x的内容交换容器的内容，x是另一个相同类型的vector对象。尺寸可能不同。</p><p>在调用这个成员函数之后，这个容器中的元素是那些在调用之前在x中的元素，而x的元素是在这个元素中的元素。所有迭代器，引用和指针对交换对象保持有效。</p><p>请注意，非成员函数存在具有相同名称的交换，并使用与此成员函数相似的优化来重载该算法。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span> <span class=\"params\">(<span class=\"built_in\">vector</span>&amp; x)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">foo</span> <span class=\"params\">(<span class=\"number\">3</span>,<span class=\"number\">100</span>)</span></span>;   <span class=\"comment\">// three ints with a value of 100</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">bar</span> <span class=\"params\">(<span class=\"number\">5</span>,<span class=\"number\">200</span>)</span></span>;   <span class=\"comment\">// five ints with a value of 200</span></span><br><span class=\"line\"></span><br><span class=\"line\">  foo.swap(bar);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"foo contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;foo.size(); i++)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; foo[i];</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"bar contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>; i&lt;bar.size(); i++)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; bar[i];</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo contains: 200 200 200 200 200 </span><br><span class=\"line\">bar contains: 100 100 100</span><br></pre></td></tr></table></figure><h4 id=\"vectorclear\"><a class=\"markdownIt-Anchor\" href=\"#vectorclear\"></a> vector::clear</h4><p>从vector中删除所有的元素（被销毁），留下size为0的容器。</p><p>不保证重新分配，并且由于调用此函数， vector的capacity不保证发生变化。强制重新分配的典型替代方法是使用swap：<code>vector&lt;T&gt;().swap(x); // clear x reallocating</code></p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = v.begin(); it != v.end(); ++it)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">' '</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">v1</span><span class=\"params\">(<span class=\"number\">5</span>, <span class=\"number\">50</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1 size  = \"</span> &lt;&lt; v1.size() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1 capacity  = \"</span> &lt;&lt; v1.capacity() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv1.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1 size  = \"</span> &lt;&lt; v1.size() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1 capacity  = \"</span> &lt;&lt; v1.capacity() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv1.push_back(<span class=\"number\">11</span>);</span><br><span class=\"line\">\tv1.push_back(<span class=\"number\">22</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1 size  = \"</span> &lt;&lt; v1.size() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1 capacity  = \"</span> &lt;&lt; v1.capacity() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">50 50 50 50 50</span><br><span class=\"line\">v1 size  &#x3D; 5</span><br><span class=\"line\">v1 capacity  &#x3D; 5</span><br><span class=\"line\"></span><br><span class=\"line\">v1 size  &#x3D; 0</span><br><span class=\"line\">v1 capacity  &#x3D; 5</span><br><span class=\"line\">11 22</span><br><span class=\"line\">v1 size  &#x3D; 2</span><br><span class=\"line\">v1 capacity  &#x3D; 5</span><br></pre></td></tr></table></figure><h4 id=\"vectoremplace\"><a class=\"markdownIt-Anchor\" href=\"#vectoremplace\"></a> vector::emplace</h4><p>通过在position位置处插入新元素args来扩展容器。这个新元素是用args作为构建的参数来构建的。</p><p>这有效地增加了一个容器的大小。</p><p>分配存储空间的自动重新分配发生在新的vector的size超过当前向量容量的情况下。</p><p>由于vector使用数组作为其基础存储，因此除了将元素插入到vector末尾之后，或vector的begin之前，其他位置会导致容器重新定位位置之后的所有元素到他们的新位置。与其他种类的序列容器（例如list或forward_list）执行相同操作的操作相比，这通常是低效的操作。</p><p>该元素是通过调用allocator_traits::construct来转换args来创建的。插入一个类似的成员函数，将现有对象复制或移动到容器中。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">iterator</span> <span class=\"title\">emplace</span> (<span class=\"title\">const_iterator</span> <span class=\"title\">position</span>, <span class=\"title\">Args</span>&amp;&amp;... <span class=\"title\">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector = &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">auto</span> it = myvector.emplace ( myvector.begin()+<span class=\"number\">1</span>, <span class=\"number\">100</span> );</span><br><span class=\"line\">  myvector.emplace ( it, <span class=\"number\">200</span> );</span><br><span class=\"line\">  myvector.emplace ( myvector.end(), <span class=\"number\">300</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myvector contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; x: myvector)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myvector contains: 10 200 100 20 30 300</span><br></pre></td></tr></table></figure><h4 id=\"vectoremplace_back\"><a class=\"markdownIt-Anchor\" href=\"#vectoremplace_back\"></a> vector::emplace_back</h4><p>在vector的末尾插入一个新的元素，紧跟在当前的最后一个元素之后。这个新元素是用args作为构造函数的参数来构造的。</p><p>这有效地将容器大小增加了一个，如果新的矢量大小超过了当前的vector容量，则导致所分配的存储空间自动重新分配。</p><p>该元素是通过调用allocator_traits :: construct来转换args来创建的。</p><p>与push_back相比，emplace_back可以避免额外的复制和移动操作。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">emplace_back</span> (<span class=\"title\">Args</span>&amp;&amp;... <span class=\"title\">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">President</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> country;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> year;</span><br><span class=\"line\"> </span><br><span class=\"line\">    President(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> p_name, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> p_country, <span class=\"keyword\">int</span> p_year)</span><br><span class=\"line\">        : name(<span class=\"built_in\">std</span>::move(p_name)), country(<span class=\"built_in\">std</span>::move(p_country)), year(p_year)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"I am being constructed.\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    President(President&amp;&amp; other)</span><br><span class=\"line\">        : name(<span class=\"built_in\">std</span>::move(other.name)), country(<span class=\"built_in\">std</span>::move(other.country)), year(other.year)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"I am being moved.\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    President&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> President&amp; other) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;President&gt; elections;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"emplace_back:\\n\"</span>;</span><br><span class=\"line\">    elections.emplace_back(<span class=\"string\">\"Nelson Mandela\"</span>, <span class=\"string\">\"South Africa\"</span>, <span class=\"number\">1994</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;President&gt; reElections;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\npush_back:\\n\"</span>;</span><br><span class=\"line\">    reElections.push_back(President(<span class=\"string\">\"Franklin Delano Roosevelt\"</span>, <span class=\"string\">\"the USA\"</span>, <span class=\"number\">1936</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\nContents:\\n\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (President <span class=\"keyword\">const</span>&amp; president: elections) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; president.name &lt;&lt; <span class=\"string\">\" was elected president of \"</span></span><br><span class=\"line\">                  &lt;&lt; president.country &lt;&lt; <span class=\"string\">\" in \"</span> &lt;&lt; president.year &lt;&lt; <span class=\"string\">\".\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (President <span class=\"keyword\">const</span>&amp; president: reElections) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; president.name &lt;&lt; <span class=\"string\">\" was re-elected president of \"</span></span><br><span class=\"line\">                  &lt;&lt; president.country &lt;&lt; <span class=\"string\">\" in \"</span> &lt;&lt; president.year &lt;&lt; <span class=\"string\">\".\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emplace_back:</span><br><span class=\"line\">I am being constructed.</span><br><span class=\"line\"> </span><br><span class=\"line\">push_back:</span><br><span class=\"line\">I am being constructed.</span><br><span class=\"line\">I am being moved.</span><br><span class=\"line\"> </span><br><span class=\"line\">Contents:</span><br><span class=\"line\">Nelson Mandela was elected president of South Africa in 1994.</span><br><span class=\"line\">Franklin Delano Roosevelt was re-elected president of the USA in 1936.</span><br></pre></td></tr></table></figure><h4 id=\"vectorget_allocator\"><a class=\"markdownIt-Anchor\" href=\"#vectorget_allocator\"></a> vector::get_allocator</h4><p>返回与vector关联的构造器对象的副本。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">allocator_type <span class=\"title\">get_allocator</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> * p;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// allocate an array with space for 5 elements using vector's allocator:</span></span><br><span class=\"line\">  p = myvector.get_allocator().allocate(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// construct values in-place on the array:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) myvector.get_allocator().construct(&amp;p[i],i);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The allocated array contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; p[i];</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// destroy and deallocate:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) myvector.get_allocator().destroy(&amp;p[i]);</span><br><span class=\"line\">  myvector.get_allocator().deallocate(p,<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The allocated array contains: 0 1 2 3 4</span><br></pre></td></tr></table></figure><p>注意：deallocate和destory的关系：</p><p>deallocate实现的源码：</p><pre><code>template &lt;class T&gt;\ninline void _deallocate(T* buffer)\n{\n\t::operator delete(buffer);    //为什么不用 delete [] ?  ,operator delete 区别于 delete \n\t                             //operator delete  是一个底层操作符\n}\n</code></pre><p>destory：</p><pre><code>template &lt;class T&gt;\ninline void _destory(T *ptr)\n{\n\tptr-&gt;~T();\n}\n</code></pre><p>destory负责调用类型的析构函数，销毁相应内存上的内容（但销毁后内存地址仍保留）</p><p>deallocate负责释放内存（此时相应内存中的值在此之前应调用destory销毁，将内存地址返回给系统，代表这部分地址使用引用-1）</p><h4 id=\"relational-operators-vector\"><a class=\"markdownIt-Anchor\" href=\"#relational-operators-vector\"></a> relational operators (vector)</h4><h4 id=\"swap-vector\"><a class=\"markdownIt-Anchor\" href=\"#swap-vector\"></a> swap (vector)</h4><h4 id=\"vector-bool\"><a class=\"markdownIt-Anchor\" href=\"#vector-bool\"></a> vector<bool></bool></h4><h3 id=\"deque\"><a class=\"markdownIt-Anchor\" href=\"#deque\"></a> deque</h3><p>deque（['dek]）（双端队列）是double-ended queue 的一个不规则缩写。deque是具有动态大小的序列容器，可以在两端（前端或后端）扩展或收缩。</p><p>特定的库可以以不同的方式实现deques，通常作为某种形式的动态数组。但是在任何情况下，它们都允许通过随机访问迭代器直接访问各个元素，通过根据需要扩展和收缩容器来自动处理存储。</p><p>因此，它们提供了类似于vector的功能，但是在序列的开始部分也可以高效地插入和删除元素，而不仅仅是在结尾。但是，与vector不同，deques并不保证将其所有元素存储在连续的存储位置：deque通过偏移指向另一个元素的指针访问元素会导致未定义的行为。</p><p>两个vector和deques提供了一个非常相似的接口，可以用于类似的目的，但内部工作方式完全不同：虽然vector使用单个数组需要偶尔重新分配以增长，但是deque的元素可以分散在不同的块的容器，容器在内部保存必要的信息以提供对其任何元素的持续时间和统一的顺序接口（通过迭代器）的直接访问。因此，deques在内部比vector更复杂一点，但是这使得他们在某些情况下更有效地增长，尤其是在重新分配变得更加昂贵的很长序列的情况下。</p><p>对于频繁插入或删除开始或结束位置以外的元素的操作，deques表现得更差，并且与列表和转发列表相比，迭代器和引用的一致性更低。</p><p>deque上常见操作的复杂性（效率）如下：</p><ul><li>随机访问 - 常数O(1)</li><li>在结尾或开头插入或移除元素 - 摊销不变O(1)</li><li>插入或移除元素 - 线性O(n)</li></ul><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Alloc</span> = <span class=\"title\">allocator</span>&lt;T&gt; &gt; <span class=\"title\">class</span> <span class=\"title\">deque</span>;</span></span><br></pre></td></tr></table></figure><p><img src=\"http://img.blog.csdn.net/20170727225856144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRlg2Nzc1ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br><img src=\"https://images0.cnblogs.com/blog/559453/201401/092150340824.png\" alt></p><h4 id=\"dequedeque\"><a class=\"markdownIt-Anchor\" href=\"#dequedeque\"></a> deque::deque</h4><p>构造一个deque容器对象，根据所使用的构造函数版本初始化它的内容：</p><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// constructors used in the same order as described above:</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; first;                                <span class=\"comment\">// empty deque of ints</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">second</span> <span class=\"params\">(<span class=\"number\">4</span>,<span class=\"number\">100</span>)</span></span>;                       <span class=\"comment\">// four ints with value 100</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">third</span> <span class=\"params\">(second.begin(),second.end())</span></span>;  <span class=\"comment\">// iterating through second</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">fourth</span> <span class=\"params\">(third)</span></span>;                       <span class=\"comment\">// a copy of third</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// the iterator constructor can be used to copy arrays:</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> myints[] = &#123;<span class=\"number\">16</span>,<span class=\"number\">2</span>,<span class=\"number\">77</span>,<span class=\"number\">29</span>&#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">fifth</span> <span class=\"params\">(myints, myints + <span class=\"keyword\">sizeof</span>(myints) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) )</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The contents of fifth are:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = fifth.begin(); it!=fifth.end(); ++it)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The contents of fifth are: 16 2 77 29</span><br></pre></td></tr></table></figure><h4 id=\"dequepush_back\"><a class=\"markdownIt-Anchor\" href=\"#dequepush_back\"></a> deque::push_back</h4><p>在当前的最后一个元素之后 ，在deque容器的末尾添加一个新元素。val的内容被复制（或移动）到新的元素。</p><p>这有效地增加了一个容器的大小。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_back</span> <span class=\"params\">(<span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_back</span> <span class=\"params\">(value_type&amp;&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; mydeque;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> myint;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Please enter some integers (enter 0 to end):\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span> &gt;&gt; myint;</span><br><span class=\"line\">    mydeque.push_back (myint);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (myint);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mydeque stores \"</span> &lt;&lt; (<span class=\"keyword\">int</span>) mydeque.size() &lt;&lt; <span class=\"string\">\" numbers.\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"dequepush_front\"><a class=\"markdownIt-Anchor\" href=\"#dequepush_front\"></a> deque::push_front</h4><p>在deque容器的开始位置插入一个新的元素，位于当前的第一个元素之前。val的内容被复制（或移动）到插入的元素。</p><p>这有效地增加了一个容器的大小。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_front</span> <span class=\"params\">(<span class=\"keyword\">const</span> value_type&amp; val)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_front</span> <span class=\"params\">(value_type&amp;&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">mydeque</span> <span class=\"params\">(<span class=\"number\">2</span>,<span class=\"number\">100</span>)</span></span>;     <span class=\"comment\">// two ints with a value of 100</span></span><br><span class=\"line\">  mydeque.push_front (<span class=\"number\">200</span>);</span><br><span class=\"line\">  mydeque.push_front (<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mydeque contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = mydeque.begin(); it != mydeque.end(); ++it)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; *it;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">300 200 100 100</span><br></pre></td></tr></table></figure><h4 id=\"dequepop_back\"><a class=\"markdownIt-Anchor\" href=\"#dequepop_back\"></a> deque::pop_back</h4><p>删除deque容器中的最后一个元素，有效地将容器大小减少一个。</p><p>这破坏了被删除的元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; mydeque;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span> <span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">  mydeque.push_back (<span class=\"number\">10</span>);</span><br><span class=\"line\">  mydeque.push_back (<span class=\"number\">20</span>);</span><br><span class=\"line\">  mydeque.push_back (<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!mydeque.empty())</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sum+=mydeque.back();</span><br><span class=\"line\">    mydeque.pop_back();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The elements of mydeque add up to \"</span> &lt;&lt; sum &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The elements of mydeque add up to 60</span><br></pre></td></tr></table></figure><h4 id=\"dequepop_front\"><a class=\"markdownIt-Anchor\" href=\"#dequepop_front\"></a> deque::pop_front</h4><p>删除deque容器中的第一个元素，有效地减小其大小。</p><p>这破坏了被删除的元素。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop_front</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; mydeque;</span><br><span class=\"line\"></span><br><span class=\"line\">  mydeque.push_back (<span class=\"number\">100</span>);</span><br><span class=\"line\">  mydeque.push_back (<span class=\"number\">200</span>);</span><br><span class=\"line\">  mydeque.push_back (<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Popping out the elements in mydeque:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!mydeque.empty())</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; mydeque.front();</span><br><span class=\"line\">    mydeque.pop_front();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\nThe final size of mydeque is \"</span> &lt;&lt; <span class=\"keyword\">int</span>(mydeque.size()) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Popping out the elements in mydeque: 100 200 300</span><br><span class=\"line\">The final size of mydeque is 0</span><br></pre></td></tr></table></figure><h4 id=\"dequeemplace_front\"><a class=\"markdownIt-Anchor\" href=\"#dequeemplace_front\"></a> deque::emplace_front</h4><p>在deque的开头插入一个新的元素，就在其当前的第一个元素之前。这个新的元素是用args作为构建的参数来构建的。</p><p>这有效地增加了一个容器的大小。</p><p>该元素是通过调用allocator_traits::construct来转换args来创建的。</p><p>存在一个类似的成员函数push_front，它可以将现有对象复制或移动到容器中。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">emplace_front</span> (<span class=\"title\">Args</span>&amp;&amp;... <span class=\"title\">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; mydeque = &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  mydeque.emplace_front (<span class=\"number\">111</span>);</span><br><span class=\"line\">  mydeque.emplace_front (<span class=\"number\">222</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mydeque contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; x: mydeque)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mydeque contains: 222 111 10 20 30</span><br></pre></td></tr></table></figure><h4 id=\"dequeemplace_back\"><a class=\"markdownIt-Anchor\" href=\"#dequeemplace_back\"></a> deque::emplace_back</h4><p>在deque的末尾插入一个新的元素，紧跟在当前的最后一个元素之后。这个新的元素是用args作为构建的参数来构建的。</p><p>这有效地增加了一个容器的大小。</p><p>该元素是通过调用allocator_traits::construct来转换args来创建的。</p><p>存在一个类似的成员函数push_back，它可以将现有对象复制或移动到容器中</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">emplace_back</span> (<span class=\"title\">Args</span>&amp;&amp;... <span class=\"title\">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; mydeque = &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  mydeque.emplace_back (<span class=\"number\">100</span>);</span><br><span class=\"line\">  mydeque.emplace_back (<span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mydeque contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; x: mydeque)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mydeque contains: 10 20 30 100 200</span><br></pre></td></tr></table></figure><h3 id=\"forward_list\"><a class=\"markdownIt-Anchor\" href=\"#forward_list\"></a> forward_list</h3><p>forward_list（单向链表）是序列容器，允许在序列中的任何地方进行恒定的时间插入和擦除操作。</p><p>forward_list（单向链表）被实现为单链表; 单链表可以将它们包含的每个元素存储在不同和不相关的存储位置中。通过关联到序列中下一个元素的链接的每个元素来保留排序。forward_list容器和列表</p><p>之间的主要设计区别容器是第一个内部只保留一个到下一个元素的链接，而后者每个元素保留两个链接：一个指向下一个元素，一个指向前一个元素，允许在两个方向上有效的迭代，但是每个元素消耗额外的存储空间并且插入和移除元件的时间开销略高。因此，forward_list对象比列表对象更有效率，尽管它们只能向前迭代。</p><p>与其他基本的标准序列容器（array，vector和deque），forward_list通常在插入，提取和移动容器内任何位置的元素方面效果更好，因此也适用于密集使用这些元素的算法，如排序算法。</p><p>的主要缺点修饰符Modifiers S和列表相比这些其它序列容器s是说，他们缺乏可以通过位置的元素的直接访问; 例如，要访问forward_list中的第六个元素，必须从开始位置迭代到该位置，这需要在这些位置之间的线性时间。它们还消耗一些额外的内存来保持与每个元素相关联的链接信息（这可能是大型小元素列表的重要因素）。</p><p>该修饰符Modifiersclass模板的设计考虑到效率：按照设计，它与简单的手写C型单链表一样高效，实际上是唯一的标准容器，为了效率的考虑故意缺少尺寸成员函数：由于其性质作为一个链表，具有一个需要一定时间的大小的成员将需要它保持一个内部计数器的大小（如列表所示）。这会消耗一些额外的存储空间，并使插入和删除操作效率稍低。要获取forward_list对象的大小，可以使用距离算法的开始和结束，这是一个需要线性时间的操作。</p><p><img src=\"http://img.blog.csdn.net/20160407212133266\" alt></p><h4 id=\"forward_listforward_list\"><a class=\"markdownIt-Anchor\" href=\"#forward_listforward_list\"></a> forward_list::forward_list</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span> (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">forward_list</span> <span class=\"params\">(<span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class=\"line\">fill (<span class=\"number\">2</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">forward_list</span> <span class=\"params\">(size_type n)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">forward_list</span> <span class=\"params\">(size_type n, <span class=\"keyword\">const</span> value_type&amp; val,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class=\"line\">range (<span class=\"number\">3</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputIterator</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">forward_list</span> (<span class=\"title\">InputIterator</span> <span class=\"title\">first</span>, <span class=\"title\">InputIterator</span> <span class=\"title\">last</span>,</span></span><br><span class=\"line\"><span class=\"class\">                <span class=\"title\">const</span> <span class=\"title\">allocator_type</span>&amp; <span class=\"title\">alloc</span> = <span class=\"title\">allocator_type</span>());</span></span><br><span class=\"line\">copy (<span class=\"number\">4</span>)\t</span><br><span class=\"line\">forward_list (<span class=\"keyword\">const</span> forward_list&amp; fwdlst);</span><br><span class=\"line\">forward_list (<span class=\"keyword\">const</span> forward_list&amp; fwdlst, <span class=\"keyword\">const</span> allocator_type&amp; alloc);</span><br><span class=\"line\">move (<span class=\"number\">5</span>)\t</span><br><span class=\"line\">forward_list (forward_list&amp;&amp; fwdlst);</span><br><span class=\"line\">forward_list (forward_list&amp;&amp; fwdlst, <span class=\"keyword\">const</span> allocator_type&amp; alloc);</span><br><span class=\"line\"><span class=\"function\">initializer <span class=\"title\">list</span> <span class=\"params\">(<span class=\"number\">6</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">forward_list</span> <span class=\"params\">(<span class=\"built_in\">initializer_list</span>&lt;value_type&gt; il,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              <span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;forward_list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// constructors used in the same order as described above:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; first;                      <span class=\"comment\">// default: empty</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">second</span> <span class=\"params\">(<span class=\"number\">3</span>,<span class=\"number\">77</span>)</span></span>;              <span class=\"comment\">// fill: 3 seventy-sevens</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">third</span> <span class=\"params\">(second.begin(), second.end())</span></span>; <span class=\"comment\">// range initialization</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">fourth</span> <span class=\"params\">(third)</span></span>;            <span class=\"comment\">// copy constructor</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">fifth</span> <span class=\"params\">(<span class=\"built_in\">std</span>::move(fourth))</span></span>;  <span class=\"comment\">// move ctor. (fourth wasted)</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; sixth = &#123;<span class=\"number\">3</span>, <span class=\"number\">52</span>, <span class=\"number\">25</span>, <span class=\"number\">90</span>&#125;;    <span class=\"comment\">// initializer_list constructor</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"first:\"</span> ; <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x: first)  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"second:\"</span>; <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x: second) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"third:\"</span>;  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x: third)  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"fourth:\"</span>; <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x: fourth) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"fifth:\"</span>;  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x: fifth)  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sixth:\"</span>;  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>&amp; x: sixth)  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x; <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Possible output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forward_list constructor examples:</span><br><span class=\"line\">first:</span><br><span class=\"line\">second: 77 77 77</span><br><span class=\"line\">third: 77 77 77</span><br><span class=\"line\">fourth:</span><br><span class=\"line\">fifth: 77 77 77</span><br><span class=\"line\">sixth: 3 52 25 90</span><br></pre></td></tr></table></figure><h4 id=\"forward_list~forward_list\"><a class=\"markdownIt-Anchor\" href=\"#forward_list~forward_list\"></a> forward_list::~forward_list</h4><h4 id=\"forward_listbefore_begin\"><a class=\"markdownIt-Anchor\" href=\"#forward_listbefore_begin\"></a> forward_list::before_begin</h4><p>返回指向容器中第一个元素之前的位置的迭代器。</p><p>返回的迭代器不应被解除引用：它是为了用作成员函数的参数emplace_after，insert_after，erase_after或splice_after，指定序列，其中执行该动作的位置的开始位置。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">before_begin</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">before_begin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;forward_list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; mylist = &#123;<span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  mylist.insert_after ( mylist.before_begin(), <span class=\"number\">11</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mylist contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span>&amp; x: mylist ) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mylist contains: 11 20 30 40 50</span><br></pre></td></tr></table></figure><h4 id=\"forward_listcbefore_begin\"><a class=\"markdownIt-Anchor\" href=\"#forward_listcbefore_begin\"></a> forward_list::cbefore_begin</h4><p>返回指向容器中第一个元素之前的位置的const_iterator。</p><p>一个常量性是指向常量内容的迭代器。这个迭代器可以增加和减少（除非它本身也是const），就像forward_list::before_begin返回的迭代器一样，但不能用来修改它指向的内容。</p><p>返回的价值不得解除引用。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">cbefore_begin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;forward_list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; mylist = &#123;<span class=\"number\">77</span>, <span class=\"number\">2</span>, <span class=\"number\">16</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  mylist.insert_after ( mylist.cbefore_begin(), <span class=\"number\">19</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mylist contains:\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span>&amp; x: mylist ) <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; x;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mylist contains: 19 77 2 16</span><br></pre></td></tr></table></figure><h3 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\"></a> list</h3><h3 id=\"stack\"><a class=\"markdownIt-Anchor\" href=\"#stack\"></a> stack</h3><h3 id=\"queue\"><a class=\"markdownIt-Anchor\" href=\"#queue\"></a> queue</h3><h3 id=\"priority_queue\"><a class=\"markdownIt-Anchor\" href=\"#priority_queue\"></a> priority_queue</h3><h3 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\"></a> set</h3><h3 id=\"multiset\"><a class=\"markdownIt-Anchor\" href=\"#multiset\"></a> multiset</h3><h3 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\"></a> map</h3><p>map 是关联容器，按照特定顺序存储由 key value (键值) 和 mapped value (映射值) 组合形成的元素。</p><p>在映射中，键值通常用于对元素进行排序和唯一标识，而映射的值存储与此键关联的内容。该类型的键和映射的值可能不同，并且在部件类型被分组在一起VALUE_TYPE，这是一种对类型结合两种：</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">const</span> Key, T&gt; value_type;</span><br></pre></td></tr></table></figure><p>在内部，映射中的元素总是按照由其内部比较对象（比较类型）指示的特定的严格弱排序标准按键排序。映射容器通常比unordered_map容器慢，以通过它们的键来访问各个元素，但是它们允许基于它们的顺序对子集进行直接迭代。 在该映射值地图可以直接通过使用其相应的键来访问括号运算符（（操作符[] ）。 映射通常如实施</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Key</span>,                                     // <span class=\"title\">map</span>:</span>:key_type</span><br><span class=\"line\">           <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>,                                       // <span class=\"title\">map</span>:</span>:mapped_type</span><br><span class=\"line\">           <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Compare</span> = <span class=\"title\">less</span>&lt;Key&gt;,                     // <span class=\"title\">map</span>:</span>:key_compare</span><br><span class=\"line\">           <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span> = <span class=\"title\">allocator</span>&lt;pair&lt;const Key,T&gt; &gt;    // <span class=\"title\">map</span>:</span>:allocator_type</span><br><span class=\"line\">           &gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">map</span>;</span></span><br></pre></td></tr></table></figure><h4 id=\"mapmap\"><a class=\"markdownIt-Anchor\" href=\"#mapmap\"></a> map::map</h4><p>构造一个映射容器对象，根据所使用的构造器版本初始化其内容：</p><p>（1）空容器构造函数（默认构造函数）</p><p>构造一个空的容器，没有元素。</p><p>（2）范围构造函数</p><p>构造具有一样多的元素的范围内的容器[第一，最后一个），其中每个元件布设构造的从在该范围内它的相应的元件。</p><p>（3）复制构造函数（并用分配器复制）</p><p>使用x中的每个元素的副本构造一个容器。</p><p>（4）移动构造函数（并与分配器一起移动）</p><p>构造一个获取x元素的容器。<br>如果指定了alloc并且与x的分配器不同，那么元素将被移动。否则，没有构建元素（他们的所有权直接转移）。<br>x保持未指定但有效的状态。</p><p>（5）初始化列表构造函数</p><p>用il中的每个元素的副本构造一个容器。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">empty (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">map</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_compare&amp; comp = key_compare(),</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              <span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">map</span> <span class=\"params\">(<span class=\"keyword\">const</span> allocator_type&amp; alloc)</span></span>;</span><br><span class=\"line\">range (<span class=\"number\">2</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputIterator</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">map</span> (<span class=\"title\">InputIterator</span> <span class=\"title\">first</span>, <span class=\"title\">InputIterator</span> <span class=\"title\">last</span>,</span></span><br><span class=\"line\"><span class=\"class\">       <span class=\"title\">const</span> <span class=\"title\">key_compare</span>&amp; <span class=\"title\">comp</span> = <span class=\"title\">key_compare</span>(),</span></span><br><span class=\"line\"><span class=\"class\">       <span class=\"title\">const</span> <span class=\"title\">allocator_type</span>&amp; = <span class=\"title\">allocator_type</span>());</span></span><br><span class=\"line\">copy (<span class=\"number\">3</span>)\t</span><br><span class=\"line\"><span class=\"built_in\">map</span> (<span class=\"keyword\">const</span> <span class=\"built_in\">map</span>&amp; x);</span><br><span class=\"line\"><span class=\"built_in\">map</span> (<span class=\"keyword\">const</span> <span class=\"built_in\">map</span>&amp; x, <span class=\"keyword\">const</span> allocator_type&amp; alloc);</span><br><span class=\"line\">move (<span class=\"number\">4</span>)\t</span><br><span class=\"line\"><span class=\"built_in\">map</span> (<span class=\"built_in\">map</span>&amp;&amp; x);</span><br><span class=\"line\"><span class=\"built_in\">map</span> (<span class=\"built_in\">map</span>&amp;&amp; x, <span class=\"keyword\">const</span> allocator_type&amp; alloc);</span><br><span class=\"line\"><span class=\"function\">initializer <span class=\"title\">list</span> <span class=\"params\">(<span class=\"number\">5</span>)</span>\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">map</span> <span class=\"params\">(<span class=\"built_in\">initializer_list</span>&lt;value_type&gt; il,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">     <span class=\"keyword\">const</span> key_compare&amp; comp = key_compare(),</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">     <span class=\"keyword\">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">fncomp</span> <span class=\"params\">(<span class=\"keyword\">char</span> lhs, <span class=\"keyword\">char</span> rhs)</span> </span>&#123;<span class=\"keyword\">return</span> lhs&lt;rhs;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">classcomp</span> &#123;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>&amp; lhs, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>&amp; rhs)</span> <span class=\"keyword\">const</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;<span class=\"keyword\">return</span> lhs&lt;rhs;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; first;</span><br><span class=\"line\"></span><br><span class=\"line\">  first[<span class=\"string\">'a'</span>]=<span class=\"number\">10</span>;</span><br><span class=\"line\">  first[<span class=\"string\">'b'</span>]=<span class=\"number\">30</span>;</span><br><span class=\"line\">  first[<span class=\"string\">'c'</span>]=<span class=\"number\">50</span>;</span><br><span class=\"line\">  first[<span class=\"string\">'d'</span>]=<span class=\"number\">70</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::map&lt;char,int&gt; second (first.begin(),first.end());</span><br><span class=\"line\"></span><br><span class=\"line\">  std::map&lt;char,int&gt; third (second);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>,classcomp&gt; fourth;                 <span class=\"comment\">// class as Compare</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">bool</span>(*fn_pt)(<span class=\"keyword\">char</span>,<span class=\"keyword\">char</span>) = fncomp;</span><br><span class=\"line\">  std::map&lt;char,int,bool(*)(char,char)&gt; fifth (fn_pt); // function pointer as Compare</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"mapbegin\"><a class=\"markdownIt-Anchor\" href=\"#mapbegin\"></a> map::begin</h4><p>返回引用map容器中第一个元素的迭代器。</p><p>由于map容器始终保持其元素的顺序，所以开始指向遵循容器排序标准的元素。</p><p>如果容器是空的，则返回的迭代器值不应被解除引用。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'b'</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'a'</span>] = <span class=\"number\">200</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'c'</span>] = <span class=\"number\">300</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// show content:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D;&gt; 200</span><br><span class=\"line\">b &#x3D;&gt; 100</span><br><span class=\"line\">c &#x3D;&gt; 300</span><br></pre></td></tr></table></figure><h4 id=\"mapkey_comp\"><a class=\"markdownIt-Anchor\" href=\"#mapkey_comp\"></a> map::key_comp</h4><p>返回容器用于比较键的比较对象的副本。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">key_compare <span class=\"title\">key_comp</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::key_compare mycomp = mymap.key_comp();</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'a'</span>]=<span class=\"number\">100</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'b'</span>]=<span class=\"number\">200</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'c'</span>]=<span class=\"number\">300</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mymap contains:\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">char</span> highest = mymap.rbegin()-&gt;first;     <span class=\"comment\">// key value of last element</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator it = mymap.begin();</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> ( mycomp((*it++).first, highest) );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mymap contains:</span><br><span class=\"line\">a &#x3D;&gt; 100</span><br><span class=\"line\">b &#x3D;&gt; 200</span><br><span class=\"line\">c &#x3D;&gt; 300</span><br></pre></td></tr></table></figure><h4 id=\"mapvalue_comp\"><a class=\"markdownIt-Anchor\" href=\"#mapvalue_comp\"></a> map::value_comp</h4><p>返回可用于比较两个元素的比较对象，以获取第一个元素的键是否在第二个元素之前。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">value_compare <span class=\"title\">value_comp</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'x'</span>]=<span class=\"number\">1001</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'y'</span>]=<span class=\"number\">2002</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'z'</span>]=<span class=\"number\">3003</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mymap contains:\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::pair&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; highest = *mymap.rbegin();          <span class=\"comment\">// last element</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator it = mymap.begin();</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> ( mymap.value_comp()(*it++, highest) );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mymap contains:</span><br><span class=\"line\">x &#x3D;&gt; 1001</span><br><span class=\"line\">y &#x3D;&gt; 2002</span><br><span class=\"line\">z &#x3D;&gt; 3003</span><br></pre></td></tr></table></figure><h4 id=\"mapfind\"><a class=\"markdownIt-Anchor\" href=\"#mapfind\"></a> map::find</h4><p>在容器中搜索具有等于k的键的元素，如果找到则返回一个迭代器，否则返回map::end的迭代器。</p><p>如果容器的比较对象自反地返回假（即，不管元素作为参数传递的顺序），则两个key被认为是等同的。</p><p>另一个成员函数map::count可以用来检查一个特定的键是否存在。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">find</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">find</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator it;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'a'</span>]=<span class=\"number\">50</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'b'</span>]=<span class=\"number\">100</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'c'</span>]=<span class=\"number\">150</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'d'</span>]=<span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  it = mymap.find(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (it != mymap.end())</span><br><span class=\"line\">    mymap.erase (it);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// print content:</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"elements in mymap:\"</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a =&gt; \"</span> &lt;&lt; mymap.find(<span class=\"string\">'a'</span>)-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"c =&gt; \"</span> &lt;&lt; mymap.find(<span class=\"string\">'c'</span>)-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"d =&gt; \"</span> &lt;&lt; mymap.find(<span class=\"string\">'d'</span>)-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elements in mymap:</span><br><span class=\"line\">a &#x3D;&gt; 50</span><br><span class=\"line\">c &#x3D;&gt; 150</span><br><span class=\"line\">d &#x3D;&gt; 200</span><br></pre></td></tr></table></figure><h4 id=\"mapcount\"><a class=\"markdownIt-Anchor\" href=\"#mapcount\"></a> map::count</h4><p>在容器中搜索具有等于k的键的元素，并返回匹配的数量。</p><p>由于地图容器中的所有元素都是唯一的，因此该函数只能返回1（如果找到该元素）或返回零（否则）。</p><p>如果容器的比较对象自反地返回错误（即，不管按键作为参数传递的顺序），则两个键被认为是等同的。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">size_type <span class=\"title\">count</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> c;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap [<span class=\"string\">'a'</span>]=<span class=\"number\">101</span>;</span><br><span class=\"line\">  mymap [<span class=\"string\">'c'</span>]=<span class=\"number\">202</span>;</span><br><span class=\"line\">  mymap [<span class=\"string\">'f'</span>]=<span class=\"number\">303</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (c=<span class=\"string\">'a'</span>; c&lt;<span class=\"string\">'h'</span>; c++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; c;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mymap.count(c)&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" is an element of mymap.\\n\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" is not an element of mymap.\\n\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a is an element of mymap.</span><br><span class=\"line\">b is not an element of mymap.</span><br><span class=\"line\">c is an element of mymap.</span><br><span class=\"line\">d is not an element of mymap.</span><br><span class=\"line\">e is not an element of mymap.</span><br><span class=\"line\">f is an element of mymap.</span><br><span class=\"line\">g is not an element of mymap.</span><br></pre></td></tr></table></figure><h4 id=\"maplower_bound\"><a class=\"markdownIt-Anchor\" href=\"#maplower_bound\"></a> map::lower_bound</h4><p>将迭代器返回到下限</p><p>返回指向容器中第一个元素的迭代器，该元素的键不会在k之前出现（即，它是等价的或者在其后）。</p><p>该函数使用其内部比较对象（key_comp）来确定这一点，将迭代器返回到key_comp（element_key，k）将返回false的第一个元素。</p><p>如果map类用默认的比较类型（less）实例化，则函数返回一个迭代器到第一个元素，其键不小于k。</p><p>一个类似的成员函数upper_bound具有相同的行为lower_bound，除非映射包含一个key值等于k的元素：在这种情况下，lower_bound返回指向该元素的迭代器，而upper_bound返回指向下一个元素的迭代器。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">lower_bound</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">lower_bound</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator itlow,itup;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'a'</span>]=<span class=\"number\">20</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'b'</span>]=<span class=\"number\">40</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'c'</span>]=<span class=\"number\">60</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'d'</span>]=<span class=\"number\">80</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'e'</span>]=<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  itlow=mymap.lower_bound (<span class=\"string\">'b'</span>);  <span class=\"comment\">// itlow points to b</span></span><br><span class=\"line\">  itup=mymap.upper_bound (<span class=\"string\">'d'</span>);   <span class=\"comment\">// itup points to e (not d!)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  mymap.erase(itlow,itup);        <span class=\"comment\">// erases [itlow,itup)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// print content:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D;&gt; 20</span><br><span class=\"line\">e &#x3D;&gt; 100</span><br></pre></td></tr></table></figure><h4 id=\"mapupper_bound\"><a class=\"markdownIt-Anchor\" href=\"#mapupper_bound\"></a> map::upper_bound</h4><p>将迭代器返回到上限</p><p>返回一个指向容器中第一个元素的迭代器，它的关键字被认为是在k之后。</p><p>该函数使用其内部比较对象（key_comp）来确定这一点，将迭代器返回到key_comp（k，element_key）将返回true的第一个元素。</p><p>如果map类用默认的比较类型（less）实例化，则函数返回一个迭代器到第一个元素，其键大于k。</p><p>类似的成员函数lower_bound具有与upper_bound相同的行为，除了map包含一个元素，其键值等于k：在这种情况下，lower_bound返回指向该元素的迭代器，而upper_bound返回指向下一个元素的迭代器。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\">iterator <span class=\"title\">upper_bound</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">upper_bound</span> <span class=\"params\">(<span class=\"keyword\">const</span> key_type&amp; k)</span> <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator itlow,itup;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'a'</span>]=<span class=\"number\">20</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'b'</span>]=<span class=\"number\">40</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'c'</span>]=<span class=\"number\">60</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'d'</span>]=<span class=\"number\">80</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'e'</span>]=<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  itlow=mymap.lower_bound (<span class=\"string\">'b'</span>);  <span class=\"comment\">// itlow points to b</span></span><br><span class=\"line\">  itup=mymap.upper_bound (<span class=\"string\">'d'</span>);   <span class=\"comment\">// itup points to e (not d!)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  mymap.erase(itlow,itup);        <span class=\"comment\">// erases [itlow,itup)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// print content:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D;&gt; 20</span><br><span class=\"line\">e &#x3D;&gt; 100</span><br></pre></td></tr></table></figure><h4 id=\"mapequal_range\"><a class=\"markdownIt-Anchor\" href=\"#mapequal_range\"></a> map::equal_range</h4><p>获取相同元素的范围</p><p>返回包含容器中所有具有与k等价的键的元素的范围边界。 由于地图容器中的元素具有唯一键，所以返回的范围最多只包含一个元素。</p><p>如果没有找到匹配，则返回的范围具有零的长度，与两个迭代器指向具有考虑去后一个密钥对所述第一元件ķ根据容器的内部比较对象（key_comp）。如果容器的比较对象返回false，则两个键被认为是等价的。</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pair&lt;const_iterator,const_iterator&gt; equal_range (const key_type&amp; k) const;</span><br><span class=\"line\">pair&lt;iterator,iterator&gt;             equal_range (const key_type&amp; k);</span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; mymap;</span><br><span class=\"line\"></span><br><span class=\"line\">  mymap[<span class=\"string\">'a'</span>]=<span class=\"number\">10</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'b'</span>]=<span class=\"number\">20</span>;</span><br><span class=\"line\">  mymap[<span class=\"string\">'c'</span>]=<span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::pair&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator,<span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt;::iterator&gt; ret;</span><br><span class=\"line\">  ret = mymap.equal_range(<span class=\"string\">'b'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"lower bound points to: \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; ret.first-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; ret.first-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"upper bound points to: \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; ret.second-&gt;first &lt;&lt; <span class=\"string\">\" =&gt; \"</span> &lt;&lt; ret.second-&gt;second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lower bound points to: &#39;b&#39; &#x3D;&gt; 20</span><br><span class=\"line\">upper bound points to: &#39;c&#39; &#x3D;&gt; 30</span><br></pre></td></tr></table></figure><h3 id=\"multimap\"><a class=\"markdownIt-Anchor\" href=\"#multimap\"></a> multimap</h3><h3 id=\"无序容器unordered-containerunordered_set-unordered_multiset-unordered_map-unordered_multimap\"><a class=\"markdownIt-Anchor\" href=\"#无序容器unordered-containerunordered_set-unordered_multiset-unordered_map-unordered_multimap\"></a> 无序容器（Unordered Container）：unordered_set、unordered_multiset、unordered_map、unordered_multimap</h3><p>包括：</p><ul><li>unordered_set</li><li>unordered_multiset</li><li>unordered_map</li><li>unordered_multimap</li></ul><p>都是以哈希表实现的。</p><p><img src=\"http://img.blog.csdn.net/20160410123436394\" alt></p><p>unordered_set、unodered_multiset结构：</p><p><img src=\"http://img.blog.csdn.net/20160410123518692\" alt></p><p>unordered_map、unodered_multimap结构：</p><p><img src=\"http://img.blog.csdn.net/20160410123525739\" alt></p><h3 id=\"unordered_set\"><a class=\"markdownIt-Anchor\" href=\"#unordered_set\"></a> unordered_set</h3><h3 id=\"unordered_multiset\"><a class=\"markdownIt-Anchor\" href=\"#unordered_multiset\"></a> unordered_multiset</h3><h3 id=\"unordered_map\"><a class=\"markdownIt-Anchor\" href=\"#unordered_map\"></a> unordered_map</h3><h3 id=\"unordered_multimap\"><a class=\"markdownIt-Anchor\" href=\"#unordered_multimap\"></a> unordered_multimap</h3><h3 id=\"tuple\"><a class=\"markdownIt-Anchor\" href=\"#tuple\"></a> tuple</h3><p>元组是一个能够容纳元素集合的对象。每个元素可以是不同的类型。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Types</span>&gt; <span class=\"title\">class</span> <span class=\"title\">tuple</span>;</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;     // std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tuple&gt;        // std::tuple, std::get, std::tie, std::ignore</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  std::tuple&lt;int,char&gt; foo (10,'x');</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> bar = <span class=\"built_in\">std</span>::make_tuple (<span class=\"string\">\"test\"</span>, <span class=\"number\">3.1</span>, <span class=\"number\">14</span>, <span class=\"string\">'y'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">2</span>&gt;(bar) = <span class=\"number\">100</span>;                                    <span class=\"comment\">// access element</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> myint; <span class=\"keyword\">char</span> mychar;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::tie (myint, mychar) = foo;                            <span class=\"comment\">// unpack elements</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::tie (<span class=\"built_in\">std</span>::ignore, <span class=\"built_in\">std</span>::ignore, myint, mychar) = bar;  <span class=\"comment\">// unpack (with ignore)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  mychar = <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">3</span>&gt;(bar);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(foo) = <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">2</span>&gt;(bar);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">1</span>&gt;(foo) = mychar;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"foo contains: \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(foo) &lt;&lt; <span class=\"string\">' '</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">1</span>&gt;(foo) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo contains: 100 y</span><br></pre></td></tr></table></figure><h4 id=\"tupletuple\"><a class=\"markdownIt-Anchor\" href=\"#tupletuple\"></a> tuple::tuple</h4><p>构建一个 tuple（元组）对象。</p><p>这涉及单独构建其元素，初始化取决于调用的构造函数形式：</p><p>（1）默认的构造函数</p><p>构建一个 元组对象的元素值初始化。</p><p>（2）复制/移动构造函数</p><p>该对象使用tpl的内容进行初始化 元组目的。tpl<br>的相应元素被传递给每个元素的构造函数。</p><p>（3）隐式转换构造函数</p><p>同上。tpl中的<br>所有类型都可以隐含地转换为构造中它们各自元素的类型元组 目的。</p><p>（4）初始化构造函数<br>用elems中的相应元素初始化每个元素。elems<br>的相应元素被传递给每个元素的构造函数。</p><p>（5）对转换构造函数</p><p>该对象有两个对应于pr.first和的元素pr.second。PR中的所有类型都应该隐含地转换为其中各自元素的类型元组 目的。</p><p>（6）分配器版本</p><p>和上面的版本一样，除了每个元素都是使用allocator alloc构造的。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span> (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"title\">tuple</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">copy / move (<span class=\"number\">2</span>)\t</span><br><span class=\"line\">tuple (<span class=\"keyword\">const</span> tuple&amp; tpl) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">tuple (tuple&amp;&amp; tpl) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"><span class=\"function\">implicit <span class=\"title\">conversion</span> <span class=\"params\">(<span class=\"number\">3</span>)</span>\t</span></span><br><span class=\"line\">template &lt;class... UTypes&gt;</span><br><span class=\"line\">  tuple (<span class=\"keyword\">const</span> tuple&lt;UTypes...&gt;&amp; tpl);</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">UTypes</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">tuple</span>&lt;UTypes...&gt;&amp;&amp; <span class=\"title\">tpl</span>);</span></span><br><span class=\"line\">initialization (<span class=\"number\">4</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">tuple</span> <span class=\"params\">(<span class=\"keyword\">const</span> Types&amp;... elems)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">UTypes</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">explicit</span> <span class=\"title\">tuple</span> (<span class=\"title\">UTypes</span>&amp;&amp;... <span class=\"title\">elems</span>);</span></span><br><span class=\"line\"><span class=\"function\">conversion from <span class=\"title\">pair</span> <span class=\"params\">(<span class=\"number\">5</span>)</span>\t</span></span><br><span class=\"line\">template &lt;class U1, class U2&gt;</span><br><span class=\"line\">  tuple (<span class=\"keyword\">const</span> pair&lt;U1,U2&gt;&amp; pr);</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">U1</span>, <span class=\"title\">class</span> <span class=\"title\">U2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">pair</span>&lt;U1,U2&gt;&amp;&amp; <span class=\"title\">pr</span>);</span></span><br><span class=\"line\">allocator (<span class=\"number\">6</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">const</span> <span class=\"title\">tuple</span>&amp; <span class=\"title\">tpl</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">tuple</span>&amp;&amp; <span class=\"title\">tpl</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>,<span class=\"title\">class</span>... <span class=\"title\">UTypes</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">const</span> <span class=\"title\">tuple</span>&lt;UTypes...&gt;&amp; <span class=\"title\">tpl</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>, <span class=\"title\">class</span>... <span class=\"title\">UTypes</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">tuple</span>&lt;UTypes...&gt;&amp;&amp; <span class=\"title\">tpl</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">const</span> <span class=\"title\">Types</span>&amp;... <span class=\"title\">elems</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>, <span class=\"title\">class</span>... <span class=\"title\">UTypes</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">UTypes</span>&amp;&amp;... <span class=\"title\">elems</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>, <span class=\"title\">class</span> <span class=\"title\">U1</span>, <span class=\"title\">class</span> <span class=\"title\">U2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">const</span> <span class=\"title\">pair</span>&lt;U1,U2&gt;&amp; <span class=\"title\">pr</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>, <span class=\"title\">class</span> <span class=\"title\">U1</span>, <span class=\"title\">class</span> <span class=\"title\">U2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">tuple</span> (<span class=\"title\">allocator_arg_t</span> <span class=\"title\">aa</span>, <span class=\"title\">const</span> <span class=\"title\">Alloc</span>&amp; <span class=\"title\">alloc</span>, <span class=\"title\">pair</span>&lt;U1,U2&gt;&amp;&amp; <span class=\"title\">pr</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;     // std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;utility&gt;      // std::make_pair</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tuple&gt;        // std::tuple, std::make_tuple, std::get</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::tuple&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">char</span>&gt; first;                             <span class=\"comment\">// default</span></span><br><span class=\"line\">  std::tuple&lt;int,char&gt; second (first);                    // copy</span><br><span class=\"line\">  std::tuple&lt;int,char&gt; third (std::make_tuple(20,'b'));   // move</span><br><span class=\"line\">  std::tuple&lt;long,char&gt; fourth (third);                   // implicit conversion</span><br><span class=\"line\">  std::tuple&lt;int,char&gt; fifth (10,'a');                    // initialization</span><br><span class=\"line\">  std::tuple&lt;int,char&gt; sixth (std::make_pair(30,'c'));    // from pair / move</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sixth contains: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">0</span>&gt;(sixth);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" and \"</span> &lt;&lt; <span class=\"built_in\">std</span>::get&lt;<span class=\"number\">1</span>&gt;(sixth) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sixth contains: 30 and c</span><br></pre></td></tr></table></figure><h3 id=\"pair\"><a class=\"markdownIt-Anchor\" href=\"#pair\"></a> pair</h3><p>这个类把一对值（values）结合在一起，这些值可能是不同的类型（T1 和 T2）。每个值可以被公有的成员变量first、second访问。</p><p>pair是tuple（元组）的一个特例。</p><p>pair的实现是一个结构体，主要的两个成员变量是first second 因为是使用struct不是class，所以可以直接使用pair的成员变量。</p><p>应用：</p><ul><li>可以将两个类型数据组合成一个如map&lt;key, value&gt;</li><li>当某个函数需要两个返回值时</li></ul><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt; <span class=\"title\">struct</span> <span class=\"title\">pair</span>;</span></span><br></pre></td></tr></table></figure><h4 id=\"pairpair\"><a class=\"markdownIt-Anchor\" href=\"#pairpair\"></a> pair::pair</h4><p>构建一个pair对象。</p><p>这涉及到单独构建它的两个组件对象，初始化依赖于调用的构造器形式：</p><p>（1）默认的构造函数</p><p>构建一个 对对象的元素值初始化。</p><p>（2）复制/移动构造函数（和隐式转换）</p><p>该对象被初始化为pr的内容 对目的。pr<br>的相应成员被传递给每个成员的构造函数。</p><p>（3）初始化构造函数</p><p>会员 第一是由一个和成员构建的第二与b。</p><p>（4）分段构造</p><p>构造成员 first 和 second 到位，传递元素first_args 作为参数的构造函数 first，和元素 second_args 到的构造函数 second 。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span> (<span class=\"number\">1</span>)\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"title\">pair</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">copy / move (<span class=\"number\">2</span>)\t</span><br><span class=\"line\">template&lt;class U, class V&gt; pair (const pair&lt;U,V&gt;&amp; pr);</span><br><span class=\"line\">template&lt;class U, class V&gt; pair (pair&lt;U,V&gt;&amp;&amp; pr);</span><br><span class=\"line\">pair (<span class=\"keyword\">const</span> pair&amp; pr) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">pair (pair&amp;&amp; pr) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">initialization (<span class=\"number\">3</span>)\t</span><br><span class=\"line\">pair (<span class=\"keyword\">const</span> first_type&amp; a, <span class=\"keyword\">const</span> second_type&amp; b);</span><br><span class=\"line\">template&lt;class U, class V&gt; pair (U&amp;&amp; a, V&amp;&amp; b);</span><br><span class=\"line\">piecewise (<span class=\"number\">4</span>)\t</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Args1</span>, <span class=\"title\">class</span>... <span class=\"title\">Args2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">pair</span> (<span class=\"title\">piecewise_construct_t</span> <span class=\"title\">pwc</span>, <span class=\"title\">tuple</span>&lt;Args1...&gt; <span class=\"title\">first_args</span>,</span></span><br><span class=\"line\"><span class=\"class\">                                   <span class=\"title\">tuple</span>&lt;Args2...&gt; <span class=\"title\">second_args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;utility&gt;      // std::pair, std::make_pair</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;       // std::string</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;     // std::cout</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::pair &lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>,<span class=\"keyword\">double</span>&gt; product1;                     <span class=\"comment\">// default constructor</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::pair &lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>,<span class=\"keyword\">double</span>&gt; product2 (<span class=\"string\">\"tomatoes\"</span>,<span class=\"number\">2.30</span>);   <span class=\"comment\">// value init</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::pair &lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>,<span class=\"keyword\">double</span>&gt; product3 (product2);          <span class=\"comment\">// copy constructor</span></span><br><span class=\"line\"></span><br><span class=\"line\">  product1 = <span class=\"built_in\">std</span>::make_pair(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>(<span class=\"string\">\"lightbulbs\"</span>),<span class=\"number\">0.99</span>);   <span class=\"comment\">// using make_pair (move)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  product2.first = <span class=\"string\">\"shoes\"</span>;                  <span class=\"comment\">// the type of first is string</span></span><br><span class=\"line\">  product2.second = <span class=\"number\">39.90</span>;                   <span class=\"comment\">// the type of second is double</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The price of \"</span> &lt;&lt; product1.first &lt;&lt; <span class=\"string\">\" is $\"</span> &lt;&lt; product1.second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The price of \"</span> &lt;&lt; product2.first &lt;&lt; <span class=\"string\">\" is $\"</span> &lt;&lt; product2.second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The price of \"</span> &lt;&lt; product3.first &lt;&lt; <span class=\"string\">\" is $\"</span> &lt;&lt; product3.second &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The price of lightbulbs is $0.99</span><br><span class=\"line\">The price of shoes is $39.9</span><br><span class=\"line\">The price of tomatoes is $2.3</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"}],"tags":[{"name":"数据结构","path":"api/tags/数据结构.json"},{"name":"C++","path":"api/tags/C++.json"}]}