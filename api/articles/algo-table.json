{"title":"algo-table","slug":"algo-table","date":"2020-04-22T04:21:14.000Z","updated":"2020-04-22T12:52:19.612Z","comments":true,"path":"api/articles/algo-table.json","excerpt":null,"covers":["../image/prev.png"],"content":"<!-- build time:Wed Apr 22 2020 20:52:59 GMT+0800 (GMT+08:00) --><h1 id=\"线性表\"><a class=\"markdownIt-Anchor\" href=\"#线性表\"></a> 线性表</h1><p>将具有“一对一”关系的数据“线性”地存储到物理空间中，这种存储结构就称为线性存储结构（简称线性表）。使用线性表存储的数据，如同向数组中存储数据那样，要求数据类型必须一致，也就是说，线性表存储的数据，要么全不都是整形，要么全部都是字符串。一半是整形，另一半是字符串的一组数据无法使用线性表存储。</p><h2 id=\"顺序存储结构和链式存储结构\"><a class=\"markdownIt-Anchor\" href=\"#顺序存储结构和链式存储结构\"></a> 顺序存储结构和链式存储结构</h2><ul><li>将数据依次存储在连续的整块物理空间中，这种存储结构称为顺序存储结构(顺序表)</li><li>数据分散的存储在物理空间中，通过一根线保存着它们之间的逻辑关系，这种存储结构称为链式存储结构(链表)</li></ul><h3 id=\"前驱和后继\"><a class=\"markdownIt-Anchor\" href=\"#前驱和后继\"></a> 前驱和后继</h3><p>数据结构中，一组数据中的每个个体被称为“数据元素”。</p><ul><li>某一元素的左侧相邻元素称为“直接前驱”，位于此元素左侧的所有元素都统称为“前驱元素”；</li><li>某一元素的右侧相邻元素称为“直接后继”，位于此元素右侧的所有元素都统称为“后继元素”；</li></ul><div align=\"center\"><img src=\"../image/prev.png\" width=\"400\"></div><center>图1 前驱和后继</center><h1 id=\"顺序表顺序存储结构及初始化\"><a class=\"markdownIt-Anchor\" href=\"#顺序表顺序存储结构及初始化\"></a> 顺序表(顺序存储结构)及初始化</h1><p>顺序表存储数据时，会提前申请一整块足够大小的物理空间，然后将数据依次存储起来，存储时做到数据元素之间不留一丝缝隙。顺序表存储数据使用的是数组。</p><h2 id=\"顺序表的初始化\"><a class=\"markdownIt-Anchor\" href=\"#顺序表的初始化\"></a> 顺序表的初始化</h2><p>使用顺序表存储数据之前，除了要申请足够大小的物理空间之外，为了方便后期使用表中的数据，顺序表还需要实时记录以下 2 项数据：</p><ul><li>顺序表申请的存储容量</li><li>顺序表的长度，元素的个数</li></ul><p><font color=\"red\">正常状态下，顺序表申请的存储容量要大于顺序表的长度。</font></p><p>自定义顺序表的结构体：C语言实现：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>* head;  <span class=\"comment\">//动态数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length; <span class=\"comment\">//顺序表的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>; <span class=\"comment\">//顺序表分配的存储容量</span></span><br><span class=\"line\">&#125;table;</span><br></pre></td></tr></table></figure><p>建立顺序表需要做如下工作：</p><ul><li>给head动态数据申请足够大小的物理空间；</li><li>给size和length赋初值；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Size 5</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> * head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;</span><br><span class=\"line\">&#125;table;</span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">initTable</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    table t;</span><br><span class=\"line\">    t.head=(<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(Size*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));  <span class=\"comment\">//构造一个空的顺序表，动态申请存储空间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!t.head) <span class=\"comment\">//如果申请失败，作出提示并直接退出程序</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"初始化失败\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.length=<span class=\"number\">0</span>;  <span class=\"comment\">//长度为0</span></span><br><span class=\"line\">    t.<span class=\"built_in\">size</span>=Size;  <span class=\"comment\">//存储空间为Size</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出顺序表中元素的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayTable</span><span class=\"params\">(table t)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;t.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,t.head[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    table t=initTable();</span><br><span class=\"line\">    <span class=\"comment\">//向顺序表中添加元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=Size; i++) &#123;</span><br><span class=\"line\">        t.head[i<span class=\"number\">-1</span>]=i;</span><br><span class=\"line\">        t.length++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"顺序表中存储的元素分别是：\\n\"</span>);</span><br><span class=\"line\">    displayTable(t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"顺序表插入元素\"><a class=\"markdownIt-Anchor\" href=\"#顺序表插入元素\"></a> 顺序表插入元素</h2><p>虽然数据元素插入顺序表中的位置有所不同，但是都使用的是同一种方式去解决，即：通过遍历，找到数据元素要插入的位置，然后做如下两步工作：</p><ul><li>将要插入位置元素以及后续的元素整体向后移动一个位置；</li><li>将元素放到腾出来的位置上；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//插入函数，其中，elem为插入的元素，add为插入到顺序表的位置</span></span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">addTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> elem, <span class=\"keyword\">int</span> add)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断插入本身是否存在问题（如果插入元素位置比整张表的长度+1还大（如果相等，是尾随的情况），或者插入的位置本身不存在，程序作为提示并自动退出）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (add &gt; t.length + <span class=\"number\">1</span> || add &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"插入位置有问题\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//做插入操作时，首先需要看顺序表是否有多余的存储空间提供给插入的元素，如果没有，需要申请</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t.length == t.<span class=\"built_in\">size</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t.head = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">realloc</span>(t.head, (t.<span class=\"built_in\">size</span> + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!t.head)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"存储分配失败\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t.<span class=\"built_in\">size</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//插入操作，需要将从插入位置开始的后续元素，逐个后移</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = t.length - <span class=\"number\">1</span>; i &gt;= add - <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t.head[i + <span class=\"number\">1</span>] = t.head[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//后移完成后，直接将所需插入元素，添加到顺序表的相应位置</span></span><br><span class=\"line\">    t.head[add - <span class=\"number\">1</span>] = elem;</span><br><span class=\"line\">    <span class=\"comment\">//由于添加了元素，所以长度+1</span></span><br><span class=\"line\">    t.length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><font color=\"red\">注意，动态数组额外申请更多物理空间使用的是 realloc 函数。并且，在实现后续元素整体后移的过程，目标位置其实是有数据的，还是 3，只是下一步新插入元素时会把旧元素直接覆盖。</font></p><h2 id=\"顺序表删除元素\"><a class=\"markdownIt-Anchor\" href=\"#顺序表删除元素\"></a> 顺序表删除元素</h2><p>从顺序表中删除指定元素，实现起来非常简单，只需找到目标元素，并将其后续所有元素整体前移 1 个位置即可。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">table <span class=\"title\">delTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> add)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"被删除元素的位置有误\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//删除操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=add; i&lt;t.length; i++) &#123;</span><br><span class=\"line\">        t.head[i<span class=\"number\">-1</span>]=t.head[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"顺序表查找元素\"><a class=\"markdownIt-Anchor\" href=\"#顺序表查找元素\"></a> 顺序表查找元素</h2><p>顺序表中查找目标元素，可以使用多种查找算法实现，比如说二分查找算法、顺序查找等</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顺序查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectTable</span><span class=\"params\">(table t,<span class=\"keyword\">int</span> elem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;t.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t.head[i]==elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;<span class=\"comment\">//如果查找失败，返回-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"更改元素\"><a class=\"markdownIt-Anchor\" href=\"#更改元素\"></a> 更改元素</h2><p>顺序表更改元素的实现过程是：</p><ul><li>找到目标元素；</li><li>直接修改该元素的值；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">table <span class=\"title\">amendTable</span><span class=\"params\">(table t,<span class=\"keyword\">int</span> elem,<span class=\"keyword\">int</span> newElem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> add=selectTable(t, elem);</span><br><span class=\"line\">    t.head[add<span class=\"number\">-1</span>]=newElem;<span class=\"comment\">//由于返回的是元素在顺序表中的位置，所以-1就是该元素在数组中的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\"></a> 单链表</h1><p>与顺序表不同，链表不限制数据的物理存储状态，换句话说，使用链表存储的数据元素，其物理存储位置是随机的。<font color=\"red\">通过指针表示数据之间逻辑关系的存储结构就是链式存储结构。</font></p><h2 id=\"链表的节点\"><a class=\"markdownIt-Anchor\" href=\"#链表的节点\"></a> 链表的节点</h2><p>链表中每个数据的存储都由以下两部分组成：</p><ul><li>数据元素本身，其所在的区域称为数据域；</li><li>指向直接后继元素的指针，所在的区域称为指针域；</li></ul><div align=\"center\"><img src=\"../image/节点结构.png\" width=\"400\"></div><center>图2 节点结构</center><p>链表中每个节点的结构体实现c代码：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Link</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> elem; <span class=\"comment\">//代表数据域</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Link</span> * <span class=\"title\">next</span>;</span> <span class=\"comment\">//代表指针域，指向直接后继元素</span></span><br><span class=\"line\">&#125;link; <span class=\"comment\">//link为节点名，每个节点都是一个 link 结构体</span></span><br></pre></td></tr></table></figure><h2 id=\"头节点-头指针和首元节点\"><a class=\"markdownIt-Anchor\" href=\"#头节点-头指针和首元节点\"></a> 头节点、头指针和首元节点</h2><p>一个完整的链表需要由以下几部分构成：</p><ul><li>头指针：一个普通的指针，它的特点是永远指向链表第一个节点的位置。很明显，头指针用于指明链表的位置，便于后期找到链表并使用表中的数据；</li><li>头节点：其实就是一个不存任何数据的空节点，通常作为链表的第一个节点。对于链表来说，头节点不是必须的，它的作用只是为了方便解决某些实际问题；</li><li>首元节点：由于头节点（也就是空节点）的缘故，链表中称第一个存有数据的节点为首元节点。首元节点只是对链表中第一个存有数据节点的一个称谓，没有实际意义；</li><li>其他节点：链表中其他的节点；</li></ul><p><font color=\"red\">注意：链表中有头节点时，头指针指向头节点；反之，若链表中没有头节点，则头指针指向首元节点。</font></p><h2 id=\"链表的创建初始化\"><a class=\"markdownIt-Anchor\" href=\"#链表的创建初始化\"></a> 链表的创建(初始化)</h2><p>创建一个链表步骤如下：</p><ul><li>声明一个头指针（如果有必要，可以声明一个头节点）；</li><li>创建多个存储数据的节点，在创建的过程中，要随时与其前驱节点建立逻辑关系；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个存储 &#123;1,2,3,4&#125; 且含头节点的链表</span></span><br><span class=\"line\"><span class=\"function\">link * <span class=\"title\">initLink</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    link * p=(link*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(link));<span class=\"comment\">//创建一个头结点</span></span><br><span class=\"line\">    link * temp=p;<span class=\"comment\">//声明一个指针指向头结点，</span></span><br><span class=\"line\">    <span class=\"comment\">//生成链表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">        link *a=(link*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(link));</span><br><span class=\"line\">        a-&gt;elem=i;</span><br><span class=\"line\">        a-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        temp-&gt;next=a;</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表插入元素\"><a class=\"markdownIt-Anchor\" href=\"#链表插入元素\"></a> 链表插入元素</h2><p>虽然新元素的插入位置不固定，但是链表插入元素的思想是固定的，只需做以下两步操作，即可将新元素插入到指定的位置：</p><ul><li>将新结点的 next 指针指向插入位置后的结点；</li><li>将插入位置前结点的 next 指针指向插入结点；</li></ul><p><font color=\"red\">注意：链表插入元素的操作必须是先步骤 1，再步骤 2；反之，若先执行步骤 2，除非再添加一个指针，作为插入位置后续链表的头指针，否则会导致插入位置后的这部分链表丢失，无法再实现步骤 1。</font></p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//p为原链表，elem表示新数据元素，add表示新元素要插入的位置</span></span><br><span class=\"line\"><span class=\"function\">link * <span class=\"title\">insertElem</span><span class=\"params\">(link * p, <span class=\"keyword\">int</span> elem, <span class=\"keyword\">int</span> add)</span> </span>&#123;</span><br><span class=\"line\">    link * temp = p;<span class=\"comment\">//创建临时结点temp</span></span><br><span class=\"line\">    <span class=\"comment\">//首先找到要插入位置的上一个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; add; i++) &#123;</span><br><span class=\"line\">        temp = temp-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"插入位置无效\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建插入结点c</span></span><br><span class=\"line\">    link * c = (link*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(link));</span><br><span class=\"line\">    c-&gt;elem = elem;</span><br><span class=\"line\">    <span class=\"comment\">//向链表中插入结点</span></span><br><span class=\"line\">    c-&gt;next = temp-&gt;next;</span><br><span class=\"line\">    temp-&gt;next = c;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表删除元素\"><a class=\"markdownIt-Anchor\" href=\"#链表删除元素\"></a> 链表删除元素</h2><p>从链表中删除数据元素需要进行以下 2步操作：</p><ul><li>将结点从链表中摘下来;</li><li>手动释放掉结点，回收被结点占用的存储空间;</li></ul><blockquote><p>temp-&gt;next=temp-&gt;next-&gt;next;</p></blockquote><p>执行效果如图3所示：</p><div align=\"center\"><img src=\"../image/链表删除元素.png\" width=\"400\"></div><center>图3 链表删除元素</center><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//p为原链表，add为要删除元素的值</span></span><br><span class=\"line\"><span class=\"function\">link * <span class=\"title\">delElem</span><span class=\"params\">(link * p, <span class=\"keyword\">int</span> add)</span> </span>&#123;</span><br><span class=\"line\">    link * temp = p;</span><br><span class=\"line\">    <span class=\"comment\">//遍历到被删除结点的上一个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; add; i++) &#123;</span><br><span class=\"line\">        temp = temp-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp-&gt;next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"没有该结点\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    link * del = temp-&gt;next;<span class=\"comment\">//单独设置一个指针指向被删除结点，以防丢失</span></span><br><span class=\"line\">    temp-&gt;next = temp-&gt;next-&gt;next;<span class=\"comment\">//删除某个结点的方法就是更改前一个结点的指针域</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(del);<span class=\"comment\">//手动释放该结点，防止内存泄漏</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表查找元素\"><a class=\"markdownIt-Anchor\" href=\"#链表查找元素\"></a> 链表查找元素</h2><p>从表头依次遍历表中节点，用被查找元素与各节点数据域中存储的数据元素进行比对，直至比对成功或遍历至链表最末端的 NULL（比对失败的标志）。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//p为原链表，elem表示被查找元素、</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectElem</span><span class=\"params\">(link * p,<span class=\"keyword\">int</span> elem)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//新建一个指针t，初始化为头指针 p</span></span><br><span class=\"line\">    link * t=p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//由于头节点的存在，因此while中的判断为t-&gt;next</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t-&gt;next) &#123;</span><br><span class=\"line\">        t=t-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t-&gt;elem==elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//程序执行至此处，表示查找失败</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表更新元素\"><a class=\"markdownIt-Anchor\" href=\"#链表更新元素\"></a> 链表更新元素</h2><p>更新链表中的元素，只需通过遍历找到存储此元素的节点，对节点中的数据域做更改操作即可。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更新函数，其中，add 表示更改结点在链表中的位置，newElem 为新的数据域的值</span></span><br><span class=\"line\"><span class=\"function\">link *<span class=\"title\">amendElem</span><span class=\"params\">(link * p,<span class=\"keyword\">int</span> add,<span class=\"keyword\">int</span> newElem)</span></span>&#123;</span><br><span class=\"line\">    link * temp=p;</span><br><span class=\"line\">    temp=temp-&gt;next;<span class=\"comment\">//在遍历之前，temp指向首元结点</span></span><br><span class=\"line\">    <span class=\"comment\">//遍历到待更新结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;add; i++) &#123;</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp-&gt;elem=newElem;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"顺序表和链表的优缺点区别-特点\"><a class=\"markdownIt-Anchor\" href=\"#顺序表和链表的优缺点区别-特点\"></a> 顺序表和链表的优缺点(区别、特点)</h1><ul><li>顺序表存储数据，需预先申请一整块足够大的存储空间，然后将数据按照次序逐一存储，数据之间紧密贴合，不留一丝空隙，如图4a)所示；</li><li>链表的存储方式与顺序表截然相反，什么时候存储数据，什么时候才申请存储空间，数据之间的逻辑关系依靠每个数据元素携带的指针维持，如图4b)所示；</li></ul><div align=\"center\"><img src=\"../image/区别.png\" width=\"400\"></div><!-- rebuild by neat -->","more":"<!-- build time:Wed Apr 22 2020 20:52:59 GMT+0800 (GMT+08:00) --><h1 id=\"线性表\"><a class=\"markdownIt-Anchor\" href=\"#线性表\"></a> 线性表</h1><p>将具有“一对一”关系的数据“线性”地存储到物理空间中，这种存储结构就称为线性存储结构（简称线性表）。使用线性表存储的数据，如同向数组中存储数据那样，要求数据类型必须一致，也就是说，线性表存储的数据，要么全不都是整形，要么全部都是字符串。一半是整形，另一半是字符串的一组数据无法使用线性表存储。</p><h2 id=\"顺序存储结构和链式存储结构\"><a class=\"markdownIt-Anchor\" href=\"#顺序存储结构和链式存储结构\"></a> 顺序存储结构和链式存储结构</h2><ul><li>将数据依次存储在连续的整块物理空间中，这种存储结构称为顺序存储结构(顺序表)</li><li>数据分散的存储在物理空间中，通过一根线保存着它们之间的逻辑关系，这种存储结构称为链式存储结构(链表)</li></ul><h3 id=\"前驱和后继\"><a class=\"markdownIt-Anchor\" href=\"#前驱和后继\"></a> 前驱和后继</h3><p>数据结构中，一组数据中的每个个体被称为“数据元素”。</p><ul><li>某一元素的左侧相邻元素称为“直接前驱”，位于此元素左侧的所有元素都统称为“前驱元素”；</li><li>某一元素的右侧相邻元素称为“直接后继”，位于此元素右侧的所有元素都统称为“后继元素”；</li></ul><div align=\"center\"><img src=\"../image/prev.png\" width=\"400\"></div><center>图1 前驱和后继</center><h1 id=\"顺序表顺序存储结构及初始化\"><a class=\"markdownIt-Anchor\" href=\"#顺序表顺序存储结构及初始化\"></a> 顺序表(顺序存储结构)及初始化</h1><p>顺序表存储数据时，会提前申请一整块足够大小的物理空间，然后将数据依次存储起来，存储时做到数据元素之间不留一丝缝隙。顺序表存储数据使用的是数组。</p><h2 id=\"顺序表的初始化\"><a class=\"markdownIt-Anchor\" href=\"#顺序表的初始化\"></a> 顺序表的初始化</h2><p>使用顺序表存储数据之前，除了要申请足够大小的物理空间之外，为了方便后期使用表中的数据，顺序表还需要实时记录以下 2 项数据：</p><ul><li>顺序表申请的存储容量</li><li>顺序表的长度，元素的个数</li></ul><p><font color=\"red\">正常状态下，顺序表申请的存储容量要大于顺序表的长度。</font></p><p>自定义顺序表的结构体：C语言实现：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>* head;  <span class=\"comment\">//动态数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length; <span class=\"comment\">//顺序表的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>; <span class=\"comment\">//顺序表分配的存储容量</span></span><br><span class=\"line\">&#125;table;</span><br></pre></td></tr></table></figure><p>建立顺序表需要做如下工作：</p><ul><li>给head动态数据申请足够大小的物理空间；</li><li>给size和length赋初值；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Size 5</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> * head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;</span><br><span class=\"line\">&#125;table;</span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">initTable</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    table t;</span><br><span class=\"line\">    t.head=(<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(Size*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));  <span class=\"comment\">//构造一个空的顺序表，动态申请存储空间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!t.head) <span class=\"comment\">//如果申请失败，作出提示并直接退出程序</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"初始化失败\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.length=<span class=\"number\">0</span>;  <span class=\"comment\">//长度为0</span></span><br><span class=\"line\">    t.<span class=\"built_in\">size</span>=Size;  <span class=\"comment\">//存储空间为Size</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出顺序表中元素的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayTable</span><span class=\"params\">(table t)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;t.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,t.head[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    table t=initTable();</span><br><span class=\"line\">    <span class=\"comment\">//向顺序表中添加元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=Size; i++) &#123;</span><br><span class=\"line\">        t.head[i<span class=\"number\">-1</span>]=i;</span><br><span class=\"line\">        t.length++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"顺序表中存储的元素分别是：\\n\"</span>);</span><br><span class=\"line\">    displayTable(t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"顺序表插入元素\"><a class=\"markdownIt-Anchor\" href=\"#顺序表插入元素\"></a> 顺序表插入元素</h2><p>虽然数据元素插入顺序表中的位置有所不同，但是都使用的是同一种方式去解决，即：通过遍历，找到数据元素要插入的位置，然后做如下两步工作：</p><ul><li>将要插入位置元素以及后续的元素整体向后移动一个位置；</li><li>将元素放到腾出来的位置上；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//插入函数，其中，elem为插入的元素，add为插入到顺序表的位置</span></span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">addTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> elem, <span class=\"keyword\">int</span> add)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断插入本身是否存在问题（如果插入元素位置比整张表的长度+1还大（如果相等，是尾随的情况），或者插入的位置本身不存在，程序作为提示并自动退出）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (add &gt; t.length + <span class=\"number\">1</span> || add &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"插入位置有问题\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//做插入操作时，首先需要看顺序表是否有多余的存储空间提供给插入的元素，如果没有，需要申请</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t.length == t.<span class=\"built_in\">size</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t.head = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">realloc</span>(t.head, (t.<span class=\"built_in\">size</span> + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!t.head)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"存储分配失败\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t.<span class=\"built_in\">size</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//插入操作，需要将从插入位置开始的后续元素，逐个后移</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = t.length - <span class=\"number\">1</span>; i &gt;= add - <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t.head[i + <span class=\"number\">1</span>] = t.head[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//后移完成后，直接将所需插入元素，添加到顺序表的相应位置</span></span><br><span class=\"line\">    t.head[add - <span class=\"number\">1</span>] = elem;</span><br><span class=\"line\">    <span class=\"comment\">//由于添加了元素，所以长度+1</span></span><br><span class=\"line\">    t.length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><font color=\"red\">注意，动态数组额外申请更多物理空间使用的是 realloc 函数。并且，在实现后续元素整体后移的过程，目标位置其实是有数据的，还是 3，只是下一步新插入元素时会把旧元素直接覆盖。</font></p><h2 id=\"顺序表删除元素\"><a class=\"markdownIt-Anchor\" href=\"#顺序表删除元素\"></a> 顺序表删除元素</h2><p>从顺序表中删除指定元素，实现起来非常简单，只需找到目标元素，并将其后续所有元素整体前移 1 个位置即可。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">table <span class=\"title\">delTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> add)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"被删除元素的位置有误\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//删除操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=add; i&lt;t.length; i++) &#123;</span><br><span class=\"line\">        t.head[i<span class=\"number\">-1</span>]=t.head[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"顺序表查找元素\"><a class=\"markdownIt-Anchor\" href=\"#顺序表查找元素\"></a> 顺序表查找元素</h2><p>顺序表中查找目标元素，可以使用多种查找算法实现，比如说二分查找算法、顺序查找等</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顺序查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectTable</span><span class=\"params\">(table t,<span class=\"keyword\">int</span> elem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;t.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t.head[i]==elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;<span class=\"comment\">//如果查找失败，返回-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"更改元素\"><a class=\"markdownIt-Anchor\" href=\"#更改元素\"></a> 更改元素</h2><p>顺序表更改元素的实现过程是：</p><ul><li>找到目标元素；</li><li>直接修改该元素的值；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">table <span class=\"title\">amendTable</span><span class=\"params\">(table t,<span class=\"keyword\">int</span> elem,<span class=\"keyword\">int</span> newElem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> add=selectTable(t, elem);</span><br><span class=\"line\">    t.head[add<span class=\"number\">-1</span>]=newElem;<span class=\"comment\">//由于返回的是元素在顺序表中的位置，所以-1就是该元素在数组中的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\"></a> 单链表</h1><p>与顺序表不同，链表不限制数据的物理存储状态，换句话说，使用链表存储的数据元素，其物理存储位置是随机的。<font color=\"red\">通过指针表示数据之间逻辑关系的存储结构就是链式存储结构。</font></p><h2 id=\"链表的节点\"><a class=\"markdownIt-Anchor\" href=\"#链表的节点\"></a> 链表的节点</h2><p>链表中每个数据的存储都由以下两部分组成：</p><ul><li>数据元素本身，其所在的区域称为数据域；</li><li>指向直接后继元素的指针，所在的区域称为指针域；</li></ul><div align=\"center\"><img src=\"../image/节点结构.png\" width=\"400\"></div><center>图2 节点结构</center><p>链表中每个节点的结构体实现c代码：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Link</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> elem; <span class=\"comment\">//代表数据域</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Link</span> * <span class=\"title\">next</span>;</span> <span class=\"comment\">//代表指针域，指向直接后继元素</span></span><br><span class=\"line\">&#125;link; <span class=\"comment\">//link为节点名，每个节点都是一个 link 结构体</span></span><br></pre></td></tr></table></figure><h2 id=\"头节点-头指针和首元节点\"><a class=\"markdownIt-Anchor\" href=\"#头节点-头指针和首元节点\"></a> 头节点、头指针和首元节点</h2><p>一个完整的链表需要由以下几部分构成：</p><ul><li>头指针：一个普通的指针，它的特点是永远指向链表第一个节点的位置。很明显，头指针用于指明链表的位置，便于后期找到链表并使用表中的数据；</li><li>头节点：其实就是一个不存任何数据的空节点，通常作为链表的第一个节点。对于链表来说，头节点不是必须的，它的作用只是为了方便解决某些实际问题；</li><li>首元节点：由于头节点（也就是空节点）的缘故，链表中称第一个存有数据的节点为首元节点。首元节点只是对链表中第一个存有数据节点的一个称谓，没有实际意义；</li><li>其他节点：链表中其他的节点；</li></ul><p><font color=\"red\">注意：链表中有头节点时，头指针指向头节点；反之，若链表中没有头节点，则头指针指向首元节点。</font></p><h2 id=\"链表的创建初始化\"><a class=\"markdownIt-Anchor\" href=\"#链表的创建初始化\"></a> 链表的创建(初始化)</h2><p>创建一个链表步骤如下：</p><ul><li>声明一个头指针（如果有必要，可以声明一个头节点）；</li><li>创建多个存储数据的节点，在创建的过程中，要随时与其前驱节点建立逻辑关系；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个存储 &#123;1,2,3,4&#125; 且含头节点的链表</span></span><br><span class=\"line\"><span class=\"function\">link * <span class=\"title\">initLink</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    link * p=(link*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(link));<span class=\"comment\">//创建一个头结点</span></span><br><span class=\"line\">    link * temp=p;<span class=\"comment\">//声明一个指针指向头结点，</span></span><br><span class=\"line\">    <span class=\"comment\">//生成链表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">        link *a=(link*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(link));</span><br><span class=\"line\">        a-&gt;elem=i;</span><br><span class=\"line\">        a-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        temp-&gt;next=a;</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表插入元素\"><a class=\"markdownIt-Anchor\" href=\"#链表插入元素\"></a> 链表插入元素</h2><p>虽然新元素的插入位置不固定，但是链表插入元素的思想是固定的，只需做以下两步操作，即可将新元素插入到指定的位置：</p><ul><li>将新结点的 next 指针指向插入位置后的结点；</li><li>将插入位置前结点的 next 指针指向插入结点；</li></ul><p><font color=\"red\">注意：链表插入元素的操作必须是先步骤 1，再步骤 2；反之，若先执行步骤 2，除非再添加一个指针，作为插入位置后续链表的头指针，否则会导致插入位置后的这部分链表丢失，无法再实现步骤 1。</font></p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//p为原链表，elem表示新数据元素，add表示新元素要插入的位置</span></span><br><span class=\"line\"><span class=\"function\">link * <span class=\"title\">insertElem</span><span class=\"params\">(link * p, <span class=\"keyword\">int</span> elem, <span class=\"keyword\">int</span> add)</span> </span>&#123;</span><br><span class=\"line\">    link * temp = p;<span class=\"comment\">//创建临时结点temp</span></span><br><span class=\"line\">    <span class=\"comment\">//首先找到要插入位置的上一个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; add; i++) &#123;</span><br><span class=\"line\">        temp = temp-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"插入位置无效\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建插入结点c</span></span><br><span class=\"line\">    link * c = (link*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(link));</span><br><span class=\"line\">    c-&gt;elem = elem;</span><br><span class=\"line\">    <span class=\"comment\">//向链表中插入结点</span></span><br><span class=\"line\">    c-&gt;next = temp-&gt;next;</span><br><span class=\"line\">    temp-&gt;next = c;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表删除元素\"><a class=\"markdownIt-Anchor\" href=\"#链表删除元素\"></a> 链表删除元素</h2><p>从链表中删除数据元素需要进行以下 2步操作：</p><ul><li>将结点从链表中摘下来;</li><li>手动释放掉结点，回收被结点占用的存储空间;</li></ul><blockquote><p>temp-&gt;next=temp-&gt;next-&gt;next;</p></blockquote><p>执行效果如图3所示：</p><div align=\"center\"><img src=\"../image/链表删除元素.png\" width=\"400\"></div><center>图3 链表删除元素</center><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//p为原链表，add为要删除元素的值</span></span><br><span class=\"line\"><span class=\"function\">link * <span class=\"title\">delElem</span><span class=\"params\">(link * p, <span class=\"keyword\">int</span> add)</span> </span>&#123;</span><br><span class=\"line\">    link * temp = p;</span><br><span class=\"line\">    <span class=\"comment\">//遍历到被删除结点的上一个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; add; i++) &#123;</span><br><span class=\"line\">        temp = temp-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp-&gt;next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"没有该结点\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    link * del = temp-&gt;next;<span class=\"comment\">//单独设置一个指针指向被删除结点，以防丢失</span></span><br><span class=\"line\">    temp-&gt;next = temp-&gt;next-&gt;next;<span class=\"comment\">//删除某个结点的方法就是更改前一个结点的指针域</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(del);<span class=\"comment\">//手动释放该结点，防止内存泄漏</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表查找元素\"><a class=\"markdownIt-Anchor\" href=\"#链表查找元素\"></a> 链表查找元素</h2><p>从表头依次遍历表中节点，用被查找元素与各节点数据域中存储的数据元素进行比对，直至比对成功或遍历至链表最末端的 NULL（比对失败的标志）。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//p为原链表，elem表示被查找元素、</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectElem</span><span class=\"params\">(link * p,<span class=\"keyword\">int</span> elem)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//新建一个指针t，初始化为头指针 p</span></span><br><span class=\"line\">    link * t=p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//由于头节点的存在，因此while中的判断为t-&gt;next</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t-&gt;next) &#123;</span><br><span class=\"line\">        t=t-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t-&gt;elem==elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//程序执行至此处，表示查找失败</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表更新元素\"><a class=\"markdownIt-Anchor\" href=\"#链表更新元素\"></a> 链表更新元素</h2><p>更新链表中的元素，只需通过遍历找到存储此元素的节点，对节点中的数据域做更改操作即可。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更新函数，其中，add 表示更改结点在链表中的位置，newElem 为新的数据域的值</span></span><br><span class=\"line\"><span class=\"function\">link *<span class=\"title\">amendElem</span><span class=\"params\">(link * p,<span class=\"keyword\">int</span> add,<span class=\"keyword\">int</span> newElem)</span></span>&#123;</span><br><span class=\"line\">    link * temp=p;</span><br><span class=\"line\">    temp=temp-&gt;next;<span class=\"comment\">//在遍历之前，temp指向首元结点</span></span><br><span class=\"line\">    <span class=\"comment\">//遍历到待更新结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;add; i++) &#123;</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp-&gt;elem=newElem;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"顺序表和链表的优缺点区别-特点\"><a class=\"markdownIt-Anchor\" href=\"#顺序表和链表的优缺点区别-特点\"></a> 顺序表和链表的优缺点(区别、特点)</h1><ul><li>顺序表存储数据，需预先申请一整块足够大的存储空间，然后将数据按照次序逐一存储，数据之间紧密贴合，不留一丝空隙，如图4a)所示；</li><li>链表的存储方式与顺序表截然相反，什么时候存储数据，什么时候才申请存储空间，数据之间的逻辑关系依靠每个数据元素携带的指针维持，如图4b)所示；</li></ul><div align=\"center\"><img src=\"../image/区别.png\" width=\"400\"></div><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"},{"name":"数据结构","path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","path":"api/tags/数据结构.json"},{"name":"算法导论","path":"api/tags/算法导论.json"},{"name":"线性表","path":"api/tags/线性表.json"}]}