{"title":"algo-table","slug":"algo-table","date":"2020-04-22T04:21:14.000Z","updated":"2020-04-23T06:11:24.963Z","comments":true,"path":"api/articles/algo-table.json","excerpt":null,"covers":["/image/prev.png"],"content":"<!-- build time:Mon Apr 27 2020 17:51:27 GMT+0800 (GMT+08:00) --><h1 id=\"线性表\"><a class=\"markdownIt-Anchor\" href=\"#线性表\"></a> 线性表</h1><p>将具有“一对一”关系的数据“线性”地存储到物理空间中，这种存储结构就称为线性存储结构（简称线性表）。使用线性表存储的数据，如同向数组中存储数据那样，要求数据类型必须一致，也就是说，线性表存储的数据，要么全不都是整形，要么全部都是字符串。一半是整形，另一半是字符串的一组数据无法使用线性表存储。</p><h2 id=\"顺序存储结构和链式存储结构\"><a class=\"markdownIt-Anchor\" href=\"#顺序存储结构和链式存储结构\"></a> 顺序存储结构和链式存储结构</h2><ul><li>将数据依次存储在连续的整块物理空间中，这种存储结构称为顺序存储结构(顺序表)</li><li>数据分散的存储在物理空间中，通过一根线保存着它们之间的逻辑关系，这种存储结构称为链式存储结构(链表)</li></ul><h3 id=\"前驱和后继\"><a class=\"markdownIt-Anchor\" href=\"#前驱和后继\"></a> 前驱和后继</h3><p>数据结构中，一组数据中的每个个体被称为“数据元素”。</p><ul><li>某一元素的左侧相邻元素称为“直接前驱”，位于此元素左侧的所有元素都统称为“前驱元素”；</li><li>某一元素的右侧相邻元素称为“直接后继”，位于此元素右侧的所有元素都统称为“后继元素”；</li></ul><div align=\"center\"><img src=\"/image/prev.png\" width=\"400\"></div><center>图1 前驱和后继</center><h1 id=\"顺序表顺序存储结构及初始化\"><a class=\"markdownIt-Anchor\" href=\"#顺序表顺序存储结构及初始化\"></a> 顺序表(顺序存储结构)及初始化</h1><p>顺序表存储数据时，会提前申请一整块足够大小的物理空间，然后将数据依次存储起来，存储时做到数据元素之间不留一丝缝隙。顺序表存储数据使用的是数组。</p><h2 id=\"顺序表的初始化\"><a class=\"markdownIt-Anchor\" href=\"#顺序表的初始化\"></a> 顺序表的初始化</h2><p>使用顺序表存储数据之前，除了要申请足够大小的物理空间之外，为了方便后期使用表中的数据，顺序表还需要实时记录以下 2 项数据：</p><ul><li>顺序表申请的存储容量</li><li>顺序表的长度，元素的个数</li></ul><p><font color=\"red\">正常状态下，顺序表申请的存储容量要大于顺序表的长度。</font></p><p>自定义顺序表的结构体：C语言实现：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>* head;  <span class=\"comment\">//动态数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length; <span class=\"comment\">//顺序表的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>; <span class=\"comment\">//顺序表分配的存储容量</span></span><br><span class=\"line\">&#125;table;</span><br></pre></td></tr></table></figure><p>建立顺序表需要做如下工作：</p><ul><li>给head动态数据申请足够大小的物理空间；</li><li>给size和length赋初值；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Size 5</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> * head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;</span><br><span class=\"line\">&#125;table;</span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">initTable</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    table t;</span><br><span class=\"line\">    t.head=(<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(Size*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));  <span class=\"comment\">//构造一个空的顺序表，动态申请存储空间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!t.head) <span class=\"comment\">//如果申请失败，作出提示并直接退出程序</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"初始化失败\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.length=<span class=\"number\">0</span>;  <span class=\"comment\">//长度为0</span></span><br><span class=\"line\">    t.<span class=\"built_in\">size</span>=Size;  <span class=\"comment\">//存储空间为Size</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出顺序表中元素的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayTable</span><span class=\"params\">(table t)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;t.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,t.head[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    table t=initTable();</span><br><span class=\"line\">    <span class=\"comment\">//向顺序表中添加元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=Size; i++) &#123;</span><br><span class=\"line\">        t.head[i<span class=\"number\">-1</span>]=i;</span><br><span class=\"line\">        t.length++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"顺序表中存储的元素分别是：\\n\"</span>);</span><br><span class=\"line\">    displayTable(t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"顺序表插入元素\"><a class=\"markdownIt-Anchor\" href=\"#顺序表插入元素\"></a> 顺序表插入元素</h2><p>虽然数据元素插入顺序表中的位置有所不同，但是都使用的是同一种方式去解决，即：通过遍历，找到数据元素要插入的位置，然后做如下两步工作：</p><ul><li>将要插入位置元素以及后续的元素整体向后移动一个位置；</li><li>将元素放到腾出来的位置上；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//插入函数，其中，elem为插入的元素，add为插入到顺序表的位置</span></span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">addTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> elem, <span class=\"keyword\">int</span> add)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断插入本身是否存在问题（如果插入元素位置比整张表的长度+1还大（如果相等，是尾随的情况），或者插入的位置本身不存在，程序作为提示并自动退出）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (add &gt; t.length + <span class=\"number\">1</span> || add &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"插入位置有问题\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//做插入操作时，首先需要看顺序表是否有多余的存储空间提供给插入的元素，如果没有，需要申请</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t.length == t.<span class=\"built_in\">size</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t.head = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">realloc</span>(t.head, (t.<span class=\"built_in\">size</span> + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!t.head)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"存储分配失败\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t.<span class=\"built_in\">size</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//插入操作，需要将从插入位置开始的后续元素，逐个后移</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = t.length - <span class=\"number\">1</span>; i &gt;= add - <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t.head[i + <span class=\"number\">1</span>] = t.head[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//后移完成后，直接将所需插入元素，添加到顺序表的相应位置</span></span><br><span class=\"line\">    t.head[add - <span class=\"number\">1</span>] = elem;</span><br><span class=\"line\">    <span class=\"comment\">//由于添加了元素，所以长度+1</span></span><br><span class=\"line\">    t.length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><font color=\"red\">注意，动态数组额外申请更多物理空间使用的是 realloc 函数。并且，在实现后续元素整体后移的过程，目标位置其实是有数据的，还是 3，只是下一步新插入元素时会把旧元素直接覆盖。</font></p><h2 id=\"顺序表删除元素\"><a class=\"markdownIt-Anchor\" href=\"#顺序表删除元素\"></a> 顺序表删除元素</h2><p>从顺序表中删除指定元素，实现起来非常简单，只需找到目标元素，并将其后续所有元素整体前移 1 个位置即可。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">table <span class=\"title\">delTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> add)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"被删除元素的位置有误\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//删除操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=add; i&lt;t.length; i++) &#123;</span><br><span class=\"line\">        t.head[i<span class=\"number\">-1</span>]=t.head[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"顺序表查找元素\"><a class=\"markdownIt-Anchor\" href=\"#顺序表查找元素\"></a> 顺序表查找元素</h2><p>顺序表中查找目标元素，可以使用多种查找算法实现，比如说二分查找算法、顺序查找等</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顺序查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectTable</span><span class=\"params\">(table t,<span class=\"keyword\">int</span> elem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;t.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t.head[i]==elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;<span class=\"comment\">//如果查找失败，返回-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"更改元素\"><a class=\"markdownIt-Anchor\" href=\"#更改元素\"></a> 更改元素</h2><p>顺序表更改元素的实现过程是：</p><ul><li>找到目标元素；</li><li>直接修改该元素的值；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">table <span class=\"title\">amendTable</span><span class=\"params\">(table t,<span class=\"keyword\">int</span> elem,<span class=\"keyword\">int</span> newElem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> add=selectTable(t, elem);</span><br><span class=\"line\">    t.head[add<span class=\"number\">-1</span>]=newElem;<span class=\"comment\">//由于返回的是元素在顺序表中的位置，所以-1就是该元素在数组中的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\"></a> 单链表</h1><p>与顺序表不同，链表不限制数据的物理存储状态，换句话说，使用链表存储的数据元素，其物理存储位置是随机的。<font color=\"red\">通过指针表示数据之间逻辑关系的存储结构就是链式存储结构。</font></p><h2 id=\"链表的节点\"><a class=\"markdownIt-Anchor\" href=\"#链表的节点\"></a> 链表的节点</h2><p>链表中每个数据的存储都由以下两部分组成：</p><ul><li>数据元素本身，其所在的区域称为数据域；</li><li>指向直接后继元素的指针，所在的区域称为指针域；</li></ul><div align=\"center\"><img src=\"/image/节点结构.png\" width=\"400\"></div><center>图2 节点结构</center><p>链表中每个节点的结构体实现c代码：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Link</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> elem; <span class=\"comment\">//代表数据域</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Link</span> * <span class=\"title\">next</span>;</span> <span class=\"comment\">//代表指针域，指向直接后继元素</span></span><br><span class=\"line\">&#125;link; <span class=\"comment\">//link为节点名，每个节点都是一个 link 结构体</span></span><br></pre></td></tr></table></figure><h2 id=\"头节点-头指针和首元节点\"><a class=\"markdownIt-Anchor\" href=\"#头节点-头指针和首元节点\"></a> 头节点、头指针和首元节点</h2><p>一个完整的链表需要由以下几部分构成：</p><ul><li>头指针：一个普通的指针，它的特点是永远指向链表第一个节点的位置。很明显，头指针用于指明链表的位置，便于后期找到链表并使用表中的数据；</li><li>头节点：其实就是一个不存任何数据的空节点，通常作为链表的第一个节点。对于链表来说，头节点不是必须的，它的作用只是为了方便解决某些实际问题；</li><li>首元节点：由于头节点（也就是空节点）的缘故，链表中称第一个存有数据的节点为首元节点。首元节点只是对链表中第一个存有数据节点的一个称谓，没有实际意义；</li><li>其他节点：链表中其他的节点；</li></ul><p><font color=\"red\">注意：链表中有头节点时，头指针指向头节点；反之，若链表中没有头节点，则头指针指向首元节点。</font></p><h2 id=\"链表的创建初始化\"><a class=\"markdownIt-Anchor\" href=\"#链表的创建初始化\"></a> 链表的创建(初始化)</h2><p>创建一个链表步骤如下：</p><ul><li>声明一个头指针（如果有必要，可以声明一个头节点）；</li><li>创建多个存储数据的节点，在创建的过程中，要随时与其前驱节点建立逻辑关系；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个存储 &#123;1,2,3,4&#125; 且含头节点的链表</span></span><br><span class=\"line\"><span class=\"function\">link * <span class=\"title\">initLink</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    link * p=(link*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(link));<span class=\"comment\">//创建一个头结点</span></span><br><span class=\"line\">    link * temp=p;<span class=\"comment\">//声明一个指针指向头结点，</span></span><br><span class=\"line\">    <span class=\"comment\">//生成链表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">        link *a=(link*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(link));</span><br><span class=\"line\">        a-&gt;elem=i;</span><br><span class=\"line\">        a-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        temp-&gt;next=a;</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表插入元素\"><a class=\"markdownIt-Anchor\" href=\"#链表插入元素\"></a> 链表插入元素</h2><p>虽然新元素的插入位置不固定，但是链表插入元素的思想是固定的，只需做以下两步操作，即可将新元素插入到指定的位置：</p><ul><li>将新结点的 next 指针指向插入位置后的结点；</li><li>将插入位置前结点的 next 指针指向插入结点；</li></ul><p><font color=\"red\">注意：链表插入元素的操作必须是先步骤 1，再步骤 2；反之，若先执行步骤 2，除非再添加一个指针，作为插入位置后续链表的头指针，否则会导致插入位置后的这部分链表丢失，无法再实现步骤 1。</font></p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//p为原链表，elem表示新数据元素，add表示新元素要插入的位置</span></span><br><span class=\"line\"><span class=\"function\">link * <span class=\"title\">insertElem</span><span class=\"params\">(link * p, <span class=\"keyword\">int</span> elem, <span class=\"keyword\">int</span> add)</span> </span>&#123;</span><br><span class=\"line\">    link * temp = p;<span class=\"comment\">//创建临时结点temp</span></span><br><span class=\"line\">    <span class=\"comment\">//首先找到要插入位置的上一个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; add; i++) &#123;</span><br><span class=\"line\">        temp = temp-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"插入位置无效\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建插入结点c</span></span><br><span class=\"line\">    link * c = (link*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(link));</span><br><span class=\"line\">    c-&gt;elem = elem;</span><br><span class=\"line\">    <span class=\"comment\">//向链表中插入结点</span></span><br><span class=\"line\">    c-&gt;next = temp-&gt;next;</span><br><span class=\"line\">    temp-&gt;next = c;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表删除元素\"><a class=\"markdownIt-Anchor\" href=\"#链表删除元素\"></a> 链表删除元素</h2><p>从链表中删除数据元素需要进行以下 2步操作：</p><ul><li>将结点从链表中摘下来;</li><li>手动释放掉结点，回收被结点占用的存储空间;</li></ul><blockquote><p>temp-&gt;next=temp-&gt;next-&gt;next;</p></blockquote><p>执行效果如图3所示：</p><div align=\"center\"><img src=\"/image/链表删除元素.png\" width=\"400\"></div><center>图3 链表删除元素</center><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//p为原链表，add为要删除元素的值</span></span><br><span class=\"line\"><span class=\"function\">link * <span class=\"title\">delElem</span><span class=\"params\">(link * p, <span class=\"keyword\">int</span> add)</span> </span>&#123;</span><br><span class=\"line\">    link * temp = p;</span><br><span class=\"line\">    <span class=\"comment\">//遍历到被删除结点的上一个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; add; i++) &#123;</span><br><span class=\"line\">        temp = temp-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp-&gt;next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"没有该结点\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    link * del = temp-&gt;next;<span class=\"comment\">//单独设置一个指针指向被删除结点，以防丢失</span></span><br><span class=\"line\">    temp-&gt;next = temp-&gt;next-&gt;next;<span class=\"comment\">//删除某个结点的方法就是更改前一个结点的指针域</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(del);<span class=\"comment\">//手动释放该结点，防止内存泄漏</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表查找元素\"><a class=\"markdownIt-Anchor\" href=\"#链表查找元素\"></a> 链表查找元素</h2><p>从表头依次遍历表中节点，用被查找元素与各节点数据域中存储的数据元素进行比对，直至比对成功或遍历至链表最末端的 NULL（比对失败的标志）。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//p为原链表，elem表示被查找元素、</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectElem</span><span class=\"params\">(link * p,<span class=\"keyword\">int</span> elem)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//新建一个指针t，初始化为头指针 p</span></span><br><span class=\"line\">    link * t=p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//由于头节点的存在，因此while中的判断为t-&gt;next</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t-&gt;next) &#123;</span><br><span class=\"line\">        t=t-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t-&gt;elem==elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//程序执行至此处，表示查找失败</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表更新元素\"><a class=\"markdownIt-Anchor\" href=\"#链表更新元素\"></a> 链表更新元素</h2><p>更新链表中的元素，只需通过遍历找到存储此元素的节点，对节点中的数据域做更改操作即可。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更新函数，其中，add 表示更改结点在链表中的位置，newElem 为新的数据域的值</span></span><br><span class=\"line\"><span class=\"function\">link *<span class=\"title\">amendElem</span><span class=\"params\">(link * p,<span class=\"keyword\">int</span> add,<span class=\"keyword\">int</span> newElem)</span></span>&#123;</span><br><span class=\"line\">    link * temp=p;</span><br><span class=\"line\">    temp=temp-&gt;next;<span class=\"comment\">//在遍历之前，temp指向首元结点</span></span><br><span class=\"line\">    <span class=\"comment\">//遍历到待更新结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;add; i++) &#123;</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp-&gt;elem=newElem;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"顺序表和链表的优缺点区别-特点\"><a class=\"markdownIt-Anchor\" href=\"#顺序表和链表的优缺点区别-特点\"></a> 顺序表和链表的优缺点(区别、特点)</h1><ul><li>顺序表存储数据，需预先申请一整块足够大的存储空间，然后将数据按照次序逐一存储，数据之间紧密贴合，不留一丝空隙，如图4a)所示；</li><li>链表的存储方式与顺序表截然相反，什么时候存储数据，什么时候才申请存储空间，数据之间的逻辑关系依靠每个数据元素携带的指针维持，如图4b)所示；</li></ul><div align=\"center\"><img src=\"/image/区别.png\" width=\"400\"></div><h2 id=\"开辟空间的方式\"><a class=\"markdownIt-Anchor\" href=\"#开辟空间的方式\"></a> 开辟空间的方式</h2><p>顺序表存储数据实行的是 “一次开辟，永久使用”，即存储数据之前先开辟好足够的存储空间，空间一旦开辟后期无法改变大小链表则不同，链表存储数据时一次只开辟存储一个节点的物理空间，如果后期需要还可以再申请。</p><p>因此，若只从开辟空间方式的角度去考虑，当存储数据的个数无法提前确定，又或是物理空间使用紧张以致无法一次性申请到足够大小的空间时，使用链表更有助于问题的解决。</p><h2 id=\"空间利用率\"><a class=\"markdownIt-Anchor\" href=\"#空间利用率\"></a> 空间利用率</h2><p>空间利用率的角度上看，顺序表的空间利用率显然要比链表高。链表在存储数据时，每次只申请一个节点的空间，且空间的位置是随机的</p><p>这种申请存储空间的方式会产生很多空间碎片，一定程序上造成了空间浪费。不仅如此，由于链表中每个数据元素都必须携带至少一个指针，因此，链表对所申请空间的利用率也没有顺序表高。空间碎片，指的是某些容量很小（1KB 甚至更小）以致无法得到有效利用的物理空间。</p><h2 id=\"时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度\"></a> 时间复杂度</h2><p>根据顺序表和链表在存储结构上的差异，问题类型主要分为以下 2 类：</p><ul><li>问题中主要涉及访问元素的操作，元素的插入、删除和移动操作极少；</li><li>问题中主要涉及元素的插入、删除和移动，访问元素的需求很少；</li></ul><p>第 1 类问题适合使用顺序表。这是因为，顺序表中存储的元素可以使用数组下标直接访问，无需遍历整个表，因此使用顺序表访问元素的时间复杂度为 O(1)；而在链表中访问数据元素，需要从表头依次遍历，直到找到指定节点，花费的时间复杂度为 O(n);</p><p>第 2 类问题则适合使用链表。链表中数据元素之间的逻辑关系靠的是节点之间的指针，当需要在链表中某处插入或删除节点时，只需改变相应节点的指针指向即可，无需大量移动元素，因此链表中插入、删除或移动数据所耗费的时间复杂度为 O(1)；而顺序表中，插入、删除和移动数据可能会牵涉到大量元素的整体移动，因此时间复杂度至少为 O(n);</p><h1 id=\"静态链表及其创建\"><a class=\"markdownIt-Anchor\" href=\"#静态链表及其创建\"></a> 静态链表及其创建</h1><p>使用静态链表存储数据，数据全部存储在数组中（和顺序表一样），但存储位置是随机的，数据之间&quot;一对一&quot;的逻辑关系通过一个整形变量（称为&quot;游标&quot;，和指针功能类似）维持（和链表类似）。</p><div align=\"center\"><img src=\"/image/静态链表.png\" width=\"400\"></div><center>图4 静态链表存储数据</center><p>静态链表会将第一个数据元素放到数组下标为 1 的位置（a[1]）中。从 a[1] 存储的数据元素 1 开始，通过存储的游标变量 3，就可以在 a[3] 中找到元素 1 的直接后继元素 2；同样，通过元素 a[3] 存储的游标变量 5，可以在 a[5] 中找到元素 2 的直接后继元素 3，这样的循环过程直到某元素的游标变量为 0 截止（因为 a[0] 默认不存储数据元素）。</p><h2 id=\"静态链表中的节点\"><a class=\"markdownIt-Anchor\" href=\"#静态链表中的节点\"></a> 静态链表中的节点</h2><p>静态链表存储数据元素也需要自定义数据类型，至少需要包含以下 2 部分信息：</p><ul><li>数据域：用于存储数据元素的值；</li><li>游标：其实就是数组下标，表示直接后继元素所在数组中的位置</li></ul><p>静态链表中节点构成的C语言实现：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cur;<span class=\"comment\">//游标</span></span><br><span class=\"line\">&#125;component;</span><br></pre></td></tr></table></figure><h2 id=\"备用链表\"><a class=\"markdownIt-Anchor\" href=\"#备用链表\"></a> 备用链表</h2><p>备用链表的作用是回收数组中未使用或之前使用过（目前未使用）的存储空间，留待后期使用。也就是说，静态链表使用数组申请的物理空间中，存有两个链表，一条连接数据，另一条连接数组中未使用的空间</p><blockquote><p>通常，备用链表的表头位于数组下标为 0（a[0]） 的位置，而数据链表的表头位于数组下标为 1（a[1]）的位置。</p></blockquote><h2 id=\"静态链表的创建\"><a class=\"markdownIt-Anchor\" href=\"#静态链表的创建\"></a> 静态链表的创建</h2><ul><li>在数据链表未初始化之前，数组中所有位置都处于空闲状态，都被链接到备用链表上。</li><li>向静态链表添加数据时，需提前从备用链表中摘除节点，供新数据使用。</li></ul><p><font color=\"red\">备用链表摘除节点最简单的方法是摘除 a[0] 的直接后继节点；同样，向备用链表中添加空闲节点也是添加作为 a[0] 新的直接后继节点。因为 a[0] 是备用链表的第一个节点，我们知道它的位置，操作它的直接后继节点相对容易，无需遍历备用链表，耗费的时间复杂度为 O(1)。</font></p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxSize 6</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* data */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cur;</span><br><span class=\"line\">&#125; component;</span><br><span class=\"line\"><span class=\"comment\">//将结构体数组中所有分量链接到备用链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reserveArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//初始化静态链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">initArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//输出函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> body)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从备用链表上摘下空闲节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mallocArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    component <span class=\"built_in\">array</span>[maxSize];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> body = initArr(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"静态链表：\\n\"</span>);</span><br><span class=\"line\">    displayArr(<span class=\"built_in\">array</span>, body);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建备用链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reserveArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxSize; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">array</span>[i].cur = i + <span class=\"number\">1</span>; <span class=\"comment\">//将每个数组分量链接到一起</span></span><br><span class=\"line\">        <span class=\"built_in\">array</span>[i].data = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[maxSize - <span class=\"number\">1</span>].cur = <span class=\"number\">0</span>; <span class=\"comment\">//链表最后一个节点的游标为0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//提前分配空间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mallocArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"built_in\">array</span>[<span class=\"number\">0</span>].cur;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[<span class=\"number\">0</span>].cur)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">array</span>[<span class=\"number\">0</span>].cur = <span class=\"built_in\">array</span>[i].cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化静态链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">initArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    reserveArr(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> body = mallocArr(<span class=\"built_in\">array</span>); <span class=\"comment\">//声明一个变量，把它当指针使，指向链表的最后的一个结点，因为链表为空，所以和头结点重合</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> tempBody = body;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = mallocArr(<span class=\"built_in\">array</span>); <span class=\"comment\">//从备用链表中拿出空闲的分量</span></span><br><span class=\"line\">        <span class=\"built_in\">array</span>[tempBody].cur = j;  <span class=\"comment\">//将申请的空闲分量链接在链表的最后一个结点后面</span></span><br><span class=\"line\">        <span class=\"built_in\">array</span>[j].data = i;        <span class=\"comment\">//给新申请的分量的数据域初始化</span></span><br><span class=\"line\">        tempBody = j;             <span class=\"comment\">//将指向链表最后一个结点的指针后移</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[tempBody].cur = <span class=\"number\">0</span>; <span class=\"comment\">//新的链表最后一个结点的指针设置为0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> body)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tempBody = body; <span class=\"comment\">//tempBody准备做遍历使用</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">array</span>[tempBody].cur)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d,%d \"</span>, <span class=\"built_in\">array</span>[tempBody].data, <span class=\"built_in\">array</span>[tempBody].cur);</span><br><span class=\"line\">        tempBody = <span class=\"built_in\">array</span>[tempBody].cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d,%d\\n\"</span>, <span class=\"built_in\">array</span>[tempBody].data, <span class=\"built_in\">array</span>[tempBody].cur);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"静态链表的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#静态链表的基本操作\"></a> 静态链表的基本操作</h2><h3 id=\"添加元素\"><a class=\"markdownIt-Anchor\" href=\"#添加元素\"></a> 添加元素</h3><p>将元素4添加到静态链表中的第3个位置上，实现过程如下：</p><ul><li>从备用链表中摘除一个节点，用于存储元素 4；</li><li>找到表中第 2 个节点（添加位置的前一个节点，这里是数据元素 2），将元素 2 的游标赋值给新元素 4；</li><li>将元素 4 所在数组中的下标赋值给元素 2 的游标；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertArr</span><span class=\"params\">(component * <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> body,<span class=\"keyword\">int</span> add,<span class=\"keyword\">char</span> a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tempBody=body;<span class=\"comment\">//tempBody做遍历结构体数组使用</span></span><br><span class=\"line\">    <span class=\"comment\">//找到要插入位置的上一个结点在数组中的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;add; i++) &#123;</span><br><span class=\"line\">        tempBody=<span class=\"built_in\">array</span>[tempBody].cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> insert=mallocArr(<span class=\"built_in\">array</span>);<span class=\"comment\">//申请空间，准备插入</span></span><br><span class=\"line\">    <span class=\"built_in\">array</span>[insert].data=a;</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[insert].cur=<span class=\"built_in\">array</span>[tempBody].cur;<span class=\"comment\">//新插入结点的游标等于其直接前驱结点的游标</span></span><br><span class=\"line\">    <span class=\"built_in\">array</span>[tempBody].cur=insert;<span class=\"comment\">//直接前驱结点的游标等于新插入结点所在数组中的下标</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"删除元素\"><a class=\"markdownIt-Anchor\" href=\"#删除元素\"></a> 删除元素</h3><p>静态链表中删除指定元素，只需实现以下 2 步操作：</p><ul><li>将存有目标元素的节点从数据链表中摘除；</li><li>将摘除节点添加到备用链表，以便下次再用；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//备用链表回收空间的函数，其中array为存储数据的数组，k表示未使用节点所在数组的下标</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeArr</span><span class=\"params\">(component * <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[k].cur=<span class=\"built_in\">array</span>[<span class=\"number\">0</span>].cur;</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[<span class=\"number\">0</span>].cur=k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除结点函数，a 表示被删除结点中数据域存放的数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deletArr</span><span class=\"params\">(component * <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> body,<span class=\"keyword\">char</span> a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tempBody=body;</span><br><span class=\"line\">    <span class=\"comment\">//找到被删除结点的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">array</span>[tempBody].data!=a) &#123;</span><br><span class=\"line\">        tempBody=<span class=\"built_in\">array</span>[tempBody].cur;</span><br><span class=\"line\">        <span class=\"comment\">//当tempBody为0时，表示链表遍历结束，说明链表中没有存储该数据的结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tempBody==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"链表中没有此数据\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//运行到此，证明有该结点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> del=tempBody;</span><br><span class=\"line\">    tempBody=body;</span><br><span class=\"line\">    <span class=\"comment\">//找到该结点的上一个结点，做删除操作</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">array</span>[tempBody].cur!=del) &#123;</span><br><span class=\"line\">        tempBody=<span class=\"built_in\">array</span>[tempBody].cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//将被删除结点的游标直接给被删除结点的上一个结点</span></span><br><span class=\"line\">    <span class=\"built_in\">array</span>[tempBody].cur=<span class=\"built_in\">array</span>[del].cur;</span><br><span class=\"line\">    <span class=\"comment\">//回收被摘除节点的空间</span></span><br><span class=\"line\">    freeArr(<span class=\"built_in\">array</span>, del);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"查找元素\"><a class=\"markdownIt-Anchor\" href=\"#查找元素\"></a> 查找元素</h3><p>静态链表查找指定元素，由于我们只知道静态链表第一个元素所在数组中的位置，因此只能通过逐个遍历静态链表的方式，查找存有指定数据元素的节点。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectElem</span><span class=\"params\">(component * <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> body,<span class=\"keyword\">char</span> elem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tempBody=body;</span><br><span class=\"line\">    <span class=\"comment\">//当游标值为0时，表示链表结束</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">array</span>[tempBody].cur!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[tempBody].data==elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tempBody;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tempBody=<span class=\"built_in\">array</span>[tempBody].cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;<span class=\"comment\">//返回-1，表示在链表中没有找到该元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"更改数据\"><a class=\"markdownIt-Anchor\" href=\"#更改数据\"></a> 更改数据</h3><p>找到目标元素所在的节点，直接更改节点中的数据域即可。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">amendElem</span><span class=\"params\">(component * <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> body,<span class=\"keyword\">char</span> oldElem,<span class=\"keyword\">char</span> newElem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> add=selectElem(<span class=\"built_in\">array</span>, body, oldElem);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (add==<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"无更改元素\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[add].data=newElem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"静态链表和动态链表区别\"><a class=\"markdownIt-Anchor\" href=\"#静态链表和动态链表区别\"></a> 静态链表和动态链表区别</h1><h2 id=\"静态链表\"><a class=\"markdownIt-Anchor\" href=\"#静态链表\"></a> 静态链表</h2><p>使用静态链表存储数据，需要预先申请足够大的一整块内存空间，也就是说，静态链表存储数据元素的个数从其创建的那一刻就已经确定，后期无法更改。</p><p>比如，如果创建静态链表时只申请存储10个数据元素的空间，那么在使用静态链表时，数据的存储个数就不能超过10个，否则程序就会发生错误。</p><p>不仅如此，静态链表是在固定大小的存储空间内随机存储各个数据元素，这就造成了静态链表中需要使用另一条链表（通常称为&quot;备用链表&quot;）来记录空间存储空间的位置，以便后期分配给新添加元素使用，如图 2 所示。</p><p>这意味着，如果你选择使用静态链表存储数据，你需要通过操控两条链表，一条是存储数据，另一条是记录空闲空间的位置。</p><h2 id=\"动态链表\"><a class=\"markdownIt-Anchor\" href=\"#动态链表\"></a> 动态链表</h2><p>使用动态链表存储数据，不需要预先申请内存空间，而是在需要的时候才向内存申请。也就是说，动态链表存储数据元素的个数是不限的，想存多少就存多少。</p><p>同时，使用动态链表的整个过程，你也只需操控一条存储数据的链表。当表中添加或删除数据元素时，你只需要通过 malloc 或 free 函数来申请或释放空间即可，实现起来比较简单。</p><h1 id=\"双向链表\"><a class=\"markdownIt-Anchor\" href=\"#双向链表\"></a> 双向链表</h1><p><font color=\"red\">双向，指的是各节点之间的逻辑关系是双向的，但通常头指针只设置一个，除非实际情况需要</font></p><p>双向链表中各节点包含以下3部分信息：</p><ul><li>指针域：用于指向当前节点的直接前驱节点；</li><li>数据域：用于存储数据元素。</li><li>指针域：用于指向当前节点的直接后继节点；</li></ul><p>双链表的节点结构的Ｃ语言实现：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">line</span>&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">line</span> * <span class=\"title\">prior</span>;</span> <span class=\"comment\">//指向直接前趋</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">line</span> * <span class=\"title\">next</span>;</span> <span class=\"comment\">//指向直接后继</span></span><br><span class=\"line\">&#125;<span class=\"built_in\">line</span>;</span><br></pre></td></tr></table></figure><h2 id=\"双向链表的创建\"><a class=\"markdownIt-Anchor\" href=\"#双向链表的创建\"></a> 双向链表的创建</h2><p>与单链表不同，双链表创建过程中，每创建一个新节点，都要与其前驱节点建立两次联系，分别是：</p><ul><li>将新节点的 prior 指针指向直接前驱节点；</li><li>将直接前驱节点的 next 指针指向新节点；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">line</span>* <span class=\"title\">initLine</span><span class=\"params\">(<span class=\"built_in\">line</span> * head)</span></span>&#123;</span><br><span class=\"line\">    head=(<span class=\"built_in\">line</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">line</span>));<span class=\"comment\">//创建链表第一个结点（首元结点）</span></span><br><span class=\"line\">    head-&gt;prior=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    head-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    head-&gt;data=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">line</span> * <span class=\"built_in\">list</span>=head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>; i&lt;=<span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建并初始化一个新结点</span></span><br><span class=\"line\">        <span class=\"built_in\">line</span> * body=(<span class=\"built_in\">line</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">line</span>));</span><br><span class=\"line\">        body-&gt;prior=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        body-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        body-&gt;data=i;</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;next=body;<span class=\"comment\">//直接前趋结点的next指针指向新结点</span></span><br><span class=\"line\">        body-&gt;prior=<span class=\"built_in\">list</span>;<span class=\"comment\">//新结点指向直接前趋结点</span></span><br><span class=\"line\">        <span class=\"built_in\">list</span>=<span class=\"built_in\">list</span>-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"添加节点\"><a class=\"markdownIt-Anchor\" href=\"#添加节点\"></a> 添加节点</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">line</span> * <span class=\"title\">insertLine</span><span class=\"params\">(<span class=\"built_in\">line</span> * head,<span class=\"keyword\">int</span> data,<span class=\"keyword\">int</span> add)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//新建数据域为data的结点</span></span><br><span class=\"line\">    <span class=\"built_in\">line</span> * temp=(<span class=\"built_in\">line</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">line</span>));</span><br><span class=\"line\">    temp-&gt;data=data;</span><br><span class=\"line\">    temp-&gt;prior=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    temp-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">//插入到链表头，要特殊考虑</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (add==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        temp-&gt;next=head;</span><br><span class=\"line\">        head-&gt;prior=temp;</span><br><span class=\"line\">        head=temp;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">line</span> * body=head;</span><br><span class=\"line\">        <span class=\"comment\">//找到要插入位置的前一个结点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;add<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">            body=body-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断条件为真，说明插入位置为链表尾</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body-&gt;next==<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            body-&gt;next=temp;</span><br><span class=\"line\">            temp-&gt;prior=body;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            body-&gt;next-&gt;prior=temp;</span><br><span class=\"line\">            temp-&gt;next=body-&gt;next;</span><br><span class=\"line\">            body-&gt;next=temp;</span><br><span class=\"line\">            temp-&gt;prior=body;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"删除节点\"><a class=\"markdownIt-Anchor\" href=\"#删除节点\"></a> 删除节点</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除结点的函数，data为要删除结点的数据域的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">line</span> * <span class=\"title\">delLine</span><span class=\"params\">(<span class=\"built_in\">line</span> * head,<span class=\"keyword\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">line</span> * temp=head;</span><br><span class=\"line\">    <span class=\"comment\">//遍历链表</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (temp) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断当前结点中数据域和data是否相等，若相等，摘除该结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp-&gt;data==data) &#123;</span><br><span class=\"line\">            temp-&gt;prior-&gt;next=temp-&gt;next;</span><br><span class=\"line\">            temp-&gt;next-&gt;prior=temp-&gt;prior;</span><br><span class=\"line\">            <span class=\"built_in\">free</span>(temp);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"链表中无该数据元素\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"查找节点\"><a class=\"markdownIt-Anchor\" href=\"#查找节点\"></a> 查找节点</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//双链表查找指定元素的实现同单链表类似，都是从表头依次遍历表中元素。</span></span><br><span class=\"line\"><span class=\"comment\">//head为原双链表，elem表示被查找元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectElem</span><span class=\"params\">(<span class=\"built_in\">line</span> * head,<span class=\"keyword\">int</span> elem)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//新建一个指针t，初始化为头指针 head</span></span><br><span class=\"line\">    <span class=\"built_in\">line</span> * t=head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t-&gt;data==elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        t=t-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//程序执行至此处，表示查找失败</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"更改节点\"><a class=\"markdownIt-Anchor\" href=\"#更改节点\"></a> 更改节点</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更新函数，其中，add 表示更改结点在双链表中的位置，newElem 为新数据的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">line</span> *<span class=\"title\">amendElem</span><span class=\"params\">(<span class=\"built_in\">line</span> * p,<span class=\"keyword\">int</span> add,<span class=\"keyword\">int</span> newElem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">line</span> * temp=p;</span><br><span class=\"line\">    <span class=\"comment\">//遍历到被删除结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;add; i++) &#123;</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp-&gt;data=newElem;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"循环链表\"><a class=\"markdownIt-Anchor\" href=\"#循环链表\"></a> 循环链表</h1><p>将表中最后一个结点的指针指向头结点，虽然循环链表成环状，但本质上还是链表，因此在循环链表中，依然能够找到头指针和首元节点等。循环链表和普通链表相比，唯一的不同就是循环链表首尾相连，其他都完全一样。</p><h2 id=\"约瑟夫环\"><a class=\"markdownIt-Anchor\" href=\"#约瑟夫环\"></a> 约瑟夫环</h2><p>已知 n 个人（分别用编号 1，2，3，…，n 表示）围坐在一张圆桌周围，从编号为 k 的人开始顺时针报数，数到 m 的那个人出列；他的下一个人又从 1 开始，还是顺时针开始报数，数到 m 的那个人又出列；依次重复下去，直到圆桌上剩余一个人。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> number;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; person;</span><br><span class=\"line\"><span class=\"function\">person *<span class=\"title\">initLink</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    person *head = (person *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(person));</span><br><span class=\"line\">    head-&gt;number = <span class=\"number\">1</span>;</span><br><span class=\"line\">    head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    person *cyclic = head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        person *body = (person *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(person));</span><br><span class=\"line\">        body-&gt;number = i;</span><br><span class=\"line\">        body-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        cyclic-&gt;next = body;</span><br><span class=\"line\">        cyclic = cyclic-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cyclic-&gt;next = head; <span class=\"comment\">//首尾相连</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">findAndKillK</span><span class=\"params\">(person *head, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    person *tail = head;</span><br><span class=\"line\">    <span class=\"comment\">//找到链表第一个结点的上一个结点，为删除操作做准备</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tail-&gt;next != head)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tail = tail-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    person *p = head;</span><br><span class=\"line\">    <span class=\"comment\">//找到编号为k的人</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p-&gt;number != k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tail = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//从编号为k的人开始，只有符合p-&gt;next==p时，说明链表中除了p结点，所有编号都出列了，</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p-&gt;next != p)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到从p报数1开始，报m的人，并且还要知道数m-1de人的位置tail，方便做删除操作。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tail = p;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail-&gt;next = p-&gt;next; <span class=\"comment\">//从链表上将p结点摘下来</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"出列人的编号为:%d\\n\"</span>, p-&gt;number);</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">        p = tail-&gt;next; <span class=\"comment\">//继续使用p指针指向出列编号的下一个编号，游戏继续</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"出列人的编号为:%d\\n\"</span>, p-&gt;number);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"输入圆桌上的人数n:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    person *head = initLink(n);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"从第k人开始报数(k&gt;1且k&lt;%d)：\"</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;k);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"数到m的人出列：\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;m);</span><br><span class=\"line\">    findAndKillK(head, k, m);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","more":"<!-- build time:Mon Apr 27 2020 17:51:27 GMT+0800 (GMT+08:00) --><h1 id=\"线性表\"><a class=\"markdownIt-Anchor\" href=\"#线性表\"></a> 线性表</h1><p>将具有“一对一”关系的数据“线性”地存储到物理空间中，这种存储结构就称为线性存储结构（简称线性表）。使用线性表存储的数据，如同向数组中存储数据那样，要求数据类型必须一致，也就是说，线性表存储的数据，要么全不都是整形，要么全部都是字符串。一半是整形，另一半是字符串的一组数据无法使用线性表存储。</p><h2 id=\"顺序存储结构和链式存储结构\"><a class=\"markdownIt-Anchor\" href=\"#顺序存储结构和链式存储结构\"></a> 顺序存储结构和链式存储结构</h2><ul><li>将数据依次存储在连续的整块物理空间中，这种存储结构称为顺序存储结构(顺序表)</li><li>数据分散的存储在物理空间中，通过一根线保存着它们之间的逻辑关系，这种存储结构称为链式存储结构(链表)</li></ul><h3 id=\"前驱和后继\"><a class=\"markdownIt-Anchor\" href=\"#前驱和后继\"></a> 前驱和后继</h3><p>数据结构中，一组数据中的每个个体被称为“数据元素”。</p><ul><li>某一元素的左侧相邻元素称为“直接前驱”，位于此元素左侧的所有元素都统称为“前驱元素”；</li><li>某一元素的右侧相邻元素称为“直接后继”，位于此元素右侧的所有元素都统称为“后继元素”；</li></ul><div align=\"center\"><img src=\"/image/prev.png\" width=\"400\"></div><center>图1 前驱和后继</center><h1 id=\"顺序表顺序存储结构及初始化\"><a class=\"markdownIt-Anchor\" href=\"#顺序表顺序存储结构及初始化\"></a> 顺序表(顺序存储结构)及初始化</h1><p>顺序表存储数据时，会提前申请一整块足够大小的物理空间，然后将数据依次存储起来，存储时做到数据元素之间不留一丝缝隙。顺序表存储数据使用的是数组。</p><h2 id=\"顺序表的初始化\"><a class=\"markdownIt-Anchor\" href=\"#顺序表的初始化\"></a> 顺序表的初始化</h2><p>使用顺序表存储数据之前，除了要申请足够大小的物理空间之外，为了方便后期使用表中的数据，顺序表还需要实时记录以下 2 项数据：</p><ul><li>顺序表申请的存储容量</li><li>顺序表的长度，元素的个数</li></ul><p><font color=\"red\">正常状态下，顺序表申请的存储容量要大于顺序表的长度。</font></p><p>自定义顺序表的结构体：C语言实现：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>* head;  <span class=\"comment\">//动态数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length; <span class=\"comment\">//顺序表的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>; <span class=\"comment\">//顺序表分配的存储容量</span></span><br><span class=\"line\">&#125;table;</span><br></pre></td></tr></table></figure><p>建立顺序表需要做如下工作：</p><ul><li>给head动态数据申请足够大小的物理空间；</li><li>给size和length赋初值；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Size 5</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> * head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;</span><br><span class=\"line\">&#125;table;</span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">initTable</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    table t;</span><br><span class=\"line\">    t.head=(<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(Size*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));  <span class=\"comment\">//构造一个空的顺序表，动态申请存储空间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!t.head) <span class=\"comment\">//如果申请失败，作出提示并直接退出程序</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"初始化失败\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.length=<span class=\"number\">0</span>;  <span class=\"comment\">//长度为0</span></span><br><span class=\"line\">    t.<span class=\"built_in\">size</span>=Size;  <span class=\"comment\">//存储空间为Size</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出顺序表中元素的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayTable</span><span class=\"params\">(table t)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;t.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,t.head[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    table t=initTable();</span><br><span class=\"line\">    <span class=\"comment\">//向顺序表中添加元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=Size; i++) &#123;</span><br><span class=\"line\">        t.head[i<span class=\"number\">-1</span>]=i;</span><br><span class=\"line\">        t.length++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"顺序表中存储的元素分别是：\\n\"</span>);</span><br><span class=\"line\">    displayTable(t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"顺序表插入元素\"><a class=\"markdownIt-Anchor\" href=\"#顺序表插入元素\"></a> 顺序表插入元素</h2><p>虽然数据元素插入顺序表中的位置有所不同，但是都使用的是同一种方式去解决，即：通过遍历，找到数据元素要插入的位置，然后做如下两步工作：</p><ul><li>将要插入位置元素以及后续的元素整体向后移动一个位置；</li><li>将元素放到腾出来的位置上；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//插入函数，其中，elem为插入的元素，add为插入到顺序表的位置</span></span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">addTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> elem, <span class=\"keyword\">int</span> add)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断插入本身是否存在问题（如果插入元素位置比整张表的长度+1还大（如果相等，是尾随的情况），或者插入的位置本身不存在，程序作为提示并自动退出）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (add &gt; t.length + <span class=\"number\">1</span> || add &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"插入位置有问题\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//做插入操作时，首先需要看顺序表是否有多余的存储空间提供给插入的元素，如果没有，需要申请</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t.length == t.<span class=\"built_in\">size</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t.head = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">realloc</span>(t.head, (t.<span class=\"built_in\">size</span> + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!t.head)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"存储分配失败\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t.<span class=\"built_in\">size</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//插入操作，需要将从插入位置开始的后续元素，逐个后移</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = t.length - <span class=\"number\">1</span>; i &gt;= add - <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t.head[i + <span class=\"number\">1</span>] = t.head[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//后移完成后，直接将所需插入元素，添加到顺序表的相应位置</span></span><br><span class=\"line\">    t.head[add - <span class=\"number\">1</span>] = elem;</span><br><span class=\"line\">    <span class=\"comment\">//由于添加了元素，所以长度+1</span></span><br><span class=\"line\">    t.length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><font color=\"red\">注意，动态数组额外申请更多物理空间使用的是 realloc 函数。并且，在实现后续元素整体后移的过程，目标位置其实是有数据的，还是 3，只是下一步新插入元素时会把旧元素直接覆盖。</font></p><h2 id=\"顺序表删除元素\"><a class=\"markdownIt-Anchor\" href=\"#顺序表删除元素\"></a> 顺序表删除元素</h2><p>从顺序表中删除指定元素，实现起来非常简单，只需找到目标元素，并将其后续所有元素整体前移 1 个位置即可。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">table <span class=\"title\">delTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> add)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"被删除元素的位置有误\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//删除操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=add; i&lt;t.length; i++) &#123;</span><br><span class=\"line\">        t.head[i<span class=\"number\">-1</span>]=t.head[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"顺序表查找元素\"><a class=\"markdownIt-Anchor\" href=\"#顺序表查找元素\"></a> 顺序表查找元素</h2><p>顺序表中查找目标元素，可以使用多种查找算法实现，比如说二分查找算法、顺序查找等</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顺序查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectTable</span><span class=\"params\">(table t,<span class=\"keyword\">int</span> elem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;t.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t.head[i]==elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;<span class=\"comment\">//如果查找失败，返回-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"更改元素\"><a class=\"markdownIt-Anchor\" href=\"#更改元素\"></a> 更改元素</h2><p>顺序表更改元素的实现过程是：</p><ul><li>找到目标元素；</li><li>直接修改该元素的值；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">table <span class=\"title\">amendTable</span><span class=\"params\">(table t,<span class=\"keyword\">int</span> elem,<span class=\"keyword\">int</span> newElem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> add=selectTable(t, elem);</span><br><span class=\"line\">    t.head[add<span class=\"number\">-1</span>]=newElem;<span class=\"comment\">//由于返回的是元素在顺序表中的位置，所以-1就是该元素在数组中的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\"></a> 单链表</h1><p>与顺序表不同，链表不限制数据的物理存储状态，换句话说，使用链表存储的数据元素，其物理存储位置是随机的。<font color=\"red\">通过指针表示数据之间逻辑关系的存储结构就是链式存储结构。</font></p><h2 id=\"链表的节点\"><a class=\"markdownIt-Anchor\" href=\"#链表的节点\"></a> 链表的节点</h2><p>链表中每个数据的存储都由以下两部分组成：</p><ul><li>数据元素本身，其所在的区域称为数据域；</li><li>指向直接后继元素的指针，所在的区域称为指针域；</li></ul><div align=\"center\"><img src=\"/image/节点结构.png\" width=\"400\"></div><center>图2 节点结构</center><p>链表中每个节点的结构体实现c代码：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Link</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> elem; <span class=\"comment\">//代表数据域</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Link</span> * <span class=\"title\">next</span>;</span> <span class=\"comment\">//代表指针域，指向直接后继元素</span></span><br><span class=\"line\">&#125;link; <span class=\"comment\">//link为节点名，每个节点都是一个 link 结构体</span></span><br></pre></td></tr></table></figure><h2 id=\"头节点-头指针和首元节点\"><a class=\"markdownIt-Anchor\" href=\"#头节点-头指针和首元节点\"></a> 头节点、头指针和首元节点</h2><p>一个完整的链表需要由以下几部分构成：</p><ul><li>头指针：一个普通的指针，它的特点是永远指向链表第一个节点的位置。很明显，头指针用于指明链表的位置，便于后期找到链表并使用表中的数据；</li><li>头节点：其实就是一个不存任何数据的空节点，通常作为链表的第一个节点。对于链表来说，头节点不是必须的，它的作用只是为了方便解决某些实际问题；</li><li>首元节点：由于头节点（也就是空节点）的缘故，链表中称第一个存有数据的节点为首元节点。首元节点只是对链表中第一个存有数据节点的一个称谓，没有实际意义；</li><li>其他节点：链表中其他的节点；</li></ul><p><font color=\"red\">注意：链表中有头节点时，头指针指向头节点；反之，若链表中没有头节点，则头指针指向首元节点。</font></p><h2 id=\"链表的创建初始化\"><a class=\"markdownIt-Anchor\" href=\"#链表的创建初始化\"></a> 链表的创建(初始化)</h2><p>创建一个链表步骤如下：</p><ul><li>声明一个头指针（如果有必要，可以声明一个头节点）；</li><li>创建多个存储数据的节点，在创建的过程中，要随时与其前驱节点建立逻辑关系；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个存储 &#123;1,2,3,4&#125; 且含头节点的链表</span></span><br><span class=\"line\"><span class=\"function\">link * <span class=\"title\">initLink</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    link * p=(link*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(link));<span class=\"comment\">//创建一个头结点</span></span><br><span class=\"line\">    link * temp=p;<span class=\"comment\">//声明一个指针指向头结点，</span></span><br><span class=\"line\">    <span class=\"comment\">//生成链表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">        link *a=(link*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(link));</span><br><span class=\"line\">        a-&gt;elem=i;</span><br><span class=\"line\">        a-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        temp-&gt;next=a;</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表插入元素\"><a class=\"markdownIt-Anchor\" href=\"#链表插入元素\"></a> 链表插入元素</h2><p>虽然新元素的插入位置不固定，但是链表插入元素的思想是固定的，只需做以下两步操作，即可将新元素插入到指定的位置：</p><ul><li>将新结点的 next 指针指向插入位置后的结点；</li><li>将插入位置前结点的 next 指针指向插入结点；</li></ul><p><font color=\"red\">注意：链表插入元素的操作必须是先步骤 1，再步骤 2；反之，若先执行步骤 2，除非再添加一个指针，作为插入位置后续链表的头指针，否则会导致插入位置后的这部分链表丢失，无法再实现步骤 1。</font></p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//p为原链表，elem表示新数据元素，add表示新元素要插入的位置</span></span><br><span class=\"line\"><span class=\"function\">link * <span class=\"title\">insertElem</span><span class=\"params\">(link * p, <span class=\"keyword\">int</span> elem, <span class=\"keyword\">int</span> add)</span> </span>&#123;</span><br><span class=\"line\">    link * temp = p;<span class=\"comment\">//创建临时结点temp</span></span><br><span class=\"line\">    <span class=\"comment\">//首先找到要插入位置的上一个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; add; i++) &#123;</span><br><span class=\"line\">        temp = temp-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"插入位置无效\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建插入结点c</span></span><br><span class=\"line\">    link * c = (link*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(link));</span><br><span class=\"line\">    c-&gt;elem = elem;</span><br><span class=\"line\">    <span class=\"comment\">//向链表中插入结点</span></span><br><span class=\"line\">    c-&gt;next = temp-&gt;next;</span><br><span class=\"line\">    temp-&gt;next = c;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表删除元素\"><a class=\"markdownIt-Anchor\" href=\"#链表删除元素\"></a> 链表删除元素</h2><p>从链表中删除数据元素需要进行以下 2步操作：</p><ul><li>将结点从链表中摘下来;</li><li>手动释放掉结点，回收被结点占用的存储空间;</li></ul><blockquote><p>temp-&gt;next=temp-&gt;next-&gt;next;</p></blockquote><p>执行效果如图3所示：</p><div align=\"center\"><img src=\"/image/链表删除元素.png\" width=\"400\"></div><center>图3 链表删除元素</center><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//p为原链表，add为要删除元素的值</span></span><br><span class=\"line\"><span class=\"function\">link * <span class=\"title\">delElem</span><span class=\"params\">(link * p, <span class=\"keyword\">int</span> add)</span> </span>&#123;</span><br><span class=\"line\">    link * temp = p;</span><br><span class=\"line\">    <span class=\"comment\">//遍历到被删除结点的上一个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; add; i++) &#123;</span><br><span class=\"line\">        temp = temp-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp-&gt;next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"没有该结点\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    link * del = temp-&gt;next;<span class=\"comment\">//单独设置一个指针指向被删除结点，以防丢失</span></span><br><span class=\"line\">    temp-&gt;next = temp-&gt;next-&gt;next;<span class=\"comment\">//删除某个结点的方法就是更改前一个结点的指针域</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(del);<span class=\"comment\">//手动释放该结点，防止内存泄漏</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表查找元素\"><a class=\"markdownIt-Anchor\" href=\"#链表查找元素\"></a> 链表查找元素</h2><p>从表头依次遍历表中节点，用被查找元素与各节点数据域中存储的数据元素进行比对，直至比对成功或遍历至链表最末端的 NULL（比对失败的标志）。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//p为原链表，elem表示被查找元素、</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectElem</span><span class=\"params\">(link * p,<span class=\"keyword\">int</span> elem)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//新建一个指针t，初始化为头指针 p</span></span><br><span class=\"line\">    link * t=p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//由于头节点的存在，因此while中的判断为t-&gt;next</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t-&gt;next) &#123;</span><br><span class=\"line\">        t=t-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t-&gt;elem==elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//程序执行至此处，表示查找失败</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表更新元素\"><a class=\"markdownIt-Anchor\" href=\"#链表更新元素\"></a> 链表更新元素</h2><p>更新链表中的元素，只需通过遍历找到存储此元素的节点，对节点中的数据域做更改操作即可。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更新函数，其中，add 表示更改结点在链表中的位置，newElem 为新的数据域的值</span></span><br><span class=\"line\"><span class=\"function\">link *<span class=\"title\">amendElem</span><span class=\"params\">(link * p,<span class=\"keyword\">int</span> add,<span class=\"keyword\">int</span> newElem)</span></span>&#123;</span><br><span class=\"line\">    link * temp=p;</span><br><span class=\"line\">    temp=temp-&gt;next;<span class=\"comment\">//在遍历之前，temp指向首元结点</span></span><br><span class=\"line\">    <span class=\"comment\">//遍历到待更新结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;add; i++) &#123;</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp-&gt;elem=newElem;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"顺序表和链表的优缺点区别-特点\"><a class=\"markdownIt-Anchor\" href=\"#顺序表和链表的优缺点区别-特点\"></a> 顺序表和链表的优缺点(区别、特点)</h1><ul><li>顺序表存储数据，需预先申请一整块足够大的存储空间，然后将数据按照次序逐一存储，数据之间紧密贴合，不留一丝空隙，如图4a)所示；</li><li>链表的存储方式与顺序表截然相反，什么时候存储数据，什么时候才申请存储空间，数据之间的逻辑关系依靠每个数据元素携带的指针维持，如图4b)所示；</li></ul><div align=\"center\"><img src=\"/image/区别.png\" width=\"400\"></div><h2 id=\"开辟空间的方式\"><a class=\"markdownIt-Anchor\" href=\"#开辟空间的方式\"></a> 开辟空间的方式</h2><p>顺序表存储数据实行的是 “一次开辟，永久使用”，即存储数据之前先开辟好足够的存储空间，空间一旦开辟后期无法改变大小链表则不同，链表存储数据时一次只开辟存储一个节点的物理空间，如果后期需要还可以再申请。</p><p>因此，若只从开辟空间方式的角度去考虑，当存储数据的个数无法提前确定，又或是物理空间使用紧张以致无法一次性申请到足够大小的空间时，使用链表更有助于问题的解决。</p><h2 id=\"空间利用率\"><a class=\"markdownIt-Anchor\" href=\"#空间利用率\"></a> 空间利用率</h2><p>空间利用率的角度上看，顺序表的空间利用率显然要比链表高。链表在存储数据时，每次只申请一个节点的空间，且空间的位置是随机的</p><p>这种申请存储空间的方式会产生很多空间碎片，一定程序上造成了空间浪费。不仅如此，由于链表中每个数据元素都必须携带至少一个指针，因此，链表对所申请空间的利用率也没有顺序表高。空间碎片，指的是某些容量很小（1KB 甚至更小）以致无法得到有效利用的物理空间。</p><h2 id=\"时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度\"></a> 时间复杂度</h2><p>根据顺序表和链表在存储结构上的差异，问题类型主要分为以下 2 类：</p><ul><li>问题中主要涉及访问元素的操作，元素的插入、删除和移动操作极少；</li><li>问题中主要涉及元素的插入、删除和移动，访问元素的需求很少；</li></ul><p>第 1 类问题适合使用顺序表。这是因为，顺序表中存储的元素可以使用数组下标直接访问，无需遍历整个表，因此使用顺序表访问元素的时间复杂度为 O(1)；而在链表中访问数据元素，需要从表头依次遍历，直到找到指定节点，花费的时间复杂度为 O(n);</p><p>第 2 类问题则适合使用链表。链表中数据元素之间的逻辑关系靠的是节点之间的指针，当需要在链表中某处插入或删除节点时，只需改变相应节点的指针指向即可，无需大量移动元素，因此链表中插入、删除或移动数据所耗费的时间复杂度为 O(1)；而顺序表中，插入、删除和移动数据可能会牵涉到大量元素的整体移动，因此时间复杂度至少为 O(n);</p><h1 id=\"静态链表及其创建\"><a class=\"markdownIt-Anchor\" href=\"#静态链表及其创建\"></a> 静态链表及其创建</h1><p>使用静态链表存储数据，数据全部存储在数组中（和顺序表一样），但存储位置是随机的，数据之间&quot;一对一&quot;的逻辑关系通过一个整形变量（称为&quot;游标&quot;，和指针功能类似）维持（和链表类似）。</p><div align=\"center\"><img src=\"/image/静态链表.png\" width=\"400\"></div><center>图4 静态链表存储数据</center><p>静态链表会将第一个数据元素放到数组下标为 1 的位置（a[1]）中。从 a[1] 存储的数据元素 1 开始，通过存储的游标变量 3，就可以在 a[3] 中找到元素 1 的直接后继元素 2；同样，通过元素 a[3] 存储的游标变量 5，可以在 a[5] 中找到元素 2 的直接后继元素 3，这样的循环过程直到某元素的游标变量为 0 截止（因为 a[0] 默认不存储数据元素）。</p><h2 id=\"静态链表中的节点\"><a class=\"markdownIt-Anchor\" href=\"#静态链表中的节点\"></a> 静态链表中的节点</h2><p>静态链表存储数据元素也需要自定义数据类型，至少需要包含以下 2 部分信息：</p><ul><li>数据域：用于存储数据元素的值；</li><li>游标：其实就是数组下标，表示直接后继元素所在数组中的位置</li></ul><p>静态链表中节点构成的C语言实现：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cur;<span class=\"comment\">//游标</span></span><br><span class=\"line\">&#125;component;</span><br></pre></td></tr></table></figure><h2 id=\"备用链表\"><a class=\"markdownIt-Anchor\" href=\"#备用链表\"></a> 备用链表</h2><p>备用链表的作用是回收数组中未使用或之前使用过（目前未使用）的存储空间，留待后期使用。也就是说，静态链表使用数组申请的物理空间中，存有两个链表，一条连接数据，另一条连接数组中未使用的空间</p><blockquote><p>通常，备用链表的表头位于数组下标为 0（a[0]） 的位置，而数据链表的表头位于数组下标为 1（a[1]）的位置。</p></blockquote><h2 id=\"静态链表的创建\"><a class=\"markdownIt-Anchor\" href=\"#静态链表的创建\"></a> 静态链表的创建</h2><ul><li>在数据链表未初始化之前，数组中所有位置都处于空闲状态，都被链接到备用链表上。</li><li>向静态链表添加数据时，需提前从备用链表中摘除节点，供新数据使用。</li></ul><p><font color=\"red\">备用链表摘除节点最简单的方法是摘除 a[0] 的直接后继节点；同样，向备用链表中添加空闲节点也是添加作为 a[0] 新的直接后继节点。因为 a[0] 是备用链表的第一个节点，我们知道它的位置，操作它的直接后继节点相对容易，无需遍历备用链表，耗费的时间复杂度为 O(1)。</font></p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxSize 6</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* data */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cur;</span><br><span class=\"line\">&#125; component;</span><br><span class=\"line\"><span class=\"comment\">//将结构体数组中所有分量链接到备用链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reserveArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//初始化静态链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">initArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//输出函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> body)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从备用链表上摘下空闲节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mallocArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    component <span class=\"built_in\">array</span>[maxSize];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> body = initArr(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"静态链表：\\n\"</span>);</span><br><span class=\"line\">    displayArr(<span class=\"built_in\">array</span>, body);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建备用链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reserveArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxSize; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">array</span>[i].cur = i + <span class=\"number\">1</span>; <span class=\"comment\">//将每个数组分量链接到一起</span></span><br><span class=\"line\">        <span class=\"built_in\">array</span>[i].data = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[maxSize - <span class=\"number\">1</span>].cur = <span class=\"number\">0</span>; <span class=\"comment\">//链表最后一个节点的游标为0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//提前分配空间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mallocArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"built_in\">array</span>[<span class=\"number\">0</span>].cur;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[<span class=\"number\">0</span>].cur)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">array</span>[<span class=\"number\">0</span>].cur = <span class=\"built_in\">array</span>[i].cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化静态链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">initArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    reserveArr(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> body = mallocArr(<span class=\"built_in\">array</span>); <span class=\"comment\">//声明一个变量，把它当指针使，指向链表的最后的一个结点，因为链表为空，所以和头结点重合</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> tempBody = body;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = mallocArr(<span class=\"built_in\">array</span>); <span class=\"comment\">//从备用链表中拿出空闲的分量</span></span><br><span class=\"line\">        <span class=\"built_in\">array</span>[tempBody].cur = j;  <span class=\"comment\">//将申请的空闲分量链接在链表的最后一个结点后面</span></span><br><span class=\"line\">        <span class=\"built_in\">array</span>[j].data = i;        <span class=\"comment\">//给新申请的分量的数据域初始化</span></span><br><span class=\"line\">        tempBody = j;             <span class=\"comment\">//将指向链表最后一个结点的指针后移</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[tempBody].cur = <span class=\"number\">0</span>; <span class=\"comment\">//新的链表最后一个结点的指针设置为0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayArr</span><span class=\"params\">(component *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> body)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tempBody = body; <span class=\"comment\">//tempBody准备做遍历使用</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">array</span>[tempBody].cur)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d,%d \"</span>, <span class=\"built_in\">array</span>[tempBody].data, <span class=\"built_in\">array</span>[tempBody].cur);</span><br><span class=\"line\">        tempBody = <span class=\"built_in\">array</span>[tempBody].cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d,%d\\n\"</span>, <span class=\"built_in\">array</span>[tempBody].data, <span class=\"built_in\">array</span>[tempBody].cur);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"静态链表的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#静态链表的基本操作\"></a> 静态链表的基本操作</h2><h3 id=\"添加元素\"><a class=\"markdownIt-Anchor\" href=\"#添加元素\"></a> 添加元素</h3><p>将元素4添加到静态链表中的第3个位置上，实现过程如下：</p><ul><li>从备用链表中摘除一个节点，用于存储元素 4；</li><li>找到表中第 2 个节点（添加位置的前一个节点，这里是数据元素 2），将元素 2 的游标赋值给新元素 4；</li><li>将元素 4 所在数组中的下标赋值给元素 2 的游标；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertArr</span><span class=\"params\">(component * <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> body,<span class=\"keyword\">int</span> add,<span class=\"keyword\">char</span> a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tempBody=body;<span class=\"comment\">//tempBody做遍历结构体数组使用</span></span><br><span class=\"line\">    <span class=\"comment\">//找到要插入位置的上一个结点在数组中的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;add; i++) &#123;</span><br><span class=\"line\">        tempBody=<span class=\"built_in\">array</span>[tempBody].cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> insert=mallocArr(<span class=\"built_in\">array</span>);<span class=\"comment\">//申请空间，准备插入</span></span><br><span class=\"line\">    <span class=\"built_in\">array</span>[insert].data=a;</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[insert].cur=<span class=\"built_in\">array</span>[tempBody].cur;<span class=\"comment\">//新插入结点的游标等于其直接前驱结点的游标</span></span><br><span class=\"line\">    <span class=\"built_in\">array</span>[tempBody].cur=insert;<span class=\"comment\">//直接前驱结点的游标等于新插入结点所在数组中的下标</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"删除元素\"><a class=\"markdownIt-Anchor\" href=\"#删除元素\"></a> 删除元素</h3><p>静态链表中删除指定元素，只需实现以下 2 步操作：</p><ul><li>将存有目标元素的节点从数据链表中摘除；</li><li>将摘除节点添加到备用链表，以便下次再用；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//备用链表回收空间的函数，其中array为存储数据的数组，k表示未使用节点所在数组的下标</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeArr</span><span class=\"params\">(component * <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[k].cur=<span class=\"built_in\">array</span>[<span class=\"number\">0</span>].cur;</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[<span class=\"number\">0</span>].cur=k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除结点函数，a 表示被删除结点中数据域存放的数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deletArr</span><span class=\"params\">(component * <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> body,<span class=\"keyword\">char</span> a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tempBody=body;</span><br><span class=\"line\">    <span class=\"comment\">//找到被删除结点的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">array</span>[tempBody].data!=a) &#123;</span><br><span class=\"line\">        tempBody=<span class=\"built_in\">array</span>[tempBody].cur;</span><br><span class=\"line\">        <span class=\"comment\">//当tempBody为0时，表示链表遍历结束，说明链表中没有存储该数据的结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tempBody==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"链表中没有此数据\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//运行到此，证明有该结点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> del=tempBody;</span><br><span class=\"line\">    tempBody=body;</span><br><span class=\"line\">    <span class=\"comment\">//找到该结点的上一个结点，做删除操作</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">array</span>[tempBody].cur!=del) &#123;</span><br><span class=\"line\">        tempBody=<span class=\"built_in\">array</span>[tempBody].cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//将被删除结点的游标直接给被删除结点的上一个结点</span></span><br><span class=\"line\">    <span class=\"built_in\">array</span>[tempBody].cur=<span class=\"built_in\">array</span>[del].cur;</span><br><span class=\"line\">    <span class=\"comment\">//回收被摘除节点的空间</span></span><br><span class=\"line\">    freeArr(<span class=\"built_in\">array</span>, del);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"查找元素\"><a class=\"markdownIt-Anchor\" href=\"#查找元素\"></a> 查找元素</h3><p>静态链表查找指定元素，由于我们只知道静态链表第一个元素所在数组中的位置，因此只能通过逐个遍历静态链表的方式，查找存有指定数据元素的节点。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectElem</span><span class=\"params\">(component * <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> body,<span class=\"keyword\">char</span> elem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tempBody=body;</span><br><span class=\"line\">    <span class=\"comment\">//当游标值为0时，表示链表结束</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">array</span>[tempBody].cur!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[tempBody].data==elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tempBody;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tempBody=<span class=\"built_in\">array</span>[tempBody].cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;<span class=\"comment\">//返回-1，表示在链表中没有找到该元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"更改数据\"><a class=\"markdownIt-Anchor\" href=\"#更改数据\"></a> 更改数据</h3><p>找到目标元素所在的节点，直接更改节点中的数据域即可。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">amendElem</span><span class=\"params\">(component * <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> body,<span class=\"keyword\">char</span> oldElem,<span class=\"keyword\">char</span> newElem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> add=selectElem(<span class=\"built_in\">array</span>, body, oldElem);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (add==<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"无更改元素\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[add].data=newElem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"静态链表和动态链表区别\"><a class=\"markdownIt-Anchor\" href=\"#静态链表和动态链表区别\"></a> 静态链表和动态链表区别</h1><h2 id=\"静态链表\"><a class=\"markdownIt-Anchor\" href=\"#静态链表\"></a> 静态链表</h2><p>使用静态链表存储数据，需要预先申请足够大的一整块内存空间，也就是说，静态链表存储数据元素的个数从其创建的那一刻就已经确定，后期无法更改。</p><p>比如，如果创建静态链表时只申请存储10个数据元素的空间，那么在使用静态链表时，数据的存储个数就不能超过10个，否则程序就会发生错误。</p><p>不仅如此，静态链表是在固定大小的存储空间内随机存储各个数据元素，这就造成了静态链表中需要使用另一条链表（通常称为&quot;备用链表&quot;）来记录空间存储空间的位置，以便后期分配给新添加元素使用，如图 2 所示。</p><p>这意味着，如果你选择使用静态链表存储数据，你需要通过操控两条链表，一条是存储数据，另一条是记录空闲空间的位置。</p><h2 id=\"动态链表\"><a class=\"markdownIt-Anchor\" href=\"#动态链表\"></a> 动态链表</h2><p>使用动态链表存储数据，不需要预先申请内存空间，而是在需要的时候才向内存申请。也就是说，动态链表存储数据元素的个数是不限的，想存多少就存多少。</p><p>同时，使用动态链表的整个过程，你也只需操控一条存储数据的链表。当表中添加或删除数据元素时，你只需要通过 malloc 或 free 函数来申请或释放空间即可，实现起来比较简单。</p><h1 id=\"双向链表\"><a class=\"markdownIt-Anchor\" href=\"#双向链表\"></a> 双向链表</h1><p><font color=\"red\">双向，指的是各节点之间的逻辑关系是双向的，但通常头指针只设置一个，除非实际情况需要</font></p><p>双向链表中各节点包含以下3部分信息：</p><ul><li>指针域：用于指向当前节点的直接前驱节点；</li><li>数据域：用于存储数据元素。</li><li>指针域：用于指向当前节点的直接后继节点；</li></ul><p>双链表的节点结构的Ｃ语言实现：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">line</span>&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">line</span> * <span class=\"title\">prior</span>;</span> <span class=\"comment\">//指向直接前趋</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">line</span> * <span class=\"title\">next</span>;</span> <span class=\"comment\">//指向直接后继</span></span><br><span class=\"line\">&#125;<span class=\"built_in\">line</span>;</span><br></pre></td></tr></table></figure><h2 id=\"双向链表的创建\"><a class=\"markdownIt-Anchor\" href=\"#双向链表的创建\"></a> 双向链表的创建</h2><p>与单链表不同，双链表创建过程中，每创建一个新节点，都要与其前驱节点建立两次联系，分别是：</p><ul><li>将新节点的 prior 指针指向直接前驱节点；</li><li>将直接前驱节点的 next 指针指向新节点；</li></ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">line</span>* <span class=\"title\">initLine</span><span class=\"params\">(<span class=\"built_in\">line</span> * head)</span></span>&#123;</span><br><span class=\"line\">    head=(<span class=\"built_in\">line</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">line</span>));<span class=\"comment\">//创建链表第一个结点（首元结点）</span></span><br><span class=\"line\">    head-&gt;prior=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    head-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    head-&gt;data=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">line</span> * <span class=\"built_in\">list</span>=head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>; i&lt;=<span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建并初始化一个新结点</span></span><br><span class=\"line\">        <span class=\"built_in\">line</span> * body=(<span class=\"built_in\">line</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">line</span>));</span><br><span class=\"line\">        body-&gt;prior=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        body-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        body-&gt;data=i;</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;next=body;<span class=\"comment\">//直接前趋结点的next指针指向新结点</span></span><br><span class=\"line\">        body-&gt;prior=<span class=\"built_in\">list</span>;<span class=\"comment\">//新结点指向直接前趋结点</span></span><br><span class=\"line\">        <span class=\"built_in\">list</span>=<span class=\"built_in\">list</span>-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"添加节点\"><a class=\"markdownIt-Anchor\" href=\"#添加节点\"></a> 添加节点</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">line</span> * <span class=\"title\">insertLine</span><span class=\"params\">(<span class=\"built_in\">line</span> * head,<span class=\"keyword\">int</span> data,<span class=\"keyword\">int</span> add)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//新建数据域为data的结点</span></span><br><span class=\"line\">    <span class=\"built_in\">line</span> * temp=(<span class=\"built_in\">line</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">line</span>));</span><br><span class=\"line\">    temp-&gt;data=data;</span><br><span class=\"line\">    temp-&gt;prior=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    temp-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">//插入到链表头，要特殊考虑</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (add==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        temp-&gt;next=head;</span><br><span class=\"line\">        head-&gt;prior=temp;</span><br><span class=\"line\">        head=temp;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">line</span> * body=head;</span><br><span class=\"line\">        <span class=\"comment\">//找到要插入位置的前一个结点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;add<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">            body=body-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断条件为真，说明插入位置为链表尾</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body-&gt;next==<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            body-&gt;next=temp;</span><br><span class=\"line\">            temp-&gt;prior=body;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            body-&gt;next-&gt;prior=temp;</span><br><span class=\"line\">            temp-&gt;next=body-&gt;next;</span><br><span class=\"line\">            body-&gt;next=temp;</span><br><span class=\"line\">            temp-&gt;prior=body;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"删除节点\"><a class=\"markdownIt-Anchor\" href=\"#删除节点\"></a> 删除节点</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除结点的函数，data为要删除结点的数据域的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">line</span> * <span class=\"title\">delLine</span><span class=\"params\">(<span class=\"built_in\">line</span> * head,<span class=\"keyword\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">line</span> * temp=head;</span><br><span class=\"line\">    <span class=\"comment\">//遍历链表</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (temp) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断当前结点中数据域和data是否相等，若相等，摘除该结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp-&gt;data==data) &#123;</span><br><span class=\"line\">            temp-&gt;prior-&gt;next=temp-&gt;next;</span><br><span class=\"line\">            temp-&gt;next-&gt;prior=temp-&gt;prior;</span><br><span class=\"line\">            <span class=\"built_in\">free</span>(temp);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"链表中无该数据元素\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"查找节点\"><a class=\"markdownIt-Anchor\" href=\"#查找节点\"></a> 查找节点</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//双链表查找指定元素的实现同单链表类似，都是从表头依次遍历表中元素。</span></span><br><span class=\"line\"><span class=\"comment\">//head为原双链表，elem表示被查找元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectElem</span><span class=\"params\">(<span class=\"built_in\">line</span> * head,<span class=\"keyword\">int</span> elem)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//新建一个指针t，初始化为头指针 head</span></span><br><span class=\"line\">    <span class=\"built_in\">line</span> * t=head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t-&gt;data==elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        t=t-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//程序执行至此处，表示查找失败</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"更改节点\"><a class=\"markdownIt-Anchor\" href=\"#更改节点\"></a> 更改节点</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更新函数，其中，add 表示更改结点在双链表中的位置，newElem 为新数据的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">line</span> *<span class=\"title\">amendElem</span><span class=\"params\">(<span class=\"built_in\">line</span> * p,<span class=\"keyword\">int</span> add,<span class=\"keyword\">int</span> newElem)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">line</span> * temp=p;</span><br><span class=\"line\">    <span class=\"comment\">//遍历到被删除结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;add; i++) &#123;</span><br><span class=\"line\">        temp=temp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp-&gt;data=newElem;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"循环链表\"><a class=\"markdownIt-Anchor\" href=\"#循环链表\"></a> 循环链表</h1><p>将表中最后一个结点的指针指向头结点，虽然循环链表成环状，但本质上还是链表，因此在循环链表中，依然能够找到头指针和首元节点等。循环链表和普通链表相比，唯一的不同就是循环链表首尾相连，其他都完全一样。</p><h2 id=\"约瑟夫环\"><a class=\"markdownIt-Anchor\" href=\"#约瑟夫环\"></a> 约瑟夫环</h2><p>已知 n 个人（分别用编号 1，2，3，…，n 表示）围坐在一张圆桌周围，从编号为 k 的人开始顺时针报数，数到 m 的那个人出列；他的下一个人又从 1 开始，还是顺时针开始报数，数到 m 的那个人又出列；依次重复下去，直到圆桌上剩余一个人。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> number;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; person;</span><br><span class=\"line\"><span class=\"function\">person *<span class=\"title\">initLink</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    person *head = (person *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(person));</span><br><span class=\"line\">    head-&gt;number = <span class=\"number\">1</span>;</span><br><span class=\"line\">    head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    person *cyclic = head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        person *body = (person *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(person));</span><br><span class=\"line\">        body-&gt;number = i;</span><br><span class=\"line\">        body-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        cyclic-&gt;next = body;</span><br><span class=\"line\">        cyclic = cyclic-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cyclic-&gt;next = head; <span class=\"comment\">//首尾相连</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">findAndKillK</span><span class=\"params\">(person *head, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    person *tail = head;</span><br><span class=\"line\">    <span class=\"comment\">//找到链表第一个结点的上一个结点，为删除操作做准备</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tail-&gt;next != head)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tail = tail-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    person *p = head;</span><br><span class=\"line\">    <span class=\"comment\">//找到编号为k的人</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p-&gt;number != k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tail = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//从编号为k的人开始，只有符合p-&gt;next==p时，说明链表中除了p结点，所有编号都出列了，</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p-&gt;next != p)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到从p报数1开始，报m的人，并且还要知道数m-1de人的位置tail，方便做删除操作。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tail = p;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail-&gt;next = p-&gt;next; <span class=\"comment\">//从链表上将p结点摘下来</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"出列人的编号为:%d\\n\"</span>, p-&gt;number);</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">        p = tail-&gt;next; <span class=\"comment\">//继续使用p指针指向出列编号的下一个编号，游戏继续</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"出列人的编号为:%d\\n\"</span>, p-&gt;number);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"输入圆桌上的人数n:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    person *head = initLink(n);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"从第k人开始报数(k&gt;1且k&lt;%d)：\"</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;k);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"数到m的人出列：\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;m);</span><br><span class=\"line\">    findAndKillK(head, k, m);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"},{"name":"数据结构","path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","path":"api/tags/数据结构.json"},{"name":"算法导论","path":"api/tags/算法导论.json"},{"name":"线性表","path":"api/tags/线性表.json"}]}