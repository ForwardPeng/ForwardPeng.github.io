{"title":"interview-tree","slug":"interview-tree","date":"2020-04-16T02:24:14.000Z","updated":"2020-04-16T12:06:04.779Z","comments":true,"path":"api/articles/interview-tree.json","excerpt":null,"covers":null,"content":"<!-- build time:Sat Apr 18 2020 17:43:34 GMT+0800 (GMT+08:00) --><h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p>L、D、R分别表示遍历左子树、访问根节点和遍历右子树</p><ul><li>先序遍历：DLR</li><li>中序遍历：LDR</li><li><p>后序遍历：LRD</p><blockquote><p>确定一个二叉树，必须有中序遍历</p><h2 id=\"二叉树的性质\"><a href=\"#二叉树的性质\" class=\"headerlink\" title=\"二叉树的性质\"></a>二叉树的性质</h2></blockquote></li><li><strong>性质1</strong>：在二叉树中第i层的结点数最多为$2^{i - 1}（i \\geq 1）$</li><li><strong>性质2</strong>：高度为k的二叉树节点其结点总数最多为$2^{k} - 1（k \\geq 1）$</li><li><strong>性质</strong>3：对任意的非空二叉树T，如果叶节点的个数为$n_{0}$，而其度为2的结点数为$n_{2}$，则：$n{0} = n_{2} + 1$</li></ul><h2 id=\"满二叉树\"><a href=\"#满二叉树\" class=\"headerlink\" title=\"满二叉树\"></a>满二叉树</h2><p>深度为k，且有$2^{k} - 1$个节点称为满二叉树；</p><ul><li><strong>性质4</strong>：第i层上的结点数为$2^{i - 1}$；</li></ul><h2 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h2><p>深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中，序号为1至n的节点对应时，称之为完全二叉树。</p><ul><li><strong>性质5</strong>：对于具有n个结点的完全二叉树的高度为$log^{n}_{2} + 1$</li></ul><p>二叉树的构造<br></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, val=None)</span>:</span></span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.right = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.parent = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data: , n)</span>:</span> <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &gt;= len(data):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> data[n] == <span class=\"string\">'#'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        node = TreeNode()</span><br><span class=\"line\">        node.val = data[n]</span><br><span class=\"line\">        </span><br><span class=\"line\">        node.left = Tree(data, n + <span class=\"number\">1</span>)</span><br><span class=\"line\">        node.right = Tree(data, n + <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","more":"<!-- build time:Sat Apr 18 2020 17:43:34 GMT+0800 (GMT+08:00) --><h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p>L、D、R分别表示遍历左子树、访问根节点和遍历右子树</p><ul><li>先序遍历：DLR</li><li>中序遍历：LDR</li><li><p>后序遍历：LRD</p><blockquote><p>确定一个二叉树，必须有中序遍历</p><h2 id=\"二叉树的性质\"><a href=\"#二叉树的性质\" class=\"headerlink\" title=\"二叉树的性质\"></a>二叉树的性质</h2></blockquote></li><li><strong>性质1</strong>：在二叉树中第i层的结点数最多为$2^{i - 1}（i \\geq 1）$</li><li><strong>性质2</strong>：高度为k的二叉树节点其结点总数最多为$2^{k} - 1（k \\geq 1）$</li><li><strong>性质</strong>3：对任意的非空二叉树T，如果叶节点的个数为$n_{0}$，而其度为2的结点数为$n_{2}$，则：$n{0} = n_{2} + 1$</li></ul><h2 id=\"满二叉树\"><a href=\"#满二叉树\" class=\"headerlink\" title=\"满二叉树\"></a>满二叉树</h2><p>深度为k，且有$2^{k} - 1$个节点称为满二叉树；</p><ul><li><strong>性质4</strong>：第i层上的结点数为$2^{i - 1}$；</li></ul><h2 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h2><p>深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中，序号为1至n的节点对应时，称之为完全二叉树。</p><ul><li><strong>性质5</strong>：对于具有n个结点的完全二叉树的高度为$log^{n}_{2} + 1$</li></ul><p>二叉树的构造<br></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, val=None)</span>:</span></span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.right = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.parent = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data: , n)</span>:</span> <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &gt;= len(data):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> data[n] == <span class=\"string\">'#'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        node = TreeNode()</span><br><span class=\"line\">        node.val = data[n]</span><br><span class=\"line\">        </span><br><span class=\"line\">        node.left = Tree(data, n + <span class=\"number\">1</span>)</span><br><span class=\"line\">        node.right = Tree(data, n + <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","categories":[{"name":"面试","path":"api/categories/面试.json"}],"tags":[{"name":"数据结构","path":"api/tags/数据结构.json"},{"name":"树","path":"api/tags/树.json"}]}