{"title":"SQL-存储","slug":"sql-存储","date":"2020-04-21T09:11:25.000Z","updated":"2020-04-21T13:53:12.271Z","comments":true,"path":"api/articles/sql-存储.json","excerpt":null,"covers":null,"content":"<!-- build time:Sat Apr 25 2020 15:20:03 GMT+0800 (GMT+08:00) --><h1 id=\"存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#存储引擎\"></a> 存储引擎</h1><h2 id=\"什么是存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#什么是存储引擎\"></a> 什么是存储引擎</h2><p>数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。</p><p><font color=\"red\">InnoDB 事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。MySQL 5.5.5 之后，InnoDB 作为默认存储引擎。</font></p><p>MyISAM 是基于 ISAM 的存储引擎，并对其进行扩展，是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一。MyISAM 拥有较高的插入、查询速度，但不支持事务<br>MEMORY 存储引擎将表中的数据存储到内存中，为查询和引用其他数据提供快速访问。</p><h2 id=\"mysql-57-支持的存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#mysql-57-支持的存储引擎\"></a> MySQL 5.7 支持的存储引擎</h2><p>MySQL 5.7 支持的存储引擎有 InnoDB、MyISAM、Memory、Merge、Archive、Federated、CSV、BLACKHOLE 等。可以使用SHOW ENGINES语句查看系统所支持的引擎类型，结果如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW ENGINES;</span><br><span class=\"line\">+<span class=\"comment\">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class=\"line\">| Engine             | Support | <span class=\"keyword\">Comment</span>                                                        | Transactions | XA   | Savepoints |</span><br><span class=\"line\">+<span class=\"comment\">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class=\"line\">| <span class=\"keyword\">InnoDB</span>             | <span class=\"keyword\">DEFAULT</span> | Supports transactions, <span class=\"keyword\">row</span>-<span class=\"keyword\">level</span> locking, <span class=\"keyword\">and</span> <span class=\"keyword\">foreign</span> <span class=\"keyword\">keys</span>     | YES          | YES  | YES        |</span><br><span class=\"line\">| MRG_MYISAM         | YES     | Collection <span class=\"keyword\">of</span> identical MyISAM <span class=\"keyword\">tables</span>                          | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| <span class=\"keyword\">MEMORY</span>             | YES     | <span class=\"keyword\">Hash</span> based, <span class=\"keyword\">stored</span> <span class=\"keyword\">in</span> <span class=\"keyword\">memory</span>, useful <span class=\"keyword\">for</span> <span class=\"keyword\">temporary</span> <span class=\"keyword\">tables</span>      | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| BLACKHOLE          | YES     | /dev/<span class=\"literal\">null</span> <span class=\"keyword\">storage</span> <span class=\"keyword\">engine</span> (anything you write <span class=\"keyword\">to</span> it disappears) | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| MyISAM             | YES     | MyISAM <span class=\"keyword\">storage</span> <span class=\"keyword\">engine</span>                                          | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| CSV                | YES     | CSV <span class=\"keyword\">storage</span> <span class=\"keyword\">engine</span>                                             | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| <span class=\"keyword\">ARCHIVE</span>            | YES     | <span class=\"keyword\">Archive</span> <span class=\"keyword\">storage</span> <span class=\"keyword\">engine</span>                                         | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| PERFORMANCE_SCHEMA | YES     | <span class=\"keyword\">Performance</span> <span class=\"keyword\">Schema</span>                                             | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| FEDERATED          | <span class=\"keyword\">NO</span>      | Federated MySQL <span class=\"keyword\">storage</span> <span class=\"keyword\">engine</span>                                 | <span class=\"literal\">NULL</span>         | <span class=\"literal\">NULL</span> | <span class=\"literal\">NULL</span>       |</span><br><span class=\"line\">+<span class=\"comment\">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class=\"line\"><span class=\"number\">9</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"comment\"># Support 列的值表示某种引擎是否能使用，YES表示可以使用，NO表示不能使用，DEFAULT表示该引擎为当前默认的存储引擎</span></span><br></pre></td></tr></table></figure><h2 id=\"选择mysql存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#选择mysql存储引擎\"></a> 选择MySQL存储引擎</h2><p>不同的存储引擎都有各自的特点，以适应不同的需求。</p><table><thead><tr><th>功能</th><th>MyISAM</th><th>MEMORY</th><th>InnoDB</th><th>Archive</th></tr></thead><tbody><tr><td>存储限制</td><td>256TB</td><td>RAM</td><td>64TB</td><td>None</td></tr><tr><td>支持事务</td><td>No</td><td>No</td><td>Yes</td><td>No</td></tr><tr><td>支持全文索引</td><td>Yes</td><td>No</td><td>No</td><td>No</td></tr><tr><td>支持树索引</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>支持哈希索引</td><td>No</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>支持数据缓存</td><td>No</td><td>N/A</td><td>Yes</td><td>No</td></tr><tr><td>支持外键</td><td>No</td><td>No</td><td>Yes</td><td>No</td></tr></tbody></table><p>选择MySQL存储引擎：</p><ul><li>如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 是一个很好的选择。</li><li>如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。</li><li>如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。</li><li>如果只有 INSERT 和 SELECT 操作，可以选择Archive 引擎，Archive 存储引擎支持高并发的插入操作，但是本身并不是事务安全的。Archive 存储引擎非常适合存储归档数据，如记录日志信息可以使用 Archive 引擎</li></ul><p>修改数据库临时的默认存储引擎:</p><blockquote><p>SET default_storage_engine=&lt; 存储引擎名 &gt;</p></blockquote><h1 id=\"存储过程简介\"><a class=\"markdownIt-Anchor\" href=\"#存储过程简介\"></a> 存储过程简介</h1><p>存储过程是一组为了完成特定功能的 SQL 语句集合。使用存储过程的目的是将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务器中，因此称为存储过程。当以后需要数据库提供与已定义好的存储过程的功能相同的服务时，只需调用“CALL存储过程名字”即可自动完成。优点如下：</p><p><strong>1.封装性</strong><br>存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的 SQL 语句，并且数据库专业人员可以随时对存储过程进行修改，而不会影响到调用它的应用程序源代码。</p><p><strong>2.可增强 SQL 语句的功能和灵活性</strong><br>存储过程可以用流程控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</p><p><strong>3.可减少网络流量</strong><br>由于存储过程是在服务器端运行的，且执行速度快，因此当客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而可降低网络负载。</p><p><strong>4.高性能</strong><br>存储过程执行一次后，产生的二进制代码就驻留在缓冲区，在以后的调用中，只需要从缓冲区中执行二进制代码即可，从而提高了系统的效率和性能。</p><p><strong>5.提高数据库的安全性和数据完整性</strong><br>使用存储过程可以完成所有数据库操作，并且可以通过编程的方式控制数据库信息访问的权限。</p><h1 id=\"创建存储过程create-procedure\"><a class=\"markdownIt-Anchor\" href=\"#创建存储过程create-procedure\"></a> 创建存储过程(CREATE PROCEDURE)</h1><p>使用 CREATE PROCEDURE 语句创建存储过程，语法格式如下：</p><blockquote><p>CREATE PROCEDURE &lt;过程名&gt; ( [过程参数[,…] ] ) &lt;过程体&gt;<br>[过程参数[,…] ] 格式<br>[ IN | OUT | INOUT ] &lt;参数名&gt; &lt;类型&gt;</p></blockquote><p>语法说明如下：</p><p><strong>1.过程名</strong></p><p>存储过程的名称，默认在当前数据库中创建。若需要在特定数据库中创建存储过程，则要在名称前面加上数据库的名称，即 db_name.sp_name。需要注意的是，名称应当尽量避免选取与 MySQL 内置函数相同的名称，否则会发生错误。</p><p><strong>3.过程参数</strong></p><p>存储过程的参数列表。其中，&lt;参数名&gt;为参数名，&lt;类型&gt;为参数的类型（可以是任何有效的 MySQL 数据类型）。当有多个参数时，参数列表中彼此间用逗号分隔。存储过程可以没有参数（此时存储过程的名称后仍需加上一对括号），也可以有 1 个或多个参数。</p><p>MySQL 存储过程支持三种类型的参数，即输入参数、输出参数和输入/输出参数，分别用 IN、OUT 和 INOUT 三个关键字标识。其中，输入参数可以传递给一个存储过程，输出参数用于存储过程需要返回一个操作结果的情形，而输入/输出参数既可以充当输入参数也可以充当输出参数。需要注意的是，参数的取名不要与数据表的列名相同，否则尽管不会返回出错信息，但是存储过程的 SQL 语句会将参数名看作列名，从而引发不可预知的结果。</p><p><strong>3.过程体</strong></p><p>存储过程的主体部分，也称为存储过程体，包含在过程调用的时候必须执行的 SQL 语句。这个部分以关键字 BEGIN 开始，以关键字 END 结束。若存储过程体中只有一条SQL语句，则可以省略BEGIN-END标志。通常可使用 DELIMITER 命令将结束命令修改为其他字符。</p><blockquote><p>语法格式：DELIMITER $$</p></blockquote><p>语法说明：</p><ul><li>$$ 是用户定义的结束符，通常这个符号可以是一些特殊的符号，如两个“?”或两个“￥”等。</li><li>当使用 DELIMITER 命令时，应该避免使用反斜杠“\\”字符，因为它是MySQL的转义字符。</li></ul><p><font color=\"red\">DELIMITER 和分号“;”之间一定要有一个空格。在创建存储过程时，必须具有 CREATE ROUTINE 权限。可以使用 SHOW PROCEDURE STATUS 命令查看数据库中存在哪些存储过程，若要查看某个存储过程的具体信息，则可以使用 SHOW CREATE PROCEDURE &lt;存储过程名&gt;。</font></p><h2 id=\"创建不带参数的存储过程\"><a class=\"markdownIt-Anchor\" href=\"#创建不带参数的存储过程\"></a> 创建不带参数的存储过程</h2><p>实例1：创建名称为 ShowStuScore 的存储过程，存储过程的作用是从学生成绩信息表中查询学生的成绩信息</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; DELIMITER //</span><br><span class=\"line\">mysql&gt; CREATE PROCEDURE ShowStuScore()</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; SELECT * FROM tb_students_score;</span><br><span class=\"line\">    -&gt; END //</span><br><span class=\"line\">Query OK, 0 rows affected (0.05 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; DELIMITER ;</span><br><span class=\"line\">mysql&gt; CALL ShowStuScore();</span><br><span class=\"line\">+<span class=\"comment\">----+--------------+---------------+</span></span><br><span class=\"line\">| id | student_name | student_score |</span><br><span class=\"line\">+<span class=\"comment\">----+--------------+---------------+</span></span><br><span class=\"line\">|  1 | Dany         |            90 |</span><br><span class=\"line\">|  2 | Green        |            99 |</span><br><span class=\"line\">|  3 | Henry        |            95 |</span><br><span class=\"line\">|  4 | Jane         |            98 |</span><br><span class=\"line\">|  5 | Jim          |            88 |</span><br><span class=\"line\">|  6 | John         |            94 |</span><br><span class=\"line\">|  7 | Lily         |           100 |</span><br><span class=\"line\">|  8 | Susan        |            96 |</span><br><span class=\"line\">|  9 | Thomas       |            93 |</span><br><span class=\"line\">+<span class=\"comment\">----+--------------+---------------+</span></span><br><span class=\"line\">9 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"keyword\">Query</span> OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id=\"创建带参数的存储过程\"><a class=\"markdownIt-Anchor\" href=\"#创建带参数的存储过程\"></a> 创建带参数的存储过程</h2><p>实例2：创建名称为 GetScoreByStu 的存储过程，输入参数是学生姓名。存储过程的作用是通过输入的学生姓名从学生成绩信息表中查询指定学生的成绩信息。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; DELIMITER //</span><br><span class=\"line\">mysql&gt; CREATE PROCEDURE GetScoreByStu</span><br><span class=\"line\">    -&gt; (IN name VARCHAR(30))</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; SELECT student_score FROM tb_students_score</span><br><span class=\"line\">    -&gt; WHERE student_name=name;</span><br><span class=\"line\">    -&gt; END //</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\">mysql&gt; CALL GetScoreByStu('Lily');</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| student_score |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">|           100 |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Query</span> OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"修改存储过程alte-procedure\"><a class=\"markdownIt-Anchor\" href=\"#修改存储过程alte-procedure\"></a> 修改存储过程(ALTE PROCEDURE)</h1><p>通过 ALTER PROCEDURE 语句来修改存储过程，语法格式如下：</p><blockquote><p>ALTER PROCEDURE 存储过程名[特征…]</p></blockquote><p>特征指定存储过程的特征，可能取值有：</p><ul><li>CONTAINS SQL 表示子程序包含 SQL 语句，但不包含读或写数据的语句。</li><li>NO SQL 表示子程序中不包含 SQL 语句。</li><li>READS SQL DATA 表示子程序中包含读数据的语句。</li><li>MODIFIES SQL DATA 表示子程序中包含写数据的语句。</li><li>SQL SECURITY { DEFINER |INVOKER } 指明谁有权限来执行。</li><li>DEFINER 表示只有定义者自己才能够执行。</li><li>INVOKER 表示调用者可以执行。</li><li>COMMENT ‘string’ 表示注释信息。</li></ul><p>实例1：修改存储过程 showstuscore 的定义，将读写权限改为 MODIFIES SQL DATA。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER PROCEDURE showstuscore MODIFIES SQL DATA SQL SECURITY INVOKER;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SHOW CREATE PROCEDURE showstuscore \\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">           Procedure: showstuscore</span><br><span class=\"line\">            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class=\"line\">    <span class=\"keyword\">Create</span> <span class=\"keyword\">Procedure</span>: <span class=\"keyword\">CREATE</span> DEFINER=<span class=\"string\">`root`</span>@<span class=\"string\">`localhost`</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"string\">`showstuscore`</span>()</span><br><span class=\"line\">    MODIFIES <span class=\"keyword\">SQL</span> <span class=\"keyword\">DATA</span></span><br><span class=\"line\">    <span class=\"keyword\">SQL</span> <span class=\"keyword\">SECURITY</span> INVOKER</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tb_students_score;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">character_set_client: utf8</span><br><span class=\"line\">collation_connection: utf8_general_ci</span><br><span class=\"line\">  <span class=\"keyword\">Database</span> <span class=\"keyword\">Collation</span>: utf8_general_ci</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"comment\"># 访问数据的权限已经变成了 MODIFIES SQL DATA，安全类型也变成了 INVOKE。</span></span><br></pre></td></tr></table></figure><p><font color=\"red\">提示：ALTER PROCEDURE 语句用于修改存储过程的某些特征。如果要修改存储过程的内容，可以先删除原存储过程，再以相同的命名创建新的存储过程；如果要修改存储过程的名称，可以先删除原存储过程，再以不同的命名创建新的存储过程。</font></p><h1 id=\"删除存储过程drop-procedure\"><a class=\"markdownIt-Anchor\" href=\"#删除存储过程drop-procedure\"></a> 删除存储过程(DROP PROCEDURE)</h1><p>使用 DROP PROCEDURE 语句来删除数据库中已经存在的存储过程。语法格式如下：</p><blockquote><p>DROP {PROCEDURE | FUNCTION}[IF EXISTS] &lt;过程名&gt;</p></blockquote><p>语法说明如下：</p><ul><li>过程名：指定要删除的存储过程的名称。</li><li>IF EXISTS：指定这个关键字，用于防止因删除不存在的存储过程而引发的错误。</li></ul><p><font color=\"red\">注意：存储过程名称后面没有参数列表，也没有括号，在删除之前，必须确认该存储过程没有任何依赖关系，否则会导致其他与之关联的存储过程无法运行。</font></p><p>实例1：删除存储过程 showstuscore，删除后，可以通过查询 information_schema 数据库下的 routines 表来确认上面的删除是否成功。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; DROP PROCEDURE showstuscore;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\">mysql&gt; SELECT * FROM information_schema.routines WHERE routine_name='showstuscore';</span><br><span class=\"line\">Empty <span class=\"keyword\">set</span> (<span class=\"number\">0.03</span> sec)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","more":"<!-- build time:Sat Apr 25 2020 15:20:03 GMT+0800 (GMT+08:00) --><h1 id=\"存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#存储引擎\"></a> 存储引擎</h1><h2 id=\"什么是存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#什么是存储引擎\"></a> 什么是存储引擎</h2><p>数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。</p><p><font color=\"red\">InnoDB 事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。MySQL 5.5.5 之后，InnoDB 作为默认存储引擎。</font></p><p>MyISAM 是基于 ISAM 的存储引擎，并对其进行扩展，是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一。MyISAM 拥有较高的插入、查询速度，但不支持事务<br>MEMORY 存储引擎将表中的数据存储到内存中，为查询和引用其他数据提供快速访问。</p><h2 id=\"mysql-57-支持的存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#mysql-57-支持的存储引擎\"></a> MySQL 5.7 支持的存储引擎</h2><p>MySQL 5.7 支持的存储引擎有 InnoDB、MyISAM、Memory、Merge、Archive、Federated、CSV、BLACKHOLE 等。可以使用SHOW ENGINES语句查看系统所支持的引擎类型，结果如下：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW ENGINES;</span><br><span class=\"line\">+<span class=\"comment\">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class=\"line\">| Engine             | Support | <span class=\"keyword\">Comment</span>                                                        | Transactions | XA   | Savepoints |</span><br><span class=\"line\">+<span class=\"comment\">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class=\"line\">| <span class=\"keyword\">InnoDB</span>             | <span class=\"keyword\">DEFAULT</span> | Supports transactions, <span class=\"keyword\">row</span>-<span class=\"keyword\">level</span> locking, <span class=\"keyword\">and</span> <span class=\"keyword\">foreign</span> <span class=\"keyword\">keys</span>     | YES          | YES  | YES        |</span><br><span class=\"line\">| MRG_MYISAM         | YES     | Collection <span class=\"keyword\">of</span> identical MyISAM <span class=\"keyword\">tables</span>                          | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| <span class=\"keyword\">MEMORY</span>             | YES     | <span class=\"keyword\">Hash</span> based, <span class=\"keyword\">stored</span> <span class=\"keyword\">in</span> <span class=\"keyword\">memory</span>, useful <span class=\"keyword\">for</span> <span class=\"keyword\">temporary</span> <span class=\"keyword\">tables</span>      | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| BLACKHOLE          | YES     | /dev/<span class=\"literal\">null</span> <span class=\"keyword\">storage</span> <span class=\"keyword\">engine</span> (anything you write <span class=\"keyword\">to</span> it disappears) | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| MyISAM             | YES     | MyISAM <span class=\"keyword\">storage</span> <span class=\"keyword\">engine</span>                                          | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| CSV                | YES     | CSV <span class=\"keyword\">storage</span> <span class=\"keyword\">engine</span>                                             | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| <span class=\"keyword\">ARCHIVE</span>            | YES     | <span class=\"keyword\">Archive</span> <span class=\"keyword\">storage</span> <span class=\"keyword\">engine</span>                                         | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| PERFORMANCE_SCHEMA | YES     | <span class=\"keyword\">Performance</span> <span class=\"keyword\">Schema</span>                                             | <span class=\"keyword\">NO</span>           | <span class=\"keyword\">NO</span>   | <span class=\"keyword\">NO</span>         |</span><br><span class=\"line\">| FEDERATED          | <span class=\"keyword\">NO</span>      | Federated MySQL <span class=\"keyword\">storage</span> <span class=\"keyword\">engine</span>                                 | <span class=\"literal\">NULL</span>         | <span class=\"literal\">NULL</span> | <span class=\"literal\">NULL</span>       |</span><br><span class=\"line\">+<span class=\"comment\">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class=\"line\"><span class=\"number\">9</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"comment\"># Support 列的值表示某种引擎是否能使用，YES表示可以使用，NO表示不能使用，DEFAULT表示该引擎为当前默认的存储引擎</span></span><br></pre></td></tr></table></figure><h2 id=\"选择mysql存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#选择mysql存储引擎\"></a> 选择MySQL存储引擎</h2><p>不同的存储引擎都有各自的特点，以适应不同的需求。</p><table><thead><tr><th>功能</th><th>MyISAM</th><th>MEMORY</th><th>InnoDB</th><th>Archive</th></tr></thead><tbody><tr><td>存储限制</td><td>256TB</td><td>RAM</td><td>64TB</td><td>None</td></tr><tr><td>支持事务</td><td>No</td><td>No</td><td>Yes</td><td>No</td></tr><tr><td>支持全文索引</td><td>Yes</td><td>No</td><td>No</td><td>No</td></tr><tr><td>支持树索引</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>支持哈希索引</td><td>No</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>支持数据缓存</td><td>No</td><td>N/A</td><td>Yes</td><td>No</td></tr><tr><td>支持外键</td><td>No</td><td>No</td><td>Yes</td><td>No</td></tr></tbody></table><p>选择MySQL存储引擎：</p><ul><li>如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 是一个很好的选择。</li><li>如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。</li><li>如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。</li><li>如果只有 INSERT 和 SELECT 操作，可以选择Archive 引擎，Archive 存储引擎支持高并发的插入操作，但是本身并不是事务安全的。Archive 存储引擎非常适合存储归档数据，如记录日志信息可以使用 Archive 引擎</li></ul><p>修改数据库临时的默认存储引擎:</p><blockquote><p>SET default_storage_engine=&lt; 存储引擎名 &gt;</p></blockquote><h1 id=\"存储过程简介\"><a class=\"markdownIt-Anchor\" href=\"#存储过程简介\"></a> 存储过程简介</h1><p>存储过程是一组为了完成特定功能的 SQL 语句集合。使用存储过程的目的是将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务器中，因此称为存储过程。当以后需要数据库提供与已定义好的存储过程的功能相同的服务时，只需调用“CALL存储过程名字”即可自动完成。优点如下：</p><p><strong>1.封装性</strong><br>存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的 SQL 语句，并且数据库专业人员可以随时对存储过程进行修改，而不会影响到调用它的应用程序源代码。</p><p><strong>2.可增强 SQL 语句的功能和灵活性</strong><br>存储过程可以用流程控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</p><p><strong>3.可减少网络流量</strong><br>由于存储过程是在服务器端运行的，且执行速度快，因此当客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而可降低网络负载。</p><p><strong>4.高性能</strong><br>存储过程执行一次后，产生的二进制代码就驻留在缓冲区，在以后的调用中，只需要从缓冲区中执行二进制代码即可，从而提高了系统的效率和性能。</p><p><strong>5.提高数据库的安全性和数据完整性</strong><br>使用存储过程可以完成所有数据库操作，并且可以通过编程的方式控制数据库信息访问的权限。</p><h1 id=\"创建存储过程create-procedure\"><a class=\"markdownIt-Anchor\" href=\"#创建存储过程create-procedure\"></a> 创建存储过程(CREATE PROCEDURE)</h1><p>使用 CREATE PROCEDURE 语句创建存储过程，语法格式如下：</p><blockquote><p>CREATE PROCEDURE &lt;过程名&gt; ( [过程参数[,…] ] ) &lt;过程体&gt;<br>[过程参数[,…] ] 格式<br>[ IN | OUT | INOUT ] &lt;参数名&gt; &lt;类型&gt;</p></blockquote><p>语法说明如下：</p><p><strong>1.过程名</strong></p><p>存储过程的名称，默认在当前数据库中创建。若需要在特定数据库中创建存储过程，则要在名称前面加上数据库的名称，即 db_name.sp_name。需要注意的是，名称应当尽量避免选取与 MySQL 内置函数相同的名称，否则会发生错误。</p><p><strong>3.过程参数</strong></p><p>存储过程的参数列表。其中，&lt;参数名&gt;为参数名，&lt;类型&gt;为参数的类型（可以是任何有效的 MySQL 数据类型）。当有多个参数时，参数列表中彼此间用逗号分隔。存储过程可以没有参数（此时存储过程的名称后仍需加上一对括号），也可以有 1 个或多个参数。</p><p>MySQL 存储过程支持三种类型的参数，即输入参数、输出参数和输入/输出参数，分别用 IN、OUT 和 INOUT 三个关键字标识。其中，输入参数可以传递给一个存储过程，输出参数用于存储过程需要返回一个操作结果的情形，而输入/输出参数既可以充当输入参数也可以充当输出参数。需要注意的是，参数的取名不要与数据表的列名相同，否则尽管不会返回出错信息，但是存储过程的 SQL 语句会将参数名看作列名，从而引发不可预知的结果。</p><p><strong>3.过程体</strong></p><p>存储过程的主体部分，也称为存储过程体，包含在过程调用的时候必须执行的 SQL 语句。这个部分以关键字 BEGIN 开始，以关键字 END 结束。若存储过程体中只有一条SQL语句，则可以省略BEGIN-END标志。通常可使用 DELIMITER 命令将结束命令修改为其他字符。</p><blockquote><p>语法格式：DELIMITER $$</p></blockquote><p>语法说明：</p><ul><li>$$ 是用户定义的结束符，通常这个符号可以是一些特殊的符号，如两个“?”或两个“￥”等。</li><li>当使用 DELIMITER 命令时，应该避免使用反斜杠“\\”字符，因为它是MySQL的转义字符。</li></ul><p><font color=\"red\">DELIMITER 和分号“;”之间一定要有一个空格。在创建存储过程时，必须具有 CREATE ROUTINE 权限。可以使用 SHOW PROCEDURE STATUS 命令查看数据库中存在哪些存储过程，若要查看某个存储过程的具体信息，则可以使用 SHOW CREATE PROCEDURE &lt;存储过程名&gt;。</font></p><h2 id=\"创建不带参数的存储过程\"><a class=\"markdownIt-Anchor\" href=\"#创建不带参数的存储过程\"></a> 创建不带参数的存储过程</h2><p>实例1：创建名称为 ShowStuScore 的存储过程，存储过程的作用是从学生成绩信息表中查询学生的成绩信息</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; DELIMITER //</span><br><span class=\"line\">mysql&gt; CREATE PROCEDURE ShowStuScore()</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; SELECT * FROM tb_students_score;</span><br><span class=\"line\">    -&gt; END //</span><br><span class=\"line\">Query OK, 0 rows affected (0.05 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; DELIMITER ;</span><br><span class=\"line\">mysql&gt; CALL ShowStuScore();</span><br><span class=\"line\">+<span class=\"comment\">----+--------------+---------------+</span></span><br><span class=\"line\">| id | student_name | student_score |</span><br><span class=\"line\">+<span class=\"comment\">----+--------------+---------------+</span></span><br><span class=\"line\">|  1 | Dany         |            90 |</span><br><span class=\"line\">|  2 | Green        |            99 |</span><br><span class=\"line\">|  3 | Henry        |            95 |</span><br><span class=\"line\">|  4 | Jane         |            98 |</span><br><span class=\"line\">|  5 | Jim          |            88 |</span><br><span class=\"line\">|  6 | John         |            94 |</span><br><span class=\"line\">|  7 | Lily         |           100 |</span><br><span class=\"line\">|  8 | Susan        |            96 |</span><br><span class=\"line\">|  9 | Thomas       |            93 |</span><br><span class=\"line\">+<span class=\"comment\">----+--------------+---------------+</span></span><br><span class=\"line\">9 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"keyword\">Query</span> OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id=\"创建带参数的存储过程\"><a class=\"markdownIt-Anchor\" href=\"#创建带参数的存储过程\"></a> 创建带参数的存储过程</h2><p>实例2：创建名称为 GetScoreByStu 的存储过程，输入参数是学生姓名。存储过程的作用是通过输入的学生姓名从学生成绩信息表中查询指定学生的成绩信息。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; DELIMITER //</span><br><span class=\"line\">mysql&gt; CREATE PROCEDURE GetScoreByStu</span><br><span class=\"line\">    -&gt; (IN name VARCHAR(30))</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; SELECT student_score FROM tb_students_score</span><br><span class=\"line\">    -&gt; WHERE student_name=name;</span><br><span class=\"line\">    -&gt; END //</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\">mysql&gt; CALL GetScoreByStu('Lily');</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| student_score |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">|           100 |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Query</span> OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"修改存储过程alte-procedure\"><a class=\"markdownIt-Anchor\" href=\"#修改存储过程alte-procedure\"></a> 修改存储过程(ALTE PROCEDURE)</h1><p>通过 ALTER PROCEDURE 语句来修改存储过程，语法格式如下：</p><blockquote><p>ALTER PROCEDURE 存储过程名[特征…]</p></blockquote><p>特征指定存储过程的特征，可能取值有：</p><ul><li>CONTAINS SQL 表示子程序包含 SQL 语句，但不包含读或写数据的语句。</li><li>NO SQL 表示子程序中不包含 SQL 语句。</li><li>READS SQL DATA 表示子程序中包含读数据的语句。</li><li>MODIFIES SQL DATA 表示子程序中包含写数据的语句。</li><li>SQL SECURITY { DEFINER |INVOKER } 指明谁有权限来执行。</li><li>DEFINER 表示只有定义者自己才能够执行。</li><li>INVOKER 表示调用者可以执行。</li><li>COMMENT ‘string’ 表示注释信息。</li></ul><p>实例1：修改存储过程 showstuscore 的定义，将读写权限改为 MODIFIES SQL DATA。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER PROCEDURE showstuscore MODIFIES SQL DATA SQL SECURITY INVOKER;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SHOW CREATE PROCEDURE showstuscore \\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">           Procedure: showstuscore</span><br><span class=\"line\">            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class=\"line\">    <span class=\"keyword\">Create</span> <span class=\"keyword\">Procedure</span>: <span class=\"keyword\">CREATE</span> DEFINER=<span class=\"string\">`root`</span>@<span class=\"string\">`localhost`</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"string\">`showstuscore`</span>()</span><br><span class=\"line\">    MODIFIES <span class=\"keyword\">SQL</span> <span class=\"keyword\">DATA</span></span><br><span class=\"line\">    <span class=\"keyword\">SQL</span> <span class=\"keyword\">SECURITY</span> INVOKER</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tb_students_score;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">character_set_client: utf8</span><br><span class=\"line\">collation_connection: utf8_general_ci</span><br><span class=\"line\">  <span class=\"keyword\">Database</span> <span class=\"keyword\">Collation</span>: utf8_general_ci</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"comment\"># 访问数据的权限已经变成了 MODIFIES SQL DATA，安全类型也变成了 INVOKE。</span></span><br></pre></td></tr></table></figure><p><font color=\"red\">提示：ALTER PROCEDURE 语句用于修改存储过程的某些特征。如果要修改存储过程的内容，可以先删除原存储过程，再以相同的命名创建新的存储过程；如果要修改存储过程的名称，可以先删除原存储过程，再以不同的命名创建新的存储过程。</font></p><h1 id=\"删除存储过程drop-procedure\"><a class=\"markdownIt-Anchor\" href=\"#删除存储过程drop-procedure\"></a> 删除存储过程(DROP PROCEDURE)</h1><p>使用 DROP PROCEDURE 语句来删除数据库中已经存在的存储过程。语法格式如下：</p><blockquote><p>DROP {PROCEDURE | FUNCTION}[IF EXISTS] &lt;过程名&gt;</p></blockquote><p>语法说明如下：</p><ul><li>过程名：指定要删除的存储过程的名称。</li><li>IF EXISTS：指定这个关键字，用于防止因删除不存在的存储过程而引发的错误。</li></ul><p><font color=\"red\">注意：存储过程名称后面没有参数列表，也没有括号，在删除之前，必须确认该存储过程没有任何依赖关系，否则会导致其他与之关联的存储过程无法运行。</font></p><p>实例1：删除存储过程 showstuscore，删除后，可以通过查询 information_schema 数据库下的 routines 表来确认上面的删除是否成功。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; DROP PROCEDURE showstuscore;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\">mysql&gt; SELECT * FROM information_schema.routines WHERE routine_name='showstuscore';</span><br><span class=\"line\">Empty <span class=\"keyword\">set</span> (<span class=\"number\">0.03</span> sec)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"},{"name":"数据库","path":"api/categories/数据库.json"}],"tags":[{"name":"SQL","path":"api/tags/SQL.json"},{"name":"数据库","path":"api/tags/数据库.json"}]}