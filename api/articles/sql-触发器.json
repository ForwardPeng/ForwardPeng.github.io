{"title":"SQL-触发器","slug":"sql-触发器","date":"2020-04-21T10:16:10.000Z","updated":"2020-04-21T13:53:07.079Z","comments":true,"path":"api/articles/sql-触发器.json","excerpt":null,"covers":null,"content":"<!-- build time:Mon Apr 27 2020 17:51:27 GMT+0800 (GMT+08:00) --><h1 id=\"触发器简介\"><a class=\"markdownIt-Anchor\" href=\"#触发器简介\"></a> 触发器简介</h1><p>数据库中触发器是一个特殊的存储过程，不同的是执行存储过程要使用 CALL 语句来调用，而触发器的执行不需要使用 CALL 语句来调用，也不需要手工启动，只要一个预定义的事件发生就会被 MySQL自动调用。引发触发器执行的事件一般如下：</p><ul><li>增加一条学生记录时，会自动检查年龄是否符合范围要求。</li><li>每当删除一条学生信息时，自动删除其成绩表上的对应记录。</li><li>每当删除一条数据时，在数据库存档表中保留一个备份副本。</li></ul><p>触发程序的优点：</p><ul><li>触发程序的执行是自动的，当对触发程序相关表的数据做出相应的修改后立即执行。</li><li>触发程序可以通过数据库中相关的表层叠修改另外的表。</li><li>触发程序可以实施比 FOREIGN KEY 约束、CHECK 约束更为复杂的检查和操作。</li></ul><p><strong>1.INSERT触发器</strong></p><p>在 INSERT 语句执行之前或之后响应的触发器。使用 INSERT 触发器需要注意以下几点：</p><ul><li>在 INSERT 触发器代码内，可引用一个名为 NEW（不区分大小写）的虚拟表来访问被插入的行。</li><li>在 BEFORE INSERT 触发器中，NEW 中的值也可以被更新，即允许更改被插入的值（只要具有对应的操作权限）。</li><li>对于 AUTO_INCREMENT 列，NEW 在 INSERT 执行之前包含的值是 0，在 INSERT 执行之后将包含新的自动生成值。</li></ul><p><strong>2.UPDATE触发器</strong><br>在UPDATE语句执行之前或之后响应的触发器。使用UPDATE触发器需要注意以下几点：</p><ul><li>在 UPDATE 触发器代码内，可引用一个名为 NEW（不区分大小写）的虚拟表来访问更新的值。</li><li>在 UPDATE 触发器代码内，可引用一个名为 OLD（不区分大小写）的虚拟表来访问 UPDATE 语句执行前的值。</li><li>在 BEFORE UPDATE 触发器中，NEW 中的值可能也被更新，即允许更改将要用于 UPDATE 语句中的值（只要具有对应的操作权限）。</li><li>OLD中的值全部是只读的，不能被更新。</li></ul><p><font color=\"red\">注意：当触发器设计对触发表自身的更新操作时，只能使用 BEFORE 类型的触发器，AFTER 类型的触发器将不被允许。</font></p><p><strong>DELETE触发器</strong></p><p>DELETE 语句执行之前或之后响应的触发器。使用 DELETE 触发器需要注意以下几点:</p><ul><li>在 DELETE 触发器代码内，可以引用一个名为 OLD（不区分大小写）的虚拟表来访问被删除的行。</li><li>OLD 中的值全部是只读的，不能被更新。</li></ul><p>总体来说，触发器使用的过程中，MySQL会按照以下方式来处理错误。若对于事务性表，如果触发程序失败，以及由此导致的整个语句失败，那么该语句所执行的所有更改将回滚；对于非事务性表，则不能执行此类回滚，即使语句失败，失败之前所做的任何更改依然有效。若 BEFORE 触发程序失败，则MySQL将不执行相应行上的操作。若在BEFORE或AFTER触发程序的执行过程中出现错误，则将导致调用触发程序的整个语句失败。仅当BEFORE触发程序和行操作均已被成功执行，MySQL才会执行AFTER触发程序。</p><h1 id=\"创建触发器create-trigger\"><a class=\"markdownIt-Anchor\" href=\"#创建触发器create-trigger\"></a> 创建触发器(CREATE TRIGGER)</h1><p>触发器是与MySQL数据表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性。</p><blockquote><p>语法格式：CREATE &lt;触发器名&gt; &lt; BEFORE | AFTER &gt;<br>&lt;INSERT | UPDATE | DELETE &gt;<br>ON &lt;表名&gt; FOR EACH Row&lt;触发器主体&gt;</p></blockquote><p>语法说明如下：</p><p><strong>1.触发器名</strong>：触发器的名称，触发器在当前数据库中必须具有唯一的名称。如果要在某个特定数据库中创建，名称前面应该加上数据库的名称。</p><p><strong>2.INSERT | UPDATE | DELETE</strong>：触发事件，用于指定激活触发器的语句的种类。</p><p><font color=\"red\">注意：三种触发器的执行时间如下。</font></p><ul><li>INSERT：将新行插入表时激活触发器。例如，INSERT的BEFORE触发器不仅能被MySQL的INSERT语句激活，也能被LOAD DATA 语句激活。</li><li>DELETE： 从表中删除某一行数据时激活触发器，例如DELETE和REPLACE语句。</li><li>UPDATE：更改表中某一行数据时激活触发器，例如UPDATE语句。<br></li></ul><p><strong>3.BEFORE | AFTER</strong>：BEFORE 和 AFTER，触发器被触发的时刻，表示触发器是在激活它的语句之前或之后触发。若希望验证新数据是否满足条件，则使用 BEFORE 选项；若希望在激活触发器的语句执行之后完成几个或更多的改变，则通常使用 AFTER 选项。</p><p><strong>4.表名</strong>：与触发器相关联的表名，此表必须是永久性表，不能将触发器与临时表或视图关联起来。在该表上触发事件发生时才会激活触发器。同一个表不能拥有两个具有相同触发时刻和事件的触发器。例如，对于一张数据表，不能同时有两个 BEFORE UPDATE 触发器，但可以有一个 BEFORE UPDATE 触发器和一个 BEFORE INSERT 触发器，或一个 BEFORE UPDATE 触发器和一个 AFTER UPDATE 触发器。</p><p><strong>5.触发器主体</strong>：触发器动作主体，包含触发器激活时将要执行的 MySQL 语句。如果要执行多个语句，可使用 BEGIN…END 复合语句结构。</p><p><strong>6.FOR EACH ROW</strong>：一般是指行级触发，对于受触发事件影响的每一行都要激活触发器的动作。例如，使用 INSERT 语句向某个表中插入多行数据时，触发器会对每一行数据的插入都执行相应的触发器动作。</p><p><font color=\"red\">注意：每个表都支持 INSERT、UPDATE 和DELETE的BEFORE 与AFTER，因此每个表最多支持6个触发器。每个表的每个事件每次只允许有一个触发器。单一触发器不能与多个事件或多个表关联。</font></p><h2 id=\"创建before类型触发器\"><a class=\"markdownIt-Anchor\" href=\"#创建before类型触发器\"></a> 创建BEFORE类型触发器</h2><p>实例1：创建一个名为 SumOfSalary 的触发器，触发的条件是向数据表 tb_emp8 中插入数据之前，对新插入的 salary 字段值进行求和计算。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TRIGGER SumOfSalary</span><br><span class=\"line\">    -&gt; BEFORE INSERT ON tb_emp8</span><br><span class=\"line\">    -&gt; FOR EACH ROW</span><br><span class=\"line\">    -&gt; SET @sum=@sum+NEW.salary;</span><br><span class=\"line\">Query OK, 0 rows affected (0.08 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SET @sum=0;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSERT INTO tb_emp8</span><br><span class=\"line\">    -&gt; VALUES(1,'A',1,1000),(2,'B',1,500);</span><br><span class=\"line\">Query OK, 2 rows affected (0.04 sec)</span><br><span class=\"line\">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT @sum;</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| @sum |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| 1500 |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id=\"创建after类型触发器\"><a class=\"markdownIt-Anchor\" href=\"#创建after类型触发器\"></a> 创建AFTER类型触发器</h2><p>实例2：创建一个名为 double_salary 的触发器，触发的条件是向数据表 tb_emp6 中插入数据之后，再向数据表 tb_emp7 中插入相同的数据，并且 salary 为 tb_emp6 中新插入的 salary 字段值的 2 倍。输入的 SQL 语句和执行过程如下所示。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TRIGGER double_salary</span><br><span class=\"line\">    -&gt; AFTER INSERT ON tb_emp6</span><br><span class=\"line\">    -&gt; FOR EACH ROW</span><br><span class=\"line\">    -&gt; INSERT INTO tb_emp7</span><br><span class=\"line\">    -&gt; VALUE (NEW.id, NEW.name, deptId, 2*NEW.salary);</span><br><span class=\"line\">Query OK, 0 rows affected (0.09 sec)</span><br><span class=\"line\">mysql&gt; insert into tb_emp6 values(1,'A',1,1000),(2,'B',1,500);</span><br><span class=\"line\">Query OK, 2 rows affected (0.04 sec)</span><br><span class=\"line\">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT * FROM tb_emp6;</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">| id | name | deptId | salary |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">|  1 | A    |      1 |   1000 |</span><br><span class=\"line\">|  2 | B    |      1 |    500 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tb_emp7;</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">| id | name | deptId | salary |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">|  1 | A    |   NULL |   2000 |</span><br><span class=\"line\">|  2 | B    |   NULL |   1000 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"修改和删除触发器drop-trigger\"><a class=\"markdownIt-Anchor\" href=\"#修改和删除触发器drop-trigger\"></a> 修改和删除触发器(DROP TRIGGER)</h1><blockquote><p>语法格式：DROP TRIGGER [ IF EXISTS ] [数据库名] &lt;触发器名&gt;</p></blockquote><p>语法说明：</p><ul><li>触发器名：要删除的触发器名称。</li><li>数据库名：可选项。指定触发器所在的数据库的名称。若没有指定，则为当前默认的数据库。</li><li>权限：执行 DROP TRIGGER 语句需要 SUPER 权限。</li><li>IF EXISTS：避免在没有触发器的情况下删除触发器。</li></ul><p><font color=\"red\">注意：删除一个表的同时，也会自动删除该表上的触发器。另外，触发器不能更新或覆盖，为了修改一个触发器，必须先删除它，再重新创建。</font></p><h2 id=\"删除触发器\"><a class=\"markdownIt-Anchor\" href=\"#删除触发器\"></a> 删除触发器</h2><p>实例：删除 double_salary 触发器。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; INSERT INTO tb_emp6</span><br><span class=\"line\">    -&gt; VALUES (3,'C', 1, 200);</span><br><span class=\"line\">Query OK, 1 row affected (0.04 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT * FROm tb_emp6;</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">| id | name | deptId | salary |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">|  1 | A    |      1 |   1000 |</span><br><span class=\"line\">|  2 | B    |      1 |    500 |</span><br><span class=\"line\">|  3 | C    |      1 |    200 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROm</span> tb_emp7;</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">| id | name | deptId | salary |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">|  1 | A    |   NULL |   2000 |</span><br><span class=\"line\">|  2 | B    |   NULL |   1000 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","more":"<!-- build time:Mon Apr 27 2020 17:51:27 GMT+0800 (GMT+08:00) --><h1 id=\"触发器简介\"><a class=\"markdownIt-Anchor\" href=\"#触发器简介\"></a> 触发器简介</h1><p>数据库中触发器是一个特殊的存储过程，不同的是执行存储过程要使用 CALL 语句来调用，而触发器的执行不需要使用 CALL 语句来调用，也不需要手工启动，只要一个预定义的事件发生就会被 MySQL自动调用。引发触发器执行的事件一般如下：</p><ul><li>增加一条学生记录时，会自动检查年龄是否符合范围要求。</li><li>每当删除一条学生信息时，自动删除其成绩表上的对应记录。</li><li>每当删除一条数据时，在数据库存档表中保留一个备份副本。</li></ul><p>触发程序的优点：</p><ul><li>触发程序的执行是自动的，当对触发程序相关表的数据做出相应的修改后立即执行。</li><li>触发程序可以通过数据库中相关的表层叠修改另外的表。</li><li>触发程序可以实施比 FOREIGN KEY 约束、CHECK 约束更为复杂的检查和操作。</li></ul><p><strong>1.INSERT触发器</strong></p><p>在 INSERT 语句执行之前或之后响应的触发器。使用 INSERT 触发器需要注意以下几点：</p><ul><li>在 INSERT 触发器代码内，可引用一个名为 NEW（不区分大小写）的虚拟表来访问被插入的行。</li><li>在 BEFORE INSERT 触发器中，NEW 中的值也可以被更新，即允许更改被插入的值（只要具有对应的操作权限）。</li><li>对于 AUTO_INCREMENT 列，NEW 在 INSERT 执行之前包含的值是 0，在 INSERT 执行之后将包含新的自动生成值。</li></ul><p><strong>2.UPDATE触发器</strong><br>在UPDATE语句执行之前或之后响应的触发器。使用UPDATE触发器需要注意以下几点：</p><ul><li>在 UPDATE 触发器代码内，可引用一个名为 NEW（不区分大小写）的虚拟表来访问更新的值。</li><li>在 UPDATE 触发器代码内，可引用一个名为 OLD（不区分大小写）的虚拟表来访问 UPDATE 语句执行前的值。</li><li>在 BEFORE UPDATE 触发器中，NEW 中的值可能也被更新，即允许更改将要用于 UPDATE 语句中的值（只要具有对应的操作权限）。</li><li>OLD中的值全部是只读的，不能被更新。</li></ul><p><font color=\"red\">注意：当触发器设计对触发表自身的更新操作时，只能使用 BEFORE 类型的触发器，AFTER 类型的触发器将不被允许。</font></p><p><strong>DELETE触发器</strong></p><p>DELETE 语句执行之前或之后响应的触发器。使用 DELETE 触发器需要注意以下几点:</p><ul><li>在 DELETE 触发器代码内，可以引用一个名为 OLD（不区分大小写）的虚拟表来访问被删除的行。</li><li>OLD 中的值全部是只读的，不能被更新。</li></ul><p>总体来说，触发器使用的过程中，MySQL会按照以下方式来处理错误。若对于事务性表，如果触发程序失败，以及由此导致的整个语句失败，那么该语句所执行的所有更改将回滚；对于非事务性表，则不能执行此类回滚，即使语句失败，失败之前所做的任何更改依然有效。若 BEFORE 触发程序失败，则MySQL将不执行相应行上的操作。若在BEFORE或AFTER触发程序的执行过程中出现错误，则将导致调用触发程序的整个语句失败。仅当BEFORE触发程序和行操作均已被成功执行，MySQL才会执行AFTER触发程序。</p><h1 id=\"创建触发器create-trigger\"><a class=\"markdownIt-Anchor\" href=\"#创建触发器create-trigger\"></a> 创建触发器(CREATE TRIGGER)</h1><p>触发器是与MySQL数据表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性。</p><blockquote><p>语法格式：CREATE &lt;触发器名&gt; &lt; BEFORE | AFTER &gt;<br>&lt;INSERT | UPDATE | DELETE &gt;<br>ON &lt;表名&gt; FOR EACH Row&lt;触发器主体&gt;</p></blockquote><p>语法说明如下：</p><p><strong>1.触发器名</strong>：触发器的名称，触发器在当前数据库中必须具有唯一的名称。如果要在某个特定数据库中创建，名称前面应该加上数据库的名称。</p><p><strong>2.INSERT | UPDATE | DELETE</strong>：触发事件，用于指定激活触发器的语句的种类。</p><p><font color=\"red\">注意：三种触发器的执行时间如下。</font></p><ul><li>INSERT：将新行插入表时激活触发器。例如，INSERT的BEFORE触发器不仅能被MySQL的INSERT语句激活，也能被LOAD DATA 语句激活。</li><li>DELETE： 从表中删除某一行数据时激活触发器，例如DELETE和REPLACE语句。</li><li>UPDATE：更改表中某一行数据时激活触发器，例如UPDATE语句。<br></li></ul><p><strong>3.BEFORE | AFTER</strong>：BEFORE 和 AFTER，触发器被触发的时刻，表示触发器是在激活它的语句之前或之后触发。若希望验证新数据是否满足条件，则使用 BEFORE 选项；若希望在激活触发器的语句执行之后完成几个或更多的改变，则通常使用 AFTER 选项。</p><p><strong>4.表名</strong>：与触发器相关联的表名，此表必须是永久性表，不能将触发器与临时表或视图关联起来。在该表上触发事件发生时才会激活触发器。同一个表不能拥有两个具有相同触发时刻和事件的触发器。例如，对于一张数据表，不能同时有两个 BEFORE UPDATE 触发器，但可以有一个 BEFORE UPDATE 触发器和一个 BEFORE INSERT 触发器，或一个 BEFORE UPDATE 触发器和一个 AFTER UPDATE 触发器。</p><p><strong>5.触发器主体</strong>：触发器动作主体，包含触发器激活时将要执行的 MySQL 语句。如果要执行多个语句，可使用 BEGIN…END 复合语句结构。</p><p><strong>6.FOR EACH ROW</strong>：一般是指行级触发，对于受触发事件影响的每一行都要激活触发器的动作。例如，使用 INSERT 语句向某个表中插入多行数据时，触发器会对每一行数据的插入都执行相应的触发器动作。</p><p><font color=\"red\">注意：每个表都支持 INSERT、UPDATE 和DELETE的BEFORE 与AFTER，因此每个表最多支持6个触发器。每个表的每个事件每次只允许有一个触发器。单一触发器不能与多个事件或多个表关联。</font></p><h2 id=\"创建before类型触发器\"><a class=\"markdownIt-Anchor\" href=\"#创建before类型触发器\"></a> 创建BEFORE类型触发器</h2><p>实例1：创建一个名为 SumOfSalary 的触发器，触发的条件是向数据表 tb_emp8 中插入数据之前，对新插入的 salary 字段值进行求和计算。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TRIGGER SumOfSalary</span><br><span class=\"line\">    -&gt; BEFORE INSERT ON tb_emp8</span><br><span class=\"line\">    -&gt; FOR EACH ROW</span><br><span class=\"line\">    -&gt; SET @sum=@sum+NEW.salary;</span><br><span class=\"line\">Query OK, 0 rows affected (0.08 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SET @sum=0;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSERT INTO tb_emp8</span><br><span class=\"line\">    -&gt; VALUES(1,'A',1,1000),(2,'B',1,500);</span><br><span class=\"line\">Query OK, 2 rows affected (0.04 sec)</span><br><span class=\"line\">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT @sum;</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| @sum |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| 1500 |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id=\"创建after类型触发器\"><a class=\"markdownIt-Anchor\" href=\"#创建after类型触发器\"></a> 创建AFTER类型触发器</h2><p>实例2：创建一个名为 double_salary 的触发器，触发的条件是向数据表 tb_emp6 中插入数据之后，再向数据表 tb_emp7 中插入相同的数据，并且 salary 为 tb_emp6 中新插入的 salary 字段值的 2 倍。输入的 SQL 语句和执行过程如下所示。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TRIGGER double_salary</span><br><span class=\"line\">    -&gt; AFTER INSERT ON tb_emp6</span><br><span class=\"line\">    -&gt; FOR EACH ROW</span><br><span class=\"line\">    -&gt; INSERT INTO tb_emp7</span><br><span class=\"line\">    -&gt; VALUE (NEW.id, NEW.name, deptId, 2*NEW.salary);</span><br><span class=\"line\">Query OK, 0 rows affected (0.09 sec)</span><br><span class=\"line\">mysql&gt; insert into tb_emp6 values(1,'A',1,1000),(2,'B',1,500);</span><br><span class=\"line\">Query OK, 2 rows affected (0.04 sec)</span><br><span class=\"line\">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT * FROM tb_emp6;</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">| id | name | deptId | salary |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">|  1 | A    |      1 |   1000 |</span><br><span class=\"line\">|  2 | B    |      1 |    500 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tb_emp7;</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">| id | name | deptId | salary |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">|  1 | A    |   NULL |   2000 |</span><br><span class=\"line\">|  2 | B    |   NULL |   1000 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id=\"修改和删除触发器drop-trigger\"><a class=\"markdownIt-Anchor\" href=\"#修改和删除触发器drop-trigger\"></a> 修改和删除触发器(DROP TRIGGER)</h1><blockquote><p>语法格式：DROP TRIGGER [ IF EXISTS ] [数据库名] &lt;触发器名&gt;</p></blockquote><p>语法说明：</p><ul><li>触发器名：要删除的触发器名称。</li><li>数据库名：可选项。指定触发器所在的数据库的名称。若没有指定，则为当前默认的数据库。</li><li>权限：执行 DROP TRIGGER 语句需要 SUPER 权限。</li><li>IF EXISTS：避免在没有触发器的情况下删除触发器。</li></ul><p><font color=\"red\">注意：删除一个表的同时，也会自动删除该表上的触发器。另外，触发器不能更新或覆盖，为了修改一个触发器，必须先删除它，再重新创建。</font></p><h2 id=\"删除触发器\"><a class=\"markdownIt-Anchor\" href=\"#删除触发器\"></a> 删除触发器</h2><p>实例：删除 double_salary 触发器。</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; INSERT INTO tb_emp6</span><br><span class=\"line\">    -&gt; VALUES (3,'C', 1, 200);</span><br><span class=\"line\">Query OK, 1 row affected (0.04 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT * FROm tb_emp6;</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">| id | name | deptId | salary |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">|  1 | A    |      1 |   1000 |</span><br><span class=\"line\">|  2 | B    |      1 |    500 |</span><br><span class=\"line\">|  3 | C    |      1 |    200 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROm</span> tb_emp7;</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">| id | name | deptId | salary |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">|  1 | A    |   NULL |   2000 |</span><br><span class=\"line\">|  2 | B    |   NULL |   1000 |</span><br><span class=\"line\">+<span class=\"comment\">----+------+--------+--------+</span></span><br><span class=\"line\">2 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"},{"name":"数据库","path":"api/categories/数据库.json"}],"tags":[{"name":"SQL","path":"api/tags/SQL.json"},{"name":"数据库","path":"api/tags/数据库.json"}]}