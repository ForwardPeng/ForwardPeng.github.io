{"title":"原型模式","slug":"原型模式","date":"2020-05-11T02:35:30.000Z","updated":"2020-05-11T04:05:37.147Z","comments":true,"path":"api/articles/原型模式.json","excerpt":null,"covers":["/image/yxglq.png"],"content":"<!-- build time:Mon May 11 2020 23:59:11 GMT+0800 (GMT+08:00) --><h1 id=\"原型模式的特点\"><a class=\"markdownIt-Anchor\" href=\"#原型模式的特点\"></a> 原型模式的特点</h1><p>原型（Prototype）模式的定义如下：用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。在这里，原型实例指定了要创建的对象的种类。用这种方式创建对象非常高效，根本无须知道对象创建的细节。</p><h1 id=\"原型模式的结构与实现\"><a class=\"markdownIt-Anchor\" href=\"#原型模式的结构与实现\"></a> 原型模式的结构与实现</h1><h2 id=\"模式的结构\"><a class=\"markdownIt-Anchor\" href=\"#模式的结构\"></a> 模式的结构</h2><p>原型模式包含以下角色</p><ul><li>抽象原型类：规定了具体原型对象必须实现的接口。</li><li>具体原型类：实现抽象原型类的clone()方法，它是可被复制的对象。</li><li>访问类：使用具体原型类中的clone()方法来复制新的对象。</li></ul><h2 id=\"模式的实现\"><a class=\"markdownIt-Anchor\" href=\"#模式的实现\"></a> 模式的实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span>:</span></span><br><span class=\"line\">    value = <span class=\"string\">'default'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clone</span><span class=\"params\">(self, **attrs)</span>:</span></span><br><span class=\"line\">        obj = copy.deepcopy(self)</span><br><span class=\"line\">        obj.__dict__.update(attrs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrototypeDispatcher</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._objects = &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_objects</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._objects</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_object</span><span class=\"params\">(self, name, obj)</span>:</span></span><br><span class=\"line\">        self._objects[name] = obj</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unregister_object</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">del</span> self._objects[name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    dispatcher = PrototypeDispatcher()</span><br><span class=\"line\">    prototype = Prototype()</span><br><span class=\"line\"></span><br><span class=\"line\">    d = prototype.clone()</span><br><span class=\"line\">    a = prototype.clone(value=<span class=\"string\">'a-value'</span>,category=<span class=\"string\">'a'</span>)</span><br><span class=\"line\">    b = prototype.clone(value=<span class=\"string\">'b-value'</span>,is_checked=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    dispatcher.register_object(<span class=\"string\">'objecta'</span>,a)</span><br><span class=\"line\">    dispatcher.register_object(<span class=\"string\">'objectb'</span>, b)</span><br><span class=\"line\">    dispatcher.register_object(<span class=\"string\">'default'</span>, d)</span><br><span class=\"line\">    print([&#123;n: p.value&#125; <span class=\"keyword\">for</span> n,p <span class=\"keyword\">in</span> dispatcher.get_objects().items()])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"><span class=\"comment\">##[&#123;'objecta': 'a-value'&#125;, &#123;'objectb': 'b-value'&#125;, &#123;'default': 'default'&#125;]</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._objects = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_object</span><span class=\"params\">(self, name, obj)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Register an object\"\"\"</span></span><br><span class=\"line\">        self._objects[name] = obj</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unregister_object</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Unregister an object\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">del</span> self._objects[name]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clone</span><span class=\"params\">(self, name, **attr)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Clone a registered object and update inner attributes dictionary\"\"\"</span></span><br><span class=\"line\">        obj = copy.deepcopy(self._objects.get(name))</span><br><span class=\"line\">        obj.__dict__.update(attr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a = A()</span><br><span class=\"line\">    prototype = Prototype()</span><br><span class=\"line\">    prototype.register_object(<span class=\"string\">'a'</span>, a)</span><br><span class=\"line\">    b = prototype.clone(<span class=\"string\">'a'</span>,a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>, c=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    print(b.a, b.b, b.c)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br><span class=\"line\"><span class=\"comment\"># &lt;__main__.main.&lt;locals&gt;.A object at 0x7f7c4d0175f8&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 1 2 3</span></span><br></pre></td></tr></table></figure><h1 id=\"原型模式的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#原型模式的应用场景\"></a> 原型模式的应用场景</h1><p>原型模式通常适用于以下场景。</p><ul><li>对象之间相同或相似，即只是个别的几个属性不同的时候。</li><li>对象的创建过程比较麻烦，但复制比较简单的时候。</li></ul><h1 id=\"原型模式的扩展\"><a class=\"markdownIt-Anchor\" href=\"#原型模式的扩展\"></a> 原型模式的扩展</h1><p>原型模式可扩展为带原型管理器的原型模式，它在原型模式的基础上增加了一个原型管理器 PrototypeManager 类。该类用 HashMap 保存多个复制的原型，Client 类可以通过管理器的 get(String id) 方法从中获取复制的原型。</p><div align=\"center\"><img src=\"/image/yxglq.png\" width=\"400\"></div><center>图1 带原型管理器的原型模式的结构图</center><!-- rebuild by neat -->","more":"<!-- build time:Mon May 11 2020 23:59:11 GMT+0800 (GMT+08:00) --><h1 id=\"原型模式的特点\"><a class=\"markdownIt-Anchor\" href=\"#原型模式的特点\"></a> 原型模式的特点</h1><p>原型（Prototype）模式的定义如下：用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。在这里，原型实例指定了要创建的对象的种类。用这种方式创建对象非常高效，根本无须知道对象创建的细节。</p><h1 id=\"原型模式的结构与实现\"><a class=\"markdownIt-Anchor\" href=\"#原型模式的结构与实现\"></a> 原型模式的结构与实现</h1><h2 id=\"模式的结构\"><a class=\"markdownIt-Anchor\" href=\"#模式的结构\"></a> 模式的结构</h2><p>原型模式包含以下角色</p><ul><li>抽象原型类：规定了具体原型对象必须实现的接口。</li><li>具体原型类：实现抽象原型类的clone()方法，它是可被复制的对象。</li><li>访问类：使用具体原型类中的clone()方法来复制新的对象。</li></ul><h2 id=\"模式的实现\"><a class=\"markdownIt-Anchor\" href=\"#模式的实现\"></a> 模式的实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span>:</span></span><br><span class=\"line\">    value = <span class=\"string\">'default'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clone</span><span class=\"params\">(self, **attrs)</span>:</span></span><br><span class=\"line\">        obj = copy.deepcopy(self)</span><br><span class=\"line\">        obj.__dict__.update(attrs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrototypeDispatcher</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._objects = &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_objects</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._objects</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_object</span><span class=\"params\">(self, name, obj)</span>:</span></span><br><span class=\"line\">        self._objects[name] = obj</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unregister_object</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">del</span> self._objects[name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    dispatcher = PrototypeDispatcher()</span><br><span class=\"line\">    prototype = Prototype()</span><br><span class=\"line\"></span><br><span class=\"line\">    d = prototype.clone()</span><br><span class=\"line\">    a = prototype.clone(value=<span class=\"string\">'a-value'</span>,category=<span class=\"string\">'a'</span>)</span><br><span class=\"line\">    b = prototype.clone(value=<span class=\"string\">'b-value'</span>,is_checked=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    dispatcher.register_object(<span class=\"string\">'objecta'</span>,a)</span><br><span class=\"line\">    dispatcher.register_object(<span class=\"string\">'objectb'</span>, b)</span><br><span class=\"line\">    dispatcher.register_object(<span class=\"string\">'default'</span>, d)</span><br><span class=\"line\">    print([&#123;n: p.value&#125; <span class=\"keyword\">for</span> n,p <span class=\"keyword\">in</span> dispatcher.get_objects().items()])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"><span class=\"comment\">##[&#123;'objecta': 'a-value'&#125;, &#123;'objectb': 'b-value'&#125;, &#123;'default': 'default'&#125;]</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._objects = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_object</span><span class=\"params\">(self, name, obj)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Register an object\"\"\"</span></span><br><span class=\"line\">        self._objects[name] = obj</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unregister_object</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Unregister an object\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">del</span> self._objects[name]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clone</span><span class=\"params\">(self, name, **attr)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Clone a registered object and update inner attributes dictionary\"\"\"</span></span><br><span class=\"line\">        obj = copy.deepcopy(self._objects.get(name))</span><br><span class=\"line\">        obj.__dict__.update(attr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a = A()</span><br><span class=\"line\">    prototype = Prototype()</span><br><span class=\"line\">    prototype.register_object(<span class=\"string\">'a'</span>, a)</span><br><span class=\"line\">    b = prototype.clone(<span class=\"string\">'a'</span>,a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>, c=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    print(b.a, b.b, b.c)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br><span class=\"line\"><span class=\"comment\"># &lt;__main__.main.&lt;locals&gt;.A object at 0x7f7c4d0175f8&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 1 2 3</span></span><br></pre></td></tr></table></figure><h1 id=\"原型模式的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#原型模式的应用场景\"></a> 原型模式的应用场景</h1><p>原型模式通常适用于以下场景。</p><ul><li>对象之间相同或相似，即只是个别的几个属性不同的时候。</li><li>对象的创建过程比较麻烦，但复制比较简单的时候。</li></ul><h1 id=\"原型模式的扩展\"><a class=\"markdownIt-Anchor\" href=\"#原型模式的扩展\"></a> 原型模式的扩展</h1><p>原型模式可扩展为带原型管理器的原型模式，它在原型模式的基础上增加了一个原型管理器 PrototypeManager 类。该类用 HashMap 保存多个复制的原型，Client 类可以通过管理器的 get(String id) 方法从中获取复制的原型。</p><div align=\"center\"><img src=\"/image/yxglq.png\" width=\"400\"></div><center>图1 带原型管理器的原型模式的结构图</center><!-- rebuild by neat -->","categories":[{"name":"设计模式","path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","path":"api/tags/设计模式.json"}]}